(function () {
  'use strict';
  var _f = {
    f0: function () {
      return new Kotlin.ArrayList(0);
    },
    f1: function (f, x, y) {
      var xr = f(x);
      var yr = f(y);
      return xr.compareTo(yr);
    },
    f2: function () {
      return new Kotlin.ArrayList(0);
    },
    f3: function (f, x, y) {
      var xr = f(x);
      var yr = f(y);
      return xr.compareTo(yr);
    },
    f4: function () {
      return new Kotlin.ArrayList(0);
    },
    f5: function (f, x, y) {
      var xr = f(x);
      var yr = f(y);
      return xr.compareTo(yr);
    },
    f6: function (handler, e) {
      if (Kotlin.isType(e, MouseEvent)) {
        handler(e);
      }
    },
    f7: function (predicate, it) {
      return !predicate(it);
    },
    f8: function (it) {
      if (it == null)
        throw new Kotlin.IllegalArgumentException('null element in iterator ' + this.toString());
      else
        return it;
    },
    f9: function () {
      return new Kotlin.ArrayList(0);
    },
    fa: function (f, x, y) {
      var xr = f(x);
      var yr = f(y);
      return xr.compareTo(yr);
    },
    fb: function () {
      return new Kotlin.ArrayList(0);
    },
    fc: function (f, x, y) {
      var xr = f(x);
      var yr = f(y);
      return xr.compareTo(yr);
    },
    fd: function () {
      return new Kotlin.ArrayList(0);
    },
    fe: function (f, x, y) {
      var xr = f(x);
      var yr = f(y);
      return xr.compareTo(yr);
    },
    ff: function () {
      return new Kotlin.ArrayList(0);
    },
    fg: function (f, x, y) {
      var xr = f(x);
      var yr = f(y);
      return xr.compareTo(yr);
    },
    fh: function () {
      return new Kotlin.ArrayList(0);
    },
    fi: function (f, x, y) {
      var xr = f(x);
      var yr = f(y);
      return xr.compareTo(yr);
    },
    fj: function () {
      return new Kotlin.ArrayList(0);
    },
    fk: function (f, x, y) {
      var xr = f(x);
      var yr = f(y);
      return xr.compareTo(yr);
    },
    fl: function (block) {
      return !block();
    },
    fm: function (it) {
      return it.nodeType === Node.ELEMENT_NODE;
    },
    fn: function (it) {
      return it;
    },
    fo: function (name, it) {
      return it.nodeType === Node.ELEMENT_NODE && Kotlin.equals(it.nodeName, name);
    },
    fp: function (it) {
      return it;
    },
    fq: function (selector, it) {
      return _.kotlin.dom.hasClass(it, selector.substring(1));
    },
    fr: function (selector, it) {
      return _.kotlin.dom.hasClass(it, selector.substring(1));
    },
    fs: function () {
      return new Kotlin.ArrayList(0);
    },
    ft: function (f, x, y) {
      var xr = f(x);
      var yr = f(y);
      return xr.compareTo(yr);
    },
    fu: function () {
      return new Kotlin.ArrayList(0);
    },
    fv: function (f, x, y) {
      var xr = f(x);
      var yr = f(y);
      return xr.compareTo(yr);
    }
  }
  , classes = function () {
    var ck = Kotlin.createTrait({
    })
    , c0 = Kotlin.createTrait(ck, {
    })
    , c2 = Kotlin.createTrait(ck, {
    })
    , cu = Kotlin.createTrait(ck, c2, {
    })
    , c1 = Kotlin.createTrait(ck, c2, cu, {
    })
    , ci = Kotlin.createTrait({
    })
    , c3 = Kotlin.createTrait(ci, {
    })
    , c4 = Kotlin.createTrait(ck, c2, {
    })
    , c5 = Kotlin.createTrait(ck, {
    })
    , c6 = Kotlin.createTrait(ck, c2, {
    })
    , c7 = Kotlin.createTrait(ck, {
    })
    , c8 = Kotlin.createTrait({
      get_internal_eContainer: function () {
        return this.$internal_eContainer;
      },
      set_internal_eContainer: function (tmp$0) {
        this.$internal_eContainer = tmp$0;
      },
      get_internal_unsetCmd: function () {
        return this.$internal_unsetCmd;
      },
      set_internal_unsetCmd: function (tmp$0) {
        this.$internal_unsetCmd = tmp$0;
      },
      eContainer: function () {
        return this.get_internal_eContainer();
      },
      get_internal_containmentRefName: function () {
        return this.$internal_containmentRefName;
      },
      set_internal_containmentRefName: function (tmp$0) {
        this.$internal_containmentRefName = tmp$0;
      },
      get_internal_readOnlyElem: function () {
        return this.$internal_readOnlyElem;
      },
      set_internal_readOnlyElem: function (tmp$0) {
        this.$internal_readOnlyElem = tmp$0;
      },
      get_internal_recursive_readOnlyElem: function () {
        return this.$internal_recursive_readOnlyElem;
      },
      set_internal_recursive_readOnlyElem: function (tmp$0) {
        this.$internal_recursive_readOnlyElem = tmp$0;
      },
      setInternalReadOnly: function () {
        this.set_internal_readOnlyElem(true);
      },
      getRefInParent: function () {
        return this.get_internal_containmentRefName();
      },
      isReadOnly: function () {
        return this.get_internal_readOnlyElem();
      },
      isRecursiveReadOnly: function () {
        return this.get_internal_recursive_readOnlyElem();
      },
      setEContainer: function (container, unsetCmd, refNameInParent) {
        if (this.get_internal_readOnlyElem()) {
          return;
        }
        var tempUnsetCmd = this.get_internal_unsetCmd();
        this.set_internal_unsetCmd(null);
        if (tempUnsetCmd != null) {
          tempUnsetCmd.run();
        }
        this.set_internal_eContainer(container);
        this.set_internal_unsetCmd(unsetCmd);
        this.set_internal_containmentRefName(refNameInParent);
      },
      selectByQuery: function (query) {
        throw new Kotlin.Exception('Not activated, please add selector option in KMF generation plugin');
      },
      addModelElementListener: function (lst) {
        throw new Kotlin.Exception('Not activated, please add events option in KMF generation plugin');
      },
      removeModelElementListener: function (lst) {
        throw new Kotlin.Exception('Not activated, please add events option in KMF generation plugin');
      },
      removeAllModelElementListeners: function () {
        throw new Kotlin.Exception('Not activated, please add events option in KMF generation plugin');
      },
      addModelTreeListener: function (lst) {
        throw new Kotlin.Exception('Not activated, please add events option in KMF generation plugin');
      },
      removeModelTreeListener: function (lst) {
        throw new Kotlin.Exception('Not activated, please add events option in KMF generation plugin');
      },
      removeAllModelTreeListeners: function () {
        throw new Kotlin.Exception('Not activated, please add events option in KMF generation plugin');
      }
    })
    , cd = Kotlin.createTrait(ck, c6, {
    })
    , c9 = Kotlin.createTrait(ck, cd, {
    })
    , ca = Kotlin.createTrait(ck, {
    })
    , cb = Kotlin.createTrait(ck, {
    })
    , cc = Kotlin.createTrait(ck, {
    })
    , ce = Kotlin.createTrait(ck, c2, {
    })
    , cf = Kotlin.createTrait(ck, {
    })
    , cg = Kotlin.createTrait({
    })
    , ch = Kotlin.createTrait({
    })
    , cj = Kotlin.createTrait({
    })
    , cm = Kotlin.createTrait({
    })
    , cl = Kotlin.createTrait(cm, {
    })
    , cn = Kotlin.createTrait({
    })
    , co = Kotlin.createTrait({
    })
    , cp = Kotlin.createTrait({
    })
    , cq = Kotlin.createTrait(ck, ce, {
    })
    , cs = Kotlin.createTrait(ck, cd, {
    })
    , cr = Kotlin.createTrait(ck, cs, {
    })
    , ct = Kotlin.createTrait(ck, {
    })
    , cv = Kotlin.createTrait(ck, c2, {
    })
    , cw = Kotlin.createTrait(ck, {
    })
    , cx = Kotlin.createTrait(ck, c2, cu, {
    })
    , cy = Kotlin.createTrait(ck, {
    })
    , cz = Kotlin.createTrait(ck, c6, {
    })
    , c10 = Kotlin.createTrait(ck, c2, {
    })
    , c11 = Kotlin.createTrait(ck, c2, {
    })
    , c12 = Kotlin.createTrait(ck, {
    })
    , c13 = Kotlin.createTrait({
    })
    , c14 = Kotlin.createTrait(ck, c2, {
    })
    , c15 = Kotlin.createTrait(ck, {
    })
    , c16 = Kotlin.createTrait(ck, {
    })
    , c17 = Kotlin.createTrait(ck, cz, {
    })
    , c18 = Kotlin.createTrait(ck, cz, {
    })
    , c19 = Kotlin.createTrait(ck, c2, cu, {
    })
    , c1a = Kotlin.createTrait(ck, cd, {
    })
    , c1b = Kotlin.createTrait(ck, c2, {
    })
    , c1c = Kotlin.createTrait(ck, {
    })
    , c1d = Kotlin.createTrait(ck, c2, {
    })
    , c1e = Kotlin.createTrait(ck, cd, {
    })
    , c1f = Kotlin.createTrait(ck, c2, {
    })
    , c1g = Kotlin.createTrait(ck, cu, {
    })
    , c1h = Kotlin.createTrait({
    })
    , c1i = Kotlin.createTrait({
      handleEvent: function (arg1) {
        noImpl;
      }
    })
    , c1j = Kotlin.createClass(Kotlin.Iterator, {
      initialize: function () {
        this.$state = _.kotlin.support.State.get_NotReady();
        this.$nextValue = null;
      },
      get_state: function () {
        return this.$state;
      },
      set_state: function (tmp$0) {
        this.$state = tmp$0;
      },
      get_nextValue: function () {
        return this.$nextValue;
      },
      set_nextValue: function (tmp$0) {
        this.$nextValue = tmp$0;
      },
      hasNext: function () {
        _.kotlin.require(this.get_state() !== _.kotlin.support.State.get_Failed(), 'Failed requirement');
        var tmp$0 = this.get_state(), tmp$1;
        if (tmp$0 === _.kotlin.support.State.get_Done())
          tmp$1 = false;
        else if (tmp$0 === _.kotlin.support.State.get_Ready())
          tmp$1 = true;
        else
          tmp$1 = this.tryToComputeNext();
        return tmp$1;
      },
      next: function () {
        if (!this.hasNext())
          throw new Kotlin.NoSuchElementException();
        this.set_state(_.kotlin.support.State.get_NotReady());
        return this.get_nextValue();
      },
      peek: function () {
        if (!this.hasNext())
          throw new Kotlin.NoSuchElementException();
        return this.get_nextValue();
      },
      tryToComputeNext: function () {
        this.set_state(_.kotlin.support.State.get_Failed());
        this.computeNext();
        return this.get_state() === _.kotlin.support.State.get_Ready();
      },
      setNext: function (value) {
        this.set_nextValue(value);
        this.set_state(_.kotlin.support.State.get_Ready());
      },
      done: function () {
        this.set_state(_.kotlin.support.State.get_Done());
      }
    })
    , c1k = Kotlin.createTrait({
    });
    return {ck: ck, c0: c0, c2: c2, cu: cu, c1: c1, ci: ci, c3: c3, c4: c4, c5: c5, c6: c6, c7: c7, c8: c8, cd: cd, c9: c9, ca: ca, cb: cb, cc: cc, ce: ce, cf: cf, cg: cg, ch: ch, cj: cj, cm: cm, cl: cl, cn: cn, co: co, cp: cp, cq: cq, cs: cs, cr: cr, ct: ct, cv: cv, cw: cw, cx: cx, cy: cy, cz: cz, c10: c10, c11: c11, c12: c12, c13: c13, c14: c14, c15: c15, c16: c16, c17: c17, c18: c18, c19: c19, c1a: c1a, c1b: c1b, c1c: c1c, c1d: c1d, c1e: c1e, c1f: c1f, c1g: c1g, c1h: c1h, c1i: c1i, c1j: c1j, c1k: c1k};
  }()
  , _ = {
    org: Kotlin.definePackage({
      kevoree: Kotlin.definePackage({
        ExtraFonctionalProperty: classes.c0,
        ContainerNode: classes.c1,
        NamedElement: classes.c2,
        KevoreeFactory: classes.c3,
        PortTypeRef: classes.c4,
        Dictionary: classes.c5,
        TypeDefinition: classes.c6,
        DeployUnit: classes.c7,
        NodeType: classes.c9,
        DictionaryType: classes.ca,
        ContainerRoot: classes.cb,
        PortTypeMapping: classes.cc,
        LifeCycleTypeDefinition: classes.cd,
        TypedElement: classes.ce,
        NodeNetwork: classes.cf,
        DictionaryAttribute: classes.cq,
        CompositeType: classes.cr,
        ComponentType: classes.cs,
        DictionaryValue: classes.ct,
        Instance: classes.cu,
        Operation: classes.cv,
        Port: classes.cw,
        ComponentInstance: classes.cx,
        MBinding: classes.cy,
        PortType: classes.cz,
        Parameter: classes.c10,
        TypeLibrary: classes.c11,
        NodeLink: classes.c12,
        AdaptationPrimitiveType: classes.c14,
        Repository: classes.c15,
        Wire: classes.c16,
        ServicePortType: classes.c17,
        MessagePortType: classes.c18,
        Channel: classes.c19,
        ChannelType: classes.c1a,
        Namespace: classes.c1b,
        AdaptationPrimitiveTypeRef: classes.c1c,
        NetworkProperty: classes.c1d,
        GroupType: classes.c1e,
        IntegrationPattern: classes.c1f,
        Group: classes.c1g,
        compare: Kotlin.definePackage({
          DefaultModelCompare: Kotlin.createClass(classes.cg, {
            initialize: function () {
            },
            createSequence: function () {
              return new _.org.kevoree.trace.DefaultTraceSequence();
            },
            diff: function (origin, target) {
              return this.createSequence().populate(this.internal_diff(origin, target, false));
            },
            inter: function (origin, target) {
              return this.createSequence().populate(this.internal_diff(origin, target, true));
            },
            internal_diff: function (origin, target, inter) {
              var traces = new Kotlin.ArrayList(0);
              var objectsMap = new Kotlin.PrimitiveHashMap(0);
              traces.addAll(origin.generateDiffTraces(target, inter));
              {
                var tmp$0 = this.collectAll(origin).iterator();
                while (tmp$0.hasNext()) {
                  var child = tmp$0.next();
                  var childPath = child.path();
                  if (childPath != null) {
                    var tmp$1;
                    objectsMap.put((tmp$1 = child.path()) != null ? tmp$1 : Kotlin.throwNPE(), child);
                  }
                   else {
                    throw new Kotlin.Exception('Null child path ' + child);
                  }
                }
              }
              {
                var tmp$2 = this.collectAll(target).iterator();
                while (tmp$2.hasNext()) {
                  var child_0 = tmp$2.next();
                  var childPath_0 = child_0.path();
                  if (childPath_0 != null) {
                    if (objectsMap.containsKey(childPath_0)) {
                      if (inter) {
                        var tmp$3, tmp$4, tmp$5;
                        traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$4 = ((tmp$3 = child_0.eContainer()) != null ? tmp$3 : Kotlin.throwNPE()).path()) != null ? tmp$4 : Kotlin.throwNPE(), (tmp$5 = child_0.getRefInParent()) != null ? tmp$5 : Kotlin.throwNPE(), child_0.path(), child_0.metaClassName()));
                      }
                      var tmp$6;
                      traces.addAll(((tmp$6 = objectsMap.get(childPath_0)) != null ? tmp$6 : Kotlin.throwNPE()).generateDiffTraces(child_0, inter));
                      objectsMap.remove(childPath_0);
                    }
                     else {
                      if (!inter) {
                        var tmp$7, tmp$8, tmp$9;
                        traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$8 = ((tmp$7 = child_0.eContainer()) != null ? tmp$7 : Kotlin.throwNPE()).path()) != null ? tmp$8 : Kotlin.throwNPE(), (tmp$9 = child_0.getRefInParent()) != null ? tmp$9 : Kotlin.throwNPE(), child_0.path(), child_0.metaClassName()));
                        traces.addAll(child_0.generateDiffTraces(child_0, true));
                      }
                    }
                  }
                   else {
                    throw new Kotlin.Exception('Null child path ' + child_0);
                  }
                }
              }
              if (!inter) {
                {
                  var tmp$10 = objectsMap.values().iterator();
                  while (tmp$10.hasNext()) {
                    var diffChild = tmp$10.next();
                    var tmp$11, tmp$12, tmp$13;
                    traces.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$12 = ((tmp$11 = diffChild.eContainer()) != null ? tmp$11 : Kotlin.throwNPE()).path()) != null ? tmp$12 : Kotlin.throwNPE(), (tmp$13 = diffChild.getRefInParent()) != null ? tmp$13 : Kotlin.throwNPE(), diffChild.path(), diffChild.metaClassName()));
                    traces.addAll(diffChild.generateDiffTraces(null, inter));
                  }
                }
              }
              return traces;
            },
            collectAll: function (obj) {
              var result = new Kotlin.ArrayList(0);
              {
                var tmp$0 = obj.containedElementsList().iterator();
                while (tmp$0.hasNext()) {
                  var child = tmp$0.next();
                  if (Kotlin.isType(child, Kotlin.ArrayList)) {
                    {
                      var tmp$1 = child.iterator();
                      while (tmp$1.hasNext()) {
                        var subChild = tmp$1.next();
                        var casted = subChild;
                        result.add(casted);
                        result.addAll(this.collectAll(casted));
                      }
                    }
                  }
                   else {
                    var casted_0 = child;
                    result.add(casted_0);
                    result.addAll(this.collectAll(casted_0));
                  }
                }
              }
              return result;
            }
          })
        }),
        container: Kotlin.definePackage({
          RemoveFromContainerCommand: Kotlin.createClass({
            initialize: function (target, mutatorType, refName, element) {
              this.$target = target;
              this.$mutatorType = mutatorType;
              this.$refName = refName;
              this.$element = element;
            },
            get_target: function () {
              return this.$target;
            },
            get_mutatorType: function () {
              return this.$mutatorType;
            },
            get_refName: function () {
              return this.$refName;
            },
            get_element: function () {
              return this.$element;
            },
            run: function () {
              this.get_target().reflexiveMutator(this.get_mutatorType(), this.get_refName(), this.get_element());
            }
          }),
          KMFContainerImpl: classes.c8
        }),
        serializer: Kotlin.definePackage({
          JSONModelSerializer: Kotlin.createClass(classes.cj, {
            initialize: function () {
            },
            serialize: function (oMS) {
              var oo = new _.java.io.OutputStream();
              this.serialize_0(oMS, oo);
              oo.flush();
              return oo.get_result();
            },
            serialize_0: function (oMS, ostream) {
              var wt = new _.java.io.PrintStream(ostream);
              if (Kotlin.isType(oMS, _.org.kevoree.impl.ComponentInstanceImpl) || Kotlin.isType(oMS, _.org.kevoree.ComponentInstance)) {
                var context = this.getComponentInstanceJsonAddr(oMS);
                this.ComponentInstancetoJson(oMS, context, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.ComponentType)) {
                var context_0 = this.getComponentTypeJsonAddr(oMS);
                this.ComponentTypetoJson(oMS, context_0, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ContainerNodeImpl) || Kotlin.isType(oMS, _.org.kevoree.ContainerNode)) {
                var context_1 = this.getContainerNodeJsonAddr(oMS);
                this.ContainerNodetoJson(oMS, context_1, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ContainerRootImpl) || Kotlin.isType(oMS, _.org.kevoree.ContainerRoot)) {
                var context_2 = this.getContainerRootJsonAddr(oMS);
                this.ContainerRoottoJson(oMS, context_2, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.PortTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.PortType)) {
                var context_3 = this.getPortTypeJsonAddr(oMS);
                this.PortTypetoJson(oMS, context_3, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.PortImpl) || Kotlin.isType(oMS, _.org.kevoree.Port)) {
                var context_4 = this.getPortJsonAddr(oMS);
                this.PorttoJson(oMS, context_4, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NamespaceImpl) || Kotlin.isType(oMS, _.org.kevoree.Namespace)) {
                var context_5 = this.getNamespaceJsonAddr(oMS);
                this.NamespacetoJson(oMS, context_5, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DictionaryImpl) || Kotlin.isType(oMS, _.org.kevoree.Dictionary)) {
                var context_6 = this.getDictionaryJsonAddr(oMS);
                this.DictionarytoJson(oMS, context_6, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DictionaryTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.DictionaryType)) {
                var context_7 = this.getDictionaryTypeJsonAddr(oMS);
                this.DictionaryTypetoJson(oMS, context_7, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DictionaryAttributeImpl) || Kotlin.isType(oMS, _.org.kevoree.DictionaryAttribute)) {
                var context_8 = this.getDictionaryAttributeJsonAddr(oMS);
                this.DictionaryAttributetoJson(oMS, context_8, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DictionaryValueImpl) || Kotlin.isType(oMS, _.org.kevoree.DictionaryValue)) {
                var context_9 = this.getDictionaryValueJsonAddr(oMS);
                this.DictionaryValuetoJson(oMS, context_9, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.CompositeTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.CompositeType)) {
                var context_10 = this.getCompositeTypeJsonAddr(oMS);
                this.CompositeTypetoJson(oMS, context_10, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.PortTypeRefImpl) || Kotlin.isType(oMS, _.org.kevoree.PortTypeRef)) {
                var context_11 = this.getPortTypeRefJsonAddr(oMS);
                this.PortTypeReftoJson(oMS, context_11, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.WireImpl) || Kotlin.isType(oMS, _.org.kevoree.Wire)) {
                var context_12 = this.getWireJsonAddr(oMS);
                this.WiretoJson(oMS, context_12, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.ServicePortType)) {
                var context_13 = this.getServicePortTypeJsonAddr(oMS);
                this.ServicePortTypetoJson(oMS, context_13, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.OperationImpl) || Kotlin.isType(oMS, _.org.kevoree.Operation)) {
                var context_14 = this.getOperationJsonAddr(oMS);
                this.OperationtoJson(oMS, context_14, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ParameterImpl) || Kotlin.isType(oMS, _.org.kevoree.Parameter)) {
                var context_15 = this.getParameterJsonAddr(oMS);
                this.ParametertoJson(oMS, context_15, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.TypedElementImpl) || Kotlin.isType(oMS, _.org.kevoree.TypedElement)) {
                var context_16 = this.getTypedElementJsonAddr(oMS);
                this.TypedElementtoJson(oMS, context_16, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.MessagePortType)) {
                var context_17 = this.getMessagePortTypeJsonAddr(oMS);
                this.MessagePortTypetoJson(oMS, context_17, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.RepositoryImpl) || Kotlin.isType(oMS, _.org.kevoree.Repository)) {
                var context_18 = this.getRepositoryJsonAddr(oMS);
                this.RepositorytoJson(oMS, context_18, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.DeployUnitImpl) || Kotlin.isType(oMS, _.org.kevoree.DeployUnit)) {
                var context_19 = this.getDeployUnitJsonAddr(oMS);
                this.DeployUnittoJson(oMS, context_19, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.TypeLibraryImpl) || Kotlin.isType(oMS, _.org.kevoree.TypeLibrary)) {
                var context_20 = this.getTypeLibraryJsonAddr(oMS);
                this.TypeLibrarytoJson(oMS, context_20, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NamedElementImpl) || Kotlin.isType(oMS, _.org.kevoree.NamedElement)) {
                var context_21 = this.getNamedElementJsonAddr(oMS);
                this.NamedElementtoJson(oMS, context_21, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.IntegrationPatternImpl) || Kotlin.isType(oMS, _.org.kevoree.IntegrationPattern)) {
                var context_22 = this.getIntegrationPatternJsonAddr(oMS);
                this.IntegrationPatterntoJson(oMS, context_22, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ExtraFonctionalPropertyImpl) || Kotlin.isType(oMS, _.org.kevoree.ExtraFonctionalProperty)) {
                var context_23 = this.getExtraFonctionalPropertyJsonAddr(oMS);
                this.ExtraFonctionalPropertytoJson(oMS, context_23, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.PortTypeMappingImpl) || Kotlin.isType(oMS, _.org.kevoree.PortTypeMapping)) {
                var context_24 = this.getPortTypeMappingJsonAddr(oMS);
                this.PortTypeMappingtoJson(oMS, context_24, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ChannelImpl) || Kotlin.isType(oMS, _.org.kevoree.Channel)) {
                var context_25 = this.getChannelJsonAddr(oMS);
                this.ChanneltoJson(oMS, context_25, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.MBindingImpl) || Kotlin.isType(oMS, _.org.kevoree.MBinding)) {
                var context_26 = this.getMBindingJsonAddr(oMS);
                this.MBindingtoJson(oMS, context_26, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NodeNetworkImpl) || Kotlin.isType(oMS, _.org.kevoree.NodeNetwork)) {
                var context_27 = this.getNodeNetworkJsonAddr(oMS);
                this.NodeNetworktoJson(oMS, context_27, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NodeLinkImpl) || Kotlin.isType(oMS, _.org.kevoree.NodeLink)) {
                var context_28 = this.getNodeLinkJsonAddr(oMS);
                this.NodeLinktoJson(oMS, context_28, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NetworkPropertyImpl) || Kotlin.isType(oMS, _.org.kevoree.NetworkProperty)) {
                var context_29 = this.getNetworkPropertyJsonAddr(oMS);
                this.NetworkPropertytoJson(oMS, context_29, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.ChannelType)) {
                var context_30 = this.getChannelTypeJsonAddr(oMS);
                this.ChannelTypetoJson(oMS, context_30, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.TypeDefinitionImpl) || Kotlin.isType(oMS, _.org.kevoree.TypeDefinition)) {
                var context_31 = this.getTypeDefinitionJsonAddr(oMS);
                this.TypeDefinitiontoJson(oMS, context_31, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.InstanceImpl) || Kotlin.isType(oMS, _.org.kevoree.Instance)) {
                var context_32 = this.getInstanceJsonAddr(oMS);
                this.InstancetoJson(oMS, context_32, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.LifeCycleTypeDefinitionImpl) || Kotlin.isType(oMS, _.org.kevoree.LifeCycleTypeDefinition)) {
                var context_33 = this.getLifeCycleTypeDefinitionJsonAddr(oMS);
                this.LifeCycleTypeDefinitiontoJson(oMS, context_33, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.GroupImpl) || Kotlin.isType(oMS, _.org.kevoree.Group)) {
                var context_34 = this.getGroupJsonAddr(oMS);
                this.GrouptoJson(oMS, context_34, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.GroupType)) {
                var context_35 = this.getGroupTypeJsonAddr(oMS);
                this.GroupTypetoJson(oMS, context_35, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.NodeType)) {
                var context_36 = this.getNodeTypeJsonAddr(oMS);
                this.NodeTypetoJson(oMS, context_36, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl) || Kotlin.isType(oMS, _.org.kevoree.AdaptationPrimitiveType)) {
                var context_37 = this.getAdaptationPrimitiveTypeJsonAddr(oMS);
                this.AdaptationPrimitiveTypetoJson(oMS, context_37, wt);
              }
               else if (Kotlin.isType(oMS, _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl) || Kotlin.isType(oMS, _.org.kevoree.AdaptationPrimitiveTypeRef)) {
                var context_38 = this.getAdaptationPrimitiveTypeRefJsonAddr(oMS);
                this.AdaptationPrimitiveTypeReftoJson(oMS, context_38, wt);
              }
               else {
              }
              wt.flush();
              wt.close();
            },
            escapeJson: function (ostream, chain) {
              var i = 0;
              while (i < _.js.get_size(chain)) {
                var c = chain.charAt(i);
                if (c === '"') {
                  ostream.print('&quot;');
                }
                 else if (c === "'") {
                  ostream.print('&apos;');
                }
                 else {
                  ostream.print_0(c);
                }
                i = i + 1;
              }
            },
            getComponentInstanceJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              var subdictionary = selfObject.getDictionary();
              if (subdictionary != null) {
                var tmp$0;
                subResult.put(subdictionary, (tmp$0 = subdictionary.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryJsonAddr(subdictionary));
              }
              {
                var tmp$1 = selfObject.getProvided().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  var subPath_provided = sub.path();
                  var tmp$2;
                  subResult.put(sub, (tmp$2 = sub.path()) != null ? tmp$2 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortJsonAddr(sub));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$3 = selfObject.getRequired().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  var subPath_required = sub_0.path();
                  var tmp$4;
                  subResult.put(sub_0, (tmp$4 = sub_0.path()) != null ? tmp$4 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortJsonAddr(sub_0));
                  i = i + 1;
                }
              }
              return subResult;
            },
            ComponentInstancetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ComponentInstance" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getMetaData().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "metaData":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getMetaData());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getStarted().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "started":');
                  ostream.print_1(selfObject.getStarted());
                }
                var subsubtypeDefinition = selfObject.getTypeDefinition();
                if (subsubtypeDefinition != null) {
                  var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                  if (subsubsubtypeDefinition != null) {
                    ostream.println(',');
                    ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF ComponentInstance Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                  }
                }
                var subsubnamespace = selfObject.getNamespace();
                if (subsubnamespace != null) {
                  var subsubsubnamespace = addrs.get(subsubnamespace);
                  if (subsubsubnamespace != null) {
                    ostream.println(',');
                    ostream.print(' "namespace":"' + subsubsubnamespace + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF ComponentInstance Serialization error : No address found for reference namespace(id:' + subsubnamespace + ' container:' + subsubnamespace.eContainer() + ')');
                  }
                }
                var subdictionary = selfObject.getDictionary();
                if (subdictionary != null) {
                  ostream.println(',');
                  ostream.print('"dictionary":');
                  this.DictionarytoJson(subdictionary, addrs, ostream);
                }
                if (selfObject.getProvided().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"provided": [');
                  var iloop_first_provided = true;
                  {
                    var tmp$0 = selfObject.getProvided().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_provided) {
                        ostream.println(',');
                      }
                      this.PorttoJson(so, addrs, ostream);
                      iloop_first_provided = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getRequired().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"required": [');
                  var iloop_first_required = true;
                  {
                    var tmp$1 = selfObject.getRequired().iterator();
                    while (tmp$1.hasNext()) {
                      var so_0 = tmp$1.next();
                      if (!iloop_first_required) {
                        ostream.println(',');
                      }
                      this.PorttoJson(so_0, addrs, ostream);
                      iloop_first_required = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getComponentTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              var subdictionaryType = selfObject.getDictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              {
                var tmp$1 = selfObject.getRequired().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  var subPath_required = sub.path();
                  var tmp$2;
                  subResult.put(sub, (tmp$2 = sub.path()) != null ? tmp$2 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortTypeRefJsonAddr(sub));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$3 = selfObject.getIntegrationPatterns().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  var subPath_integrationPatterns = sub_0.path();
                  var tmp$4;
                  subResult.put(sub_0, (tmp$4 = sub_0.path()) != null ? tmp$4 : Kotlin.throwNPE());
                  subResult.putAll(this.getIntegrationPatternJsonAddr(sub_0));
                  i = i + 1;
                }
              }
              var subextraFonctionalProperties = selfObject.getExtraFonctionalProperties();
              if (subextraFonctionalProperties != null) {
                var tmp$5;
                subResult.put(subextraFonctionalProperties, (tmp$5 = subextraFonctionalProperties.path()) != null ? tmp$5 : Kotlin.throwNPE());
                subResult.putAll(this.getExtraFonctionalPropertyJsonAddr(subextraFonctionalProperties));
              }
              i = 0;
              {
                var tmp$6 = selfObject.getProvided().iterator();
                while (tmp$6.hasNext()) {
                  var sub_1 = tmp$6.next();
                  var subPath_provided = sub_1.path();
                  var tmp$7;
                  subResult.put(sub_1, (tmp$7 = sub_1.path()) != null ? tmp$7 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortTypeRefJsonAddr(sub_1));
                  i = i + 1;
                }
              }
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.CompositeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.CompositeType)) {
                subResult.putAll(this.getCompositeTypeJsonAddr(selfObject));
              }
               else {
              }
              return subResult;
            },
            ComponentTypetoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.CompositeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.CompositeType)) {
                this.CompositeTypetoJson(selfObject, addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ComponentType" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getFactoryBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getAbstract().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "abstract":');
                  ostream.print_1(selfObject.getAbstract());
                }
                if (!Kotlin.equals(selfObject.getStartMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "startMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getStartMethod());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getStopMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "stopMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getStopMethod());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getUpdateMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "updateMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getUpdateMethod());
                  ostream.print_0('"');
                }
                if (selfObject.getDeployUnits().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getDeployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference ComponentType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getSuperTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.getSuperTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference ComponentType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.getDictionaryType();
                if (subdictionaryType != null) {
                  ostream.println(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                if (selfObject.getRequired().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"required": [');
                  var iloop_first_required = true;
                  {
                    var tmp$2 = selfObject.getRequired().iterator();
                    while (tmp$2.hasNext()) {
                      var so = tmp$2.next();
                      if (!iloop_first_required) {
                        ostream.println(',');
                      }
                      this.PortTypeReftoJson(so, addrs, ostream);
                      iloop_first_required = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getIntegrationPatterns().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"integrationPatterns": [');
                  var iloop_first_integrationPatterns = true;
                  {
                    var tmp$3 = selfObject.getIntegrationPatterns().iterator();
                    while (tmp$3.hasNext()) {
                      var so_0 = tmp$3.next();
                      if (!iloop_first_integrationPatterns) {
                        ostream.println(',');
                      }
                      this.IntegrationPatterntoJson(so_0, addrs, ostream);
                      iloop_first_integrationPatterns = false;
                    }
                  }
                  ostream.println(']');
                }
                var subextraFonctionalProperties = selfObject.getExtraFonctionalProperties();
                if (subextraFonctionalProperties != null) {
                  ostream.println(',');
                  ostream.print('"extraFonctionalProperties":');
                  this.ExtraFonctionalPropertytoJson(subextraFonctionalProperties, addrs, ostream);
                }
                if (selfObject.getProvided().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"provided": [');
                  var iloop_first_provided = true;
                  {
                    var tmp$4 = selfObject.getProvided().iterator();
                    while (tmp$4.hasNext()) {
                      var so_1 = tmp$4.next();
                      if (!iloop_first_provided) {
                        ostream.println(',');
                      }
                      this.PortTypeReftoJson(so_1, addrs, ostream);
                      iloop_first_provided = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getContainerNodeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              var subdictionary = selfObject.getDictionary();
              if (subdictionary != null) {
                var tmp$0;
                subResult.put(subdictionary, (tmp$0 = subdictionary.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryJsonAddr(subdictionary));
              }
              {
                var tmp$1 = selfObject.getComponents().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  var subPath_components = sub.path();
                  var tmp$2;
                  subResult.put(sub, (tmp$2 = sub.path()) != null ? tmp$2 : Kotlin.throwNPE());
                  subResult.putAll(this.getComponentInstanceJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            ContainerNodetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ContainerNode" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getMetaData().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "metaData":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getMetaData());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getStarted().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "started":');
                  ostream.print_1(selfObject.getStarted());
                }
                var subsubtypeDefinition = selfObject.getTypeDefinition();
                if (subsubtypeDefinition != null) {
                  var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                  if (subsubsubtypeDefinition != null) {
                    ostream.println(',');
                    ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF ContainerNode Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                  }
                }
                if (selfObject.getHosts().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "hosts": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getHosts().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference ContainerNode/hosts ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                var subsubhost = selfObject.getHost();
                if (subsubhost != null) {
                  var subsubsubhost = addrs.get(subsubhost);
                  if (subsubsubhost != null) {
                    ostream.println(',');
                    ostream.print(' "host":"' + subsubsubhost + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF ContainerNode Serialization error : No address found for reference host(id:' + subsubhost + ' container:' + subsubhost.eContainer() + ')');
                  }
                }
                var subdictionary = selfObject.getDictionary();
                if (subdictionary != null) {
                  ostream.println(',');
                  ostream.print('"dictionary":');
                  this.DictionarytoJson(subdictionary, addrs, ostream);
                }
                if (selfObject.getComponents().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"components": [');
                  var iloop_first_components = true;
                  {
                    var tmp$1 = selfObject.getComponents().iterator();
                    while (tmp$1.hasNext()) {
                      var so = tmp$1.next();
                      if (!iloop_first_components) {
                        ostream.println(',');
                      }
                      this.ComponentInstancetoJson(so, addrs, ostream);
                      iloop_first_components = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getContainerRootJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.getNodes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_nodes = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getContainerNodeJsonAddr(sub));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$2 = selfObject.getTypeDefinitions().iterator();
                while (tmp$2.hasNext()) {
                  var sub_0 = tmp$2.next();
                  var subPath_typeDefinitions = sub_0.path();
                  var tmp$3;
                  subResult.put(sub_0, (tmp$3 = sub_0.path()) != null ? tmp$3 : Kotlin.throwNPE());
                  subResult.putAll(this.getTypeDefinitionJsonAddr(sub_0));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$4 = selfObject.getRepositories().iterator();
                while (tmp$4.hasNext()) {
                  var sub_1 = tmp$4.next();
                  var subPath_repositories = sub_1.path();
                  var tmp$5;
                  subResult.put(sub_1, (tmp$5 = sub_1.path()) != null ? tmp$5 : Kotlin.throwNPE());
                  subResult.putAll(this.getRepositoryJsonAddr(sub_1));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$6 = selfObject.getDataTypes().iterator();
                while (tmp$6.hasNext()) {
                  var sub_2 = tmp$6.next();
                  var subPath_dataTypes = sub_2.path();
                  var tmp$7;
                  subResult.put(sub_2, (tmp$7 = sub_2.path()) != null ? tmp$7 : Kotlin.throwNPE());
                  subResult.putAll(this.getTypedElementJsonAddr(sub_2));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$8 = selfObject.getLibraries().iterator();
                while (tmp$8.hasNext()) {
                  var sub_3 = tmp$8.next();
                  var subPath_libraries = sub_3.path();
                  var tmp$9;
                  subResult.put(sub_3, (tmp$9 = sub_3.path()) != null ? tmp$9 : Kotlin.throwNPE());
                  subResult.putAll(this.getTypeLibraryJsonAddr(sub_3));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$10 = selfObject.getHubs().iterator();
                while (tmp$10.hasNext()) {
                  var sub_4 = tmp$10.next();
                  var subPath_hubs = sub_4.path();
                  var tmp$11;
                  subResult.put(sub_4, (tmp$11 = sub_4.path()) != null ? tmp$11 : Kotlin.throwNPE());
                  subResult.putAll(this.getChannelJsonAddr(sub_4));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$12 = selfObject.getMBindings().iterator();
                while (tmp$12.hasNext()) {
                  var sub_5 = tmp$12.next();
                  var subPath_mBindings = sub_5.path();
                  var tmp$13;
                  subResult.put(sub_5, (tmp$13 = sub_5.path()) != null ? tmp$13 : Kotlin.throwNPE());
                  subResult.putAll(this.getMBindingJsonAddr(sub_5));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$14 = selfObject.getDeployUnits().iterator();
                while (tmp$14.hasNext()) {
                  var sub_6 = tmp$14.next();
                  var subPath_deployUnits = sub_6.path();
                  var tmp$15;
                  subResult.put(sub_6, (tmp$15 = sub_6.path()) != null ? tmp$15 : Kotlin.throwNPE());
                  subResult.putAll(this.getDeployUnitJsonAddr(sub_6));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$16 = selfObject.getNodeNetworks().iterator();
                while (tmp$16.hasNext()) {
                  var sub_7 = tmp$16.next();
                  var subPath_nodeNetworks = sub_7.path();
                  var tmp$17;
                  subResult.put(sub_7, (tmp$17 = sub_7.path()) != null ? tmp$17 : Kotlin.throwNPE());
                  subResult.putAll(this.getNodeNetworkJsonAddr(sub_7));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$18 = selfObject.getGroups().iterator();
                while (tmp$18.hasNext()) {
                  var sub_8 = tmp$18.next();
                  var subPath_groups = sub_8.path();
                  var tmp$19;
                  subResult.put(sub_8, (tmp$19 = sub_8.path()) != null ? tmp$19 : Kotlin.throwNPE());
                  subResult.putAll(this.getGroupJsonAddr(sub_8));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$20 = selfObject.getAdaptationPrimitiveTypes().iterator();
                while (tmp$20.hasNext()) {
                  var sub_9 = tmp$20.next();
                  var subPath_adaptationPrimitiveTypes = sub_9.path();
                  var tmp$21;
                  subResult.put(sub_9, (tmp$21 = sub_9.path()) != null ? tmp$21 : Kotlin.throwNPE());
                  subResult.putAll(this.getAdaptationPrimitiveTypeJsonAddr(sub_9));
                  i = i + 1;
                }
              }
              return subResult;
            },
            ContainerRoottoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ContainerRoot" ');
                if (!Kotlin.equals(selfObject.getGenerated_KMF_ID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGenerated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.getNodes().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"nodes": [');
                  var iloop_first_nodes = true;
                  {
                    var tmp$0 = selfObject.getNodes().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_nodes) {
                        ostream.println(',');
                      }
                      this.ContainerNodetoJson(so, addrs, ostream);
                      iloop_first_nodes = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getTypeDefinitions().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"typeDefinitions": [');
                  var iloop_first_typeDefinitions = true;
                  {
                    var tmp$1 = selfObject.getTypeDefinitions().iterator();
                    while (tmp$1.hasNext()) {
                      var so_0 = tmp$1.next();
                      if (!iloop_first_typeDefinitions) {
                        ostream.println(',');
                      }
                      this.TypeDefinitiontoJson(so_0, addrs, ostream);
                      iloop_first_typeDefinitions = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getRepositories().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"repositories": [');
                  var iloop_first_repositories = true;
                  {
                    var tmp$2 = selfObject.getRepositories().iterator();
                    while (tmp$2.hasNext()) {
                      var so_1 = tmp$2.next();
                      if (!iloop_first_repositories) {
                        ostream.println(',');
                      }
                      this.RepositorytoJson(so_1, addrs, ostream);
                      iloop_first_repositories = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getDataTypes().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"dataTypes": [');
                  var iloop_first_dataTypes = true;
                  {
                    var tmp$3 = selfObject.getDataTypes().iterator();
                    while (tmp$3.hasNext()) {
                      var so_2 = tmp$3.next();
                      if (!iloop_first_dataTypes) {
                        ostream.println(',');
                      }
                      this.TypedElementtoJson(so_2, addrs, ostream);
                      iloop_first_dataTypes = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getLibraries().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"libraries": [');
                  var iloop_first_libraries = true;
                  {
                    var tmp$4 = selfObject.getLibraries().iterator();
                    while (tmp$4.hasNext()) {
                      var so_3 = tmp$4.next();
                      if (!iloop_first_libraries) {
                        ostream.println(',');
                      }
                      this.TypeLibrarytoJson(so_3, addrs, ostream);
                      iloop_first_libraries = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getHubs().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"hubs": [');
                  var iloop_first_hubs = true;
                  {
                    var tmp$5 = selfObject.getHubs().iterator();
                    while (tmp$5.hasNext()) {
                      var so_4 = tmp$5.next();
                      if (!iloop_first_hubs) {
                        ostream.println(',');
                      }
                      this.ChanneltoJson(so_4, addrs, ostream);
                      iloop_first_hubs = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getMBindings().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"mBindings": [');
                  var iloop_first_mBindings = true;
                  {
                    var tmp$6 = selfObject.getMBindings().iterator();
                    while (tmp$6.hasNext()) {
                      var so_5 = tmp$6.next();
                      if (!iloop_first_mBindings) {
                        ostream.println(',');
                      }
                      this.MBindingtoJson(so_5, addrs, ostream);
                      iloop_first_mBindings = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getDeployUnits().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"deployUnits": [');
                  var iloop_first_deployUnits = true;
                  {
                    var tmp$7 = selfObject.getDeployUnits().iterator();
                    while (tmp$7.hasNext()) {
                      var so_6 = tmp$7.next();
                      if (!iloop_first_deployUnits) {
                        ostream.println(',');
                      }
                      this.DeployUnittoJson(so_6, addrs, ostream);
                      iloop_first_deployUnits = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getNodeNetworks().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"nodeNetworks": [');
                  var iloop_first_nodeNetworks = true;
                  {
                    var tmp$8 = selfObject.getNodeNetworks().iterator();
                    while (tmp$8.hasNext()) {
                      var so_7 = tmp$8.next();
                      if (!iloop_first_nodeNetworks) {
                        ostream.println(',');
                      }
                      this.NodeNetworktoJson(so_7, addrs, ostream);
                      iloop_first_nodeNetworks = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getGroups().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"groups": [');
                  var iloop_first_groups = true;
                  {
                    var tmp$9 = selfObject.getGroups().iterator();
                    while (tmp$9.hasNext()) {
                      var so_8 = tmp$9.next();
                      if (!iloop_first_groups) {
                        ostream.println(',');
                      }
                      this.GrouptoJson(so_8, addrs, ostream);
                      iloop_first_groups = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getAdaptationPrimitiveTypes().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"adaptationPrimitiveTypes": [');
                  var iloop_first_adaptationPrimitiveTypes = true;
                  {
                    var tmp$10 = selfObject.getAdaptationPrimitiveTypes().iterator();
                    while (tmp$10.hasNext()) {
                      var so_9 = tmp$10.next();
                      if (!iloop_first_adaptationPrimitiveTypes) {
                        ostream.println(',');
                      }
                      this.AdaptationPrimitiveTypetoJson(so_9, addrs, ostream);
                      iloop_first_adaptationPrimitiveTypes = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getPortTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionaryType = selfObject.getDictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ServicePortType)) {
                subResult.putAll(this.getServicePortTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.MessagePortType)) {
                subResult.putAll(this.getMessagePortTypeJsonAddr(selfObject));
              }
               else {
              }
              return subResult;
            },
            PortTypetoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ServicePortType)) {
                this.ServicePortTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.MessagePortType)) {
                this.MessagePortTypetoJson(selfObject, addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:PortType" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getFactoryBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getAbstract().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "abstract":');
                  ostream.print_1(selfObject.getAbstract());
                }
                if (!Kotlin.equals(selfObject.getSynchrone().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "synchrone":');
                  ostream.print_1(selfObject.getSynchrone());
                }
                if (selfObject.getDeployUnits().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getDeployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference PortType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getSuperTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.getSuperTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference PortType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.getDictionaryType();
                if (subdictionaryType != null) {
                  ostream.println(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                ostream.println('}');
              }
            },
            getPortJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            PorttoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Port" ');
                if (!Kotlin.equals(selfObject.getGenerated_KMF_ID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGenerated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.getBindings().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "bindings": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getBindings().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference Port/bindings ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                var subsubportTypeRef = selfObject.getPortTypeRef();
                if (subsubportTypeRef != null) {
                  var subsubsubportTypeRef = addrs.get(subsubportTypeRef);
                  if (subsubsubportTypeRef != null) {
                    ostream.println(',');
                    ostream.print(' "portTypeRef":"' + subsubsubportTypeRef + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF Port Serialization error : No address found for reference portTypeRef(id:' + subsubportTypeRef + ' container:' + subsubportTypeRef.eContainer() + ')');
                  }
                }
                ostream.println('}');
              }
            },
            getNamespaceJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.getChilds().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_childs = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getNamespaceJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            NamespacetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Namespace" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                var subsubparent = selfObject.getParent();
                if (subsubparent != null) {
                  var subsubsubparent = addrs.get(subsubparent);
                  if (subsubsubparent != null) {
                    ostream.println(',');
                    ostream.print(' "parent":"' + subsubsubparent + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF Namespace Serialization error : No address found for reference parent(id:' + subsubparent + ' container:' + subsubparent.eContainer() + ')');
                  }
                }
                if (selfObject.getChilds().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"childs": [');
                  var iloop_first_childs = true;
                  {
                    var tmp$0 = selfObject.getChilds().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_childs) {
                        ostream.println(',');
                      }
                      this.NamespacetoJson(so, addrs, ostream);
                      iloop_first_childs = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getDictionaryJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.getValues().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_values = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getDictionaryValueJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            DictionarytoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Dictionary" ');
                if (!Kotlin.equals(selfObject.getGenerated_KMF_ID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGenerated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.getValues().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"values": [');
                  var iloop_first_values = true;
                  {
                    var tmp$0 = selfObject.getValues().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_values) {
                        ostream.println(',');
                      }
                      this.DictionaryValuetoJson(so, addrs, ostream);
                      iloop_first_values = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getDictionaryTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.getAttributes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_attributes = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getDictionaryAttributeJsonAddr(sub));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$2 = selfObject.getDefaultValues().iterator();
                while (tmp$2.hasNext()) {
                  var sub_0 = tmp$2.next();
                  var subPath_defaultValues = sub_0.path();
                  var tmp$3;
                  subResult.put(sub_0, (tmp$3 = sub_0.path()) != null ? tmp$3 : Kotlin.throwNPE());
                  subResult.putAll(this.getDictionaryValueJsonAddr(sub_0));
                  i = i + 1;
                }
              }
              return subResult;
            },
            DictionaryTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:DictionaryType" ');
                if (!Kotlin.equals(selfObject.getGenerated_KMF_ID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGenerated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.getAttributes().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"attributes": [');
                  var iloop_first_attributes = true;
                  {
                    var tmp$0 = selfObject.getAttributes().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_attributes) {
                        ostream.println(',');
                      }
                      this.DictionaryAttributetoJson(so, addrs, ostream);
                      iloop_first_attributes = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getDefaultValues().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"defaultValues": [');
                  var iloop_first_defaultValues = true;
                  {
                    var tmp$1 = selfObject.getDefaultValues().iterator();
                    while (tmp$1.hasNext()) {
                      var so_0 = tmp$1.next();
                      if (!iloop_first_defaultValues) {
                        ostream.println(',');
                      }
                      this.DictionaryValuetoJson(so_0, addrs, ostream);
                      iloop_first_defaultValues = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getDictionaryAttributeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            DictionaryAttributetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:DictionaryAttribute" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getOptional().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "optional":');
                  ostream.print_1(selfObject.getOptional());
                }
                if (!Kotlin.equals(selfObject.getState().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "state":');
                  ostream.print_1(selfObject.getState());
                }
                if (!Kotlin.equals(selfObject.getDatatype().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "datatype":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getDatatype());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getFragmentDependant().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "fragmentDependant":');
                  ostream.print_1(selfObject.getFragmentDependant());
                }
                if (selfObject.getGenericTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "genericTypes": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getGenericTypes().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference DictionaryAttribute/genericTypes ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                ostream.println('}');
              }
            },
            getDictionaryValueJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            DictionaryValuetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:DictionaryValue" ');
                if (!Kotlin.equals(selfObject.getValue().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "value":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getValue());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getGenerated_KMF_ID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGenerated_KMF_ID());
                  ostream.print_0('"');
                }
                var subsubattribute = selfObject.getAttribute();
                if (subsubattribute != null) {
                  var subsubsubattribute = addrs.get(subsubattribute);
                  if (subsubsubattribute != null) {
                    ostream.println(',');
                    ostream.print(' "attribute":"' + subsubsubattribute + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF DictionaryValue Serialization error : No address found for reference attribute(id:' + subsubattribute + ' container:' + subsubattribute.eContainer() + ')');
                  }
                }
                var subsubtargetNode = selfObject.getTargetNode();
                if (subsubtargetNode != null) {
                  var subsubsubtargetNode = addrs.get(subsubtargetNode);
                  if (subsubsubtargetNode != null) {
                    ostream.println(',');
                    ostream.print(' "targetNode":"' + subsubsubtargetNode + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF DictionaryValue Serialization error : No address found for reference targetNode(id:' + subsubtargetNode + ' container:' + subsubtargetNode.eContainer() + ')');
                  }
                }
                ostream.println('}');
              }
            },
            getCompositeTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              var subdictionaryType = selfObject.getDictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              {
                var tmp$1 = selfObject.getRequired().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  var subPath_required = sub.path();
                  var tmp$2;
                  subResult.put(sub, (tmp$2 = sub.path()) != null ? tmp$2 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortTypeRefJsonAddr(sub));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$3 = selfObject.getIntegrationPatterns().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  var subPath_integrationPatterns = sub_0.path();
                  var tmp$4;
                  subResult.put(sub_0, (tmp$4 = sub_0.path()) != null ? tmp$4 : Kotlin.throwNPE());
                  subResult.putAll(this.getIntegrationPatternJsonAddr(sub_0));
                  i = i + 1;
                }
              }
              var subextraFonctionalProperties = selfObject.getExtraFonctionalProperties();
              if (subextraFonctionalProperties != null) {
                var tmp$5;
                subResult.put(subextraFonctionalProperties, (tmp$5 = subextraFonctionalProperties.path()) != null ? tmp$5 : Kotlin.throwNPE());
                subResult.putAll(this.getExtraFonctionalPropertyJsonAddr(subextraFonctionalProperties));
              }
              i = 0;
              {
                var tmp$6 = selfObject.getProvided().iterator();
                while (tmp$6.hasNext()) {
                  var sub_1 = tmp$6.next();
                  var subPath_provided = sub_1.path();
                  var tmp$7;
                  subResult.put(sub_1, (tmp$7 = sub_1.path()) != null ? tmp$7 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortTypeRefJsonAddr(sub_1));
                  i = i + 1;
                }
              }
              i = 0;
              {
                var tmp$8 = selfObject.getWires().iterator();
                while (tmp$8.hasNext()) {
                  var sub_2 = tmp$8.next();
                  var subPath_wires = sub_2.path();
                  var tmp$9;
                  subResult.put(sub_2, (tmp$9 = sub_2.path()) != null ? tmp$9 : Kotlin.throwNPE());
                  subResult.putAll(this.getWireJsonAddr(sub_2));
                  i = i + 1;
                }
              }
              return subResult;
            },
            CompositeTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:CompositeType" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getFactoryBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getAbstract().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "abstract":');
                  ostream.print_1(selfObject.getAbstract());
                }
                if (!Kotlin.equals(selfObject.getStartMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "startMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getStartMethod());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getStopMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "stopMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getStopMethod());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getUpdateMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "updateMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getUpdateMethod());
                  ostream.print_0('"');
                }
                if (selfObject.getDeployUnits().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getDeployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference CompositeType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getSuperTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.getSuperTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference CompositeType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getChilds().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "childs": [');
                  var firstItLoop_1 = true;
                  {
                    var tmp$2 = selfObject.getChilds().iterator();
                    while (tmp$2.hasNext()) {
                      var sub_1 = tmp$2.next();
                      if (!firstItLoop_1) {
                        ostream.println_0(',');
                      }
                      var subsub_1 = addrs.get(sub_1);
                      if (subsub_1 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_1);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference CompositeType/childs ');
                      }
                      firstItLoop_1 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.getDictionaryType();
                if (subdictionaryType != null) {
                  ostream.println(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                if (selfObject.getRequired().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"required": [');
                  var iloop_first_required = true;
                  {
                    var tmp$3 = selfObject.getRequired().iterator();
                    while (tmp$3.hasNext()) {
                      var so = tmp$3.next();
                      if (!iloop_first_required) {
                        ostream.println(',');
                      }
                      this.PortTypeReftoJson(so, addrs, ostream);
                      iloop_first_required = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getIntegrationPatterns().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"integrationPatterns": [');
                  var iloop_first_integrationPatterns = true;
                  {
                    var tmp$4 = selfObject.getIntegrationPatterns().iterator();
                    while (tmp$4.hasNext()) {
                      var so_0 = tmp$4.next();
                      if (!iloop_first_integrationPatterns) {
                        ostream.println(',');
                      }
                      this.IntegrationPatterntoJson(so_0, addrs, ostream);
                      iloop_first_integrationPatterns = false;
                    }
                  }
                  ostream.println(']');
                }
                var subextraFonctionalProperties = selfObject.getExtraFonctionalProperties();
                if (subextraFonctionalProperties != null) {
                  ostream.println(',');
                  ostream.print('"extraFonctionalProperties":');
                  this.ExtraFonctionalPropertytoJson(subextraFonctionalProperties, addrs, ostream);
                }
                if (selfObject.getProvided().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"provided": [');
                  var iloop_first_provided = true;
                  {
                    var tmp$5 = selfObject.getProvided().iterator();
                    while (tmp$5.hasNext()) {
                      var so_1 = tmp$5.next();
                      if (!iloop_first_provided) {
                        ostream.println(',');
                      }
                      this.PortTypeReftoJson(so_1, addrs, ostream);
                      iloop_first_provided = false;
                    }
                  }
                  ostream.println(']');
                }
                if (selfObject.getWires().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"wires": [');
                  var iloop_first_wires = true;
                  {
                    var tmp$6 = selfObject.getWires().iterator();
                    while (tmp$6.hasNext()) {
                      var so_2 = tmp$6.next();
                      if (!iloop_first_wires) {
                        ostream.println(',');
                      }
                      this.WiretoJson(so_2, addrs, ostream);
                      iloop_first_wires = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getPortTypeRefJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.getMappings().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_mappings = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getPortTypeMappingJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            PortTypeReftoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:PortTypeRef" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getOptional().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "optional":');
                  ostream.print_1(selfObject.getOptional());
                }
                if (!Kotlin.equals(selfObject.getNoDependency().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "noDependency":');
                  ostream.print_1(selfObject.getNoDependency());
                }
                var subsubref = selfObject.getRef();
                if (subsubref != null) {
                  var subsubsubref = addrs.get(subsubref);
                  if (subsubsubref != null) {
                    ostream.println(',');
                    ostream.print(' "ref":"' + subsubsubref + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF PortTypeRef Serialization error : No address found for reference ref(id:' + subsubref + ' container:' + subsubref.eContainer() + ')');
                  }
                }
                if (selfObject.getMappings().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"mappings": [');
                  var iloop_first_mappings = true;
                  {
                    var tmp$0 = selfObject.getMappings().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_mappings) {
                        ostream.println(',');
                      }
                      this.PortTypeMappingtoJson(so, addrs, ostream);
                      iloop_first_mappings = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getWireJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            WiretoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Wire" ');
                if (!Kotlin.equals(selfObject.getGenerated_KMF_ID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGenerated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.getPorts().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "ports": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getPorts().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference Wire/ports ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                ostream.println('}');
              }
            },
            getServicePortTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              var subdictionaryType = selfObject.getDictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              {
                var tmp$1 = selfObject.getOperations().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  var subPath_operations = sub.path();
                  var tmp$2;
                  subResult.put(sub, (tmp$2 = sub.path()) != null ? tmp$2 : Kotlin.throwNPE());
                  subResult.putAll(this.getOperationJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            ServicePortTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ServicePortType" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getFactoryBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getAbstract().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "abstract":');
                  ostream.print_1(selfObject.getAbstract());
                }
                if (!Kotlin.equals(selfObject.getSynchrone().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "synchrone":');
                  ostream.print_1(selfObject.getSynchrone());
                }
                if (!Kotlin.equals(selfObject.getInterface().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "interface":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getInterface());
                  ostream.print_0('"');
                }
                if (selfObject.getDeployUnits().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getDeployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference ServicePortType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getSuperTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.getSuperTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference ServicePortType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.getDictionaryType();
                if (subdictionaryType != null) {
                  ostream.println(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                if (selfObject.getOperations().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"operations": [');
                  var iloop_first_operations = true;
                  {
                    var tmp$2 = selfObject.getOperations().iterator();
                    while (tmp$2.hasNext()) {
                      var so = tmp$2.next();
                      if (!iloop_first_operations) {
                        ostream.println(',');
                      }
                      this.OperationtoJson(so, addrs, ostream);
                      iloop_first_operations = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getOperationJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.getParameters().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_parameters = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getParameterJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            OperationtoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Operation" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                var subsubreturnType = selfObject.getReturnType();
                if (subsubreturnType != null) {
                  var subsubsubreturnType = addrs.get(subsubreturnType);
                  if (subsubsubreturnType != null) {
                    ostream.println(',');
                    ostream.print(' "returnType":"' + subsubsubreturnType + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF Operation Serialization error : No address found for reference returnType(id:' + subsubreturnType + ' container:' + subsubreturnType.eContainer() + ')');
                  }
                }
                if (selfObject.getParameters().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"parameters": [');
                  var iloop_first_parameters = true;
                  {
                    var tmp$0 = selfObject.getParameters().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_parameters) {
                        ostream.println(',');
                      }
                      this.ParametertoJson(so, addrs, ostream);
                      iloop_first_parameters = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getParameterJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            ParametertoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Parameter" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getOrder().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "order":');
                  ostream.print('"');
                  ostream.print_2(selfObject.getOrder());
                  ostream.print_0('"');
                }
                var subsubtype = selfObject.getType();
                if (subsubtype != null) {
                  var subsubsubtype = addrs.get(subsubtype);
                  if (subsubsubtype != null) {
                    ostream.println(',');
                    ostream.print(' "type":"' + subsubsubtype + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF Parameter Serialization error : No address found for reference type(id:' + subsubtype + ' container:' + subsubtype.eContainer() + ')');
                  }
                }
                ostream.println('}');
              }
            },
            getTypedElementJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.DictionaryAttributeImpl) || Kotlin.isType(selfObject, _.org.kevoree.DictionaryAttribute)) {
                subResult.putAll(this.getDictionaryAttributeJsonAddr(selfObject));
              }
               else {
              }
              return subResult;
            },
            TypedElementtoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.DictionaryAttributeImpl) || Kotlin.isType(selfObject, _.org.kevoree.DictionaryAttribute)) {
                this.DictionaryAttributetoJson(selfObject, addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:TypedElement" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (selfObject.getGenericTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "genericTypes": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getGenericTypes().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference TypedElement/genericTypes ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                ostream.println('}');
              }
            },
            getMessagePortTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionaryType = selfObject.getDictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              return subResult;
            },
            MessagePortTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:MessagePortType" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getFactoryBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getAbstract().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "abstract":');
                  ostream.print_1(selfObject.getAbstract());
                }
                if (!Kotlin.equals(selfObject.getSynchrone().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "synchrone":');
                  ostream.print_1(selfObject.getSynchrone());
                }
                if (selfObject.getDeployUnits().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getDeployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference MessagePortType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getSuperTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.getSuperTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference MessagePortType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getFilters().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "filters": [');
                  var firstItLoop_1 = true;
                  {
                    var tmp$2 = selfObject.getFilters().iterator();
                    while (tmp$2.hasNext()) {
                      var sub_1 = tmp$2.next();
                      if (!firstItLoop_1) {
                        ostream.println_0(',');
                      }
                      var subsub_1 = addrs.get(sub_1);
                      if (subsub_1 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_1);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference MessagePortType/filters ');
                      }
                      firstItLoop_1 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.getDictionaryType();
                if (subdictionaryType != null) {
                  ostream.println(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                ostream.println('}');
              }
            },
            getRepositoryJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            RepositorytoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Repository" ');
                if (!Kotlin.equals(selfObject.getUrl().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "url":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getUrl());
                  ostream.print_0('"');
                }
                if (selfObject.getUnits().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "units": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference Repository/units ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                ostream.println('}');
              }
            },
            getDeployUnitJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            DeployUnittoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:DeployUnit" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getGroupName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "groupName":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGroupName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getUnitName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "unitName":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getUnitName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getVersion().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "version":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getVersion());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getUrl().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "url":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getUrl());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getHashcode().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "hashcode":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getHashcode());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getType().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "type":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getType());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getGenerated_KMF_ID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGenerated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.getRequiredLibs().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "requiredLibs": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getRequiredLibs().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference DeployUnit/requiredLibs ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                var subsubtargetNodeType = selfObject.getTargetNodeType();
                if (subsubtargetNodeType != null) {
                  var subsubsubtargetNodeType = addrs.get(subsubtargetNodeType);
                  if (subsubsubtargetNodeType != null) {
                    ostream.println(',');
                    ostream.print(' "targetNodeType":"' + subsubsubtargetNodeType + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF DeployUnit Serialization error : No address found for reference targetNodeType(id:' + subsubtargetNodeType + ' container:' + subsubtargetNodeType.eContainer() + ')');
                  }
                }
                ostream.println('}');
              }
            },
            getTypeLibraryJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            TypeLibrarytoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:TypeLibrary" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (selfObject.getSubTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "subTypes": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getSubTypes().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference TypeLibrary/subTypes ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                ostream.println('}');
              }
            },
            getNamedElementJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentType)) {
                subResult.putAll(this.getComponentTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NamespaceImpl) || Kotlin.isType(selfObject, _.org.kevoree.Namespace)) {
                subResult.putAll(this.getNamespaceJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.PortTypeRefImpl) || Kotlin.isType(selfObject, _.org.kevoree.PortTypeRef)) {
                subResult.putAll(this.getPortTypeRefJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ServicePortType)) {
                subResult.putAll(this.getServicePortTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.OperationImpl) || Kotlin.isType(selfObject, _.org.kevoree.Operation)) {
                subResult.putAll(this.getOperationJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ParameterImpl) || Kotlin.isType(selfObject, _.org.kevoree.Parameter)) {
                subResult.putAll(this.getParameterJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.TypedElementImpl) || Kotlin.isType(selfObject, _.org.kevoree.TypedElement)) {
                subResult.putAll(this.getTypedElementJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.MessagePortType)) {
                subResult.putAll(this.getMessagePortTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.TypeLibraryImpl) || Kotlin.isType(selfObject, _.org.kevoree.TypeLibrary)) {
                subResult.putAll(this.getTypeLibraryJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.IntegrationPatternImpl) || Kotlin.isType(selfObject, _.org.kevoree.IntegrationPattern)) {
                subResult.putAll(this.getIntegrationPatternJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NetworkPropertyImpl) || Kotlin.isType(selfObject, _.org.kevoree.NetworkProperty)) {
                subResult.putAll(this.getNetworkPropertyJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ChannelType)) {
                subResult.putAll(this.getChannelTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.InstanceImpl) || Kotlin.isType(selfObject, _.org.kevoree.Instance)) {
                subResult.putAll(this.getInstanceJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.GroupType)) {
                subResult.putAll(this.getGroupTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.NodeType)) {
                subResult.putAll(this.getNodeTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.AdaptationPrimitiveType)) {
                subResult.putAll(this.getAdaptationPrimitiveTypeJsonAddr(selfObject));
              }
               else {
              }
              return subResult;
            },
            NamedElementtoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentType)) {
                this.ComponentTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NamespaceImpl) || Kotlin.isType(selfObject, _.org.kevoree.Namespace)) {
                this.NamespacetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.PortTypeRefImpl) || Kotlin.isType(selfObject, _.org.kevoree.PortTypeRef)) {
                this.PortTypeReftoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ServicePortType)) {
                this.ServicePortTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.OperationImpl) || Kotlin.isType(selfObject, _.org.kevoree.Operation)) {
                this.OperationtoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ParameterImpl) || Kotlin.isType(selfObject, _.org.kevoree.Parameter)) {
                this.ParametertoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.TypedElementImpl) || Kotlin.isType(selfObject, _.org.kevoree.TypedElement)) {
                this.TypedElementtoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.MessagePortType)) {
                this.MessagePortTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.TypeLibraryImpl) || Kotlin.isType(selfObject, _.org.kevoree.TypeLibrary)) {
                this.TypeLibrarytoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.IntegrationPatternImpl) || Kotlin.isType(selfObject, _.org.kevoree.IntegrationPattern)) {
                this.IntegrationPatterntoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NetworkPropertyImpl) || Kotlin.isType(selfObject, _.org.kevoree.NetworkProperty)) {
                this.NetworkPropertytoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ChannelType)) {
                this.ChannelTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.InstanceImpl) || Kotlin.isType(selfObject, _.org.kevoree.Instance)) {
                this.InstancetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.GroupType)) {
                this.GroupTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.NodeType)) {
                this.NodeTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.AdaptationPrimitiveType)) {
                this.AdaptationPrimitiveTypetoJson(selfObject, addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:NamedElement" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                ostream.println('}');
              }
            },
            getIntegrationPatternJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.getExtraFonctionalProperties().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_extraFonctionalProperties = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getExtraFonctionalPropertyJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            IntegrationPatterntoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:IntegrationPattern" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (selfObject.getPortTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "portTypes": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getPortTypes().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference IntegrationPattern/portTypes ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getExtraFonctionalProperties().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"extraFonctionalProperties": [');
                  var iloop_first_extraFonctionalProperties = true;
                  {
                    var tmp$1 = selfObject.getExtraFonctionalProperties().iterator();
                    while (tmp$1.hasNext()) {
                      var so = tmp$1.next();
                      if (!iloop_first_extraFonctionalProperties) {
                        ostream.println(',');
                      }
                      this.ExtraFonctionalPropertytoJson(so, addrs, ostream);
                      iloop_first_extraFonctionalProperties = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getExtraFonctionalPropertyJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            ExtraFonctionalPropertytoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ExtraFonctionalProperty" ');
                if (!Kotlin.equals(selfObject.getGenerated_KMF_ID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGenerated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.getPortTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "portTypes": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getPortTypes().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference ExtraFonctionalProperty/portTypes ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                ostream.println('}');
              }
            },
            getPortTypeMappingJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            PortTypeMappingtoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:PortTypeMapping" ');
                if (!Kotlin.equals(selfObject.getBeanMethodName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "beanMethodName":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getBeanMethodName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getServiceMethodName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "serviceMethodName":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getServiceMethodName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getParamTypes().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "paramTypes":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getParamTypes());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getGenerated_KMF_ID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGenerated_KMF_ID());
                  ostream.print_0('"');
                }
                ostream.println('}');
              }
            },
            getChannelJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionary = selfObject.getDictionary();
              if (subdictionary != null) {
                var tmp$0;
                subResult.put(subdictionary, (tmp$0 = subdictionary.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryJsonAddr(subdictionary));
              }
              return subResult;
            },
            ChanneltoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Channel" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getMetaData().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "metaData":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getMetaData());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getStarted().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "started":');
                  ostream.print_1(selfObject.getStarted());
                }
                var subsubtypeDefinition = selfObject.getTypeDefinition();
                if (subsubtypeDefinition != null) {
                  var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                  if (subsubsubtypeDefinition != null) {
                    ostream.println(',');
                    ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF Channel Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                  }
                }
                if (selfObject.getBindings().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "bindings": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getBindings().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference Channel/bindings ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionary = selfObject.getDictionary();
                if (subdictionary != null) {
                  ostream.println(',');
                  ostream.print('"dictionary":');
                  this.DictionarytoJson(subdictionary, addrs, ostream);
                }
                ostream.println('}');
              }
            },
            getMBindingJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            MBindingtoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:MBinding" ');
                if (!Kotlin.equals(selfObject.getGenerated_KMF_ID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGenerated_KMF_ID());
                  ostream.print_0('"');
                }
                ostream.println('}');
              }
            },
            getNodeNetworkJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.getLink().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_link = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getNodeLinkJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            NodeNetworktoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:NodeNetwork" ');
                if (!Kotlin.equals(selfObject.getGenerated_KMF_ID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGenerated_KMF_ID());
                  ostream.print_0('"');
                }
                var subsubinitBy = selfObject.getInitBy();
                if (subsubinitBy != null) {
                  var subsubsubinitBy = addrs.get(subsubinitBy);
                  if (subsubsubinitBy != null) {
                    ostream.println(',');
                    ostream.print(' "initBy":"' + subsubsubinitBy + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF NodeNetwork Serialization error : No address found for reference initBy(id:' + subsubinitBy + ' container:' + subsubinitBy.eContainer() + ')');
                  }
                }
                var subsubtarget = selfObject.getTarget();
                if (subsubtarget != null) {
                  var subsubsubtarget = addrs.get(subsubtarget);
                  if (subsubsubtarget != null) {
                    ostream.println(',');
                    ostream.print(' "target":"' + subsubsubtarget + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF NodeNetwork Serialization error : No address found for reference target(id:' + subsubtarget + ' container:' + subsubtarget.eContainer() + ')');
                  }
                }
                if (selfObject.getLink().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"link": [');
                  var iloop_first_link = true;
                  {
                    var tmp$0 = selfObject.getLink().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_link) {
                        ostream.println(',');
                      }
                      this.NodeLinktoJson(so, addrs, ostream);
                      iloop_first_link = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getNodeLinkJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              {
                var tmp$0 = selfObject.getNetworkProperties().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  var subPath_networkProperties = sub.path();
                  var tmp$1;
                  subResult.put(sub, (tmp$1 = sub.path()) != null ? tmp$1 : Kotlin.throwNPE());
                  subResult.putAll(this.getNetworkPropertyJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            NodeLinktoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:NodeLink" ');
                if (!Kotlin.equals(selfObject.getNetworkType().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "networkType":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getNetworkType());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getEstimatedRate().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "estimatedRate":');
                  ostream.print('"');
                  ostream.print_2(selfObject.getEstimatedRate());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getLastCheck().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "lastCheck":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getLastCheck());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getZoneID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "zoneID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getZoneID());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getGenerated_KMF_ID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGenerated_KMF_ID());
                  ostream.print_0('"');
                }
                if (selfObject.getNetworkProperties().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"networkProperties": [');
                  var iloop_first_networkProperties = true;
                  {
                    var tmp$0 = selfObject.getNetworkProperties().iterator();
                    while (tmp$0.hasNext()) {
                      var so = tmp$0.next();
                      if (!iloop_first_networkProperties) {
                        ostream.println(',');
                      }
                      this.NetworkPropertytoJson(so, addrs, ostream);
                      iloop_first_networkProperties = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getNetworkPropertyJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            NetworkPropertytoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:NetworkProperty" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getValue().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "value":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getValue());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getLastCheck().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "lastCheck":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getLastCheck());
                  ostream.print_0('"');
                }
                ostream.println('}');
              }
            },
            getChannelTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionaryType = selfObject.getDictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              return subResult;
            },
            ChannelTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:ChannelType" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getFactoryBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getAbstract().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "abstract":');
                  ostream.print_1(selfObject.getAbstract());
                }
                if (!Kotlin.equals(selfObject.getStartMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "startMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getStartMethod());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getStopMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "stopMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getStopMethod());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getUpdateMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "updateMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getUpdateMethod());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getLowerBindings().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "lowerBindings":');
                  ostream.print('"');
                  ostream.print_2(selfObject.getLowerBindings());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getUpperBindings().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "upperBindings":');
                  ostream.print('"');
                  ostream.print_2(selfObject.getUpperBindings());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getLowerFragments().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "lowerFragments":');
                  ostream.print('"');
                  ostream.print_2(selfObject.getLowerFragments());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getUpperFragments().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "upperFragments":');
                  ostream.print('"');
                  ostream.print_2(selfObject.getUpperFragments());
                  ostream.print_0('"');
                }
                if (selfObject.getDeployUnits().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getDeployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference ChannelType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getSuperTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.getSuperTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference ChannelType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.getDictionaryType();
                if (subdictionaryType != null) {
                  ostream.println(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                ostream.println('}');
              }
            },
            getTypeDefinitionJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionaryType = selfObject.getDictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentType)) {
                subResult.putAll(this.getComponentTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ServicePortType)) {
                subResult.putAll(this.getServicePortTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.MessagePortType)) {
                subResult.putAll(this.getMessagePortTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ChannelType)) {
                subResult.putAll(this.getChannelTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.GroupType)) {
                subResult.putAll(this.getGroupTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.NodeType)) {
                subResult.putAll(this.getNodeTypeJsonAddr(selfObject));
              }
               else {
              }
              return subResult;
            },
            TypeDefinitiontoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentType)) {
                this.ComponentTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ServicePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ServicePortType)) {
                this.ServicePortTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.MessagePortTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.MessagePortType)) {
                this.MessagePortTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ChannelType)) {
                this.ChannelTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.GroupType)) {
                this.GroupTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.NodeType)) {
                this.NodeTypetoJson(selfObject, addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:TypeDefinition" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getFactoryBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getAbstract().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "abstract":');
                  ostream.print_1(selfObject.getAbstract());
                }
                if (selfObject.getDeployUnits().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getDeployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference TypeDefinition/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getSuperTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.getSuperTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference TypeDefinition/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.getDictionaryType();
                if (subdictionaryType != null) {
                  ostream.println(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                ostream.println('}');
              }
            },
            getInstanceJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionary = selfObject.getDictionary();
              if (subdictionary != null) {
                var tmp$0;
                subResult.put(subdictionary, (tmp$0 = subdictionary.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryJsonAddr(subdictionary));
              }
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentInstanceImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentInstance)) {
                subResult.putAll(this.getComponentInstanceJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ContainerNodeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ContainerNode)) {
                subResult.putAll(this.getContainerNodeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelImpl) || Kotlin.isType(selfObject, _.org.kevoree.Channel)) {
                subResult.putAll(this.getChannelJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupImpl) || Kotlin.isType(selfObject, _.org.kevoree.Group)) {
                subResult.putAll(this.getGroupJsonAddr(selfObject));
              }
               else {
              }
              return subResult;
            },
            InstancetoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentInstanceImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentInstance)) {
                this.ComponentInstancetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ContainerNodeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ContainerNode)) {
                this.ContainerNodetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelImpl) || Kotlin.isType(selfObject, _.org.kevoree.Channel)) {
                this.ChanneltoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupImpl) || Kotlin.isType(selfObject, _.org.kevoree.Group)) {
                this.GrouptoJson(selfObject, addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Instance" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getMetaData().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "metaData":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getMetaData());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getStarted().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "started":');
                  ostream.print_1(selfObject.getStarted());
                }
                var subsubtypeDefinition = selfObject.getTypeDefinition();
                if (subsubtypeDefinition != null) {
                  var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                  if (subsubsubtypeDefinition != null) {
                    ostream.println(',');
                    ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF Instance Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                  }
                }
                var subdictionary = selfObject.getDictionary();
                if (subdictionary != null) {
                  ostream.println(',');
                  ostream.print('"dictionary":');
                  this.DictionarytoJson(subdictionary, addrs, ostream);
                }
                ostream.println('}');
              }
            },
            getLifeCycleTypeDefinitionJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionaryType = selfObject.getDictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentType)) {
                subResult.putAll(this.getComponentTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ChannelType)) {
                subResult.putAll(this.getChannelTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.GroupType)) {
                subResult.putAll(this.getGroupTypeJsonAddr(selfObject));
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.NodeType)) {
                subResult.putAll(this.getNodeTypeJsonAddr(selfObject));
              }
               else {
              }
              return subResult;
            },
            LifeCycleTypeDefinitiontoJson: function (selfObject, addrs, ostream) {
              if (Kotlin.isType(selfObject, _.org.kevoree.impl.ComponentTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ComponentType)) {
                this.ComponentTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.ChannelTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.ChannelType)) {
                this.ChannelTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.GroupTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.GroupType)) {
                this.GroupTypetoJson(selfObject, addrs, ostream);
              }
               else if (Kotlin.isType(selfObject, _.org.kevoree.impl.NodeTypeImpl) || Kotlin.isType(selfObject, _.org.kevoree.NodeType)) {
                this.NodeTypetoJson(selfObject, addrs, ostream);
              }
               else {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:LifeCycleTypeDefinition" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getFactoryBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getAbstract().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "abstract":');
                  ostream.print_1(selfObject.getAbstract());
                }
                if (!Kotlin.equals(selfObject.getStartMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "startMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getStartMethod());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getStopMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "stopMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getStopMethod());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getUpdateMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "updateMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getUpdateMethod());
                  ostream.print_0('"');
                }
                if (selfObject.getDeployUnits().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getDeployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference LifeCycleTypeDefinition/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getSuperTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.getSuperTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference LifeCycleTypeDefinition/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.getDictionaryType();
                if (subdictionaryType != null) {
                  ostream.println(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                ostream.println('}');
              }
            },
            getGroupJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionary = selfObject.getDictionary();
              if (subdictionary != null) {
                var tmp$0;
                subResult.put(subdictionary, (tmp$0 = subdictionary.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryJsonAddr(subdictionary));
              }
              return subResult;
            },
            GrouptoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:Group" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getMetaData().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "metaData":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getMetaData());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getStarted().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "started":');
                  ostream.print_1(selfObject.getStarted());
                }
                var subsubtypeDefinition = selfObject.getTypeDefinition();
                if (subsubtypeDefinition != null) {
                  var subsubsubtypeDefinition = addrs.get(subsubtypeDefinition);
                  if (subsubsubtypeDefinition != null) {
                    ostream.println(',');
                    ostream.print(' "typeDefinition":"' + subsubsubtypeDefinition + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF Group Serialization error : No address found for reference typeDefinition(id:' + subsubtypeDefinition + ' container:' + subsubtypeDefinition.eContainer() + ')');
                  }
                }
                if (selfObject.getSubNodes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "subNodes": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getSubNodes().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference Group/subNodes ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionary = selfObject.getDictionary();
                if (subdictionary != null) {
                  ostream.println(',');
                  ostream.print('"dictionary":');
                  this.DictionarytoJson(subdictionary, addrs, ostream);
                }
                ostream.println('}');
              }
            },
            getGroupTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var subdictionaryType = selfObject.getDictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              return subResult;
            },
            GroupTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:GroupType" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getFactoryBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getAbstract().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "abstract":');
                  ostream.print_1(selfObject.getAbstract());
                }
                if (!Kotlin.equals(selfObject.getStartMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "startMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getStartMethod());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getStopMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "stopMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getStopMethod());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getUpdateMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "updateMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getUpdateMethod());
                  ostream.print_0('"');
                }
                if (selfObject.getDeployUnits().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getDeployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference GroupType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getSuperTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.getSuperTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference GroupType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.getDictionaryType();
                if (subdictionaryType != null) {
                  ostream.println(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                ostream.println('}');
              }
            },
            getNodeTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              var i = 0;
              var subdictionaryType = selfObject.getDictionaryType();
              if (subdictionaryType != null) {
                var tmp$0;
                subResult.put(subdictionaryType, (tmp$0 = subdictionaryType.path()) != null ? tmp$0 : Kotlin.throwNPE());
                subResult.putAll(this.getDictionaryTypeJsonAddr(subdictionaryType));
              }
              {
                var tmp$1 = selfObject.getManagedPrimitiveTypeRefs().iterator();
                while (tmp$1.hasNext()) {
                  var sub = tmp$1.next();
                  var subPath_managedPrimitiveTypeRefs = sub.path();
                  var tmp$2;
                  subResult.put(sub, (tmp$2 = sub.path()) != null ? tmp$2 : Kotlin.throwNPE());
                  subResult.putAll(this.getAdaptationPrimitiveTypeRefJsonAddr(sub));
                  i = i + 1;
                }
              }
              return subResult;
            },
            NodeTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:NodeType" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getFactoryBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "factoryBean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getFactoryBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getBean().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "bean":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getBean());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getAbstract().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "abstract":');
                  ostream.print_1(selfObject.getAbstract());
                }
                if (!Kotlin.equals(selfObject.getStartMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "startMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getStartMethod());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getStopMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "stopMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getStopMethod());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getUpdateMethod().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "updateMethod":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getUpdateMethod());
                  ostream.print_0('"');
                }
                if (selfObject.getDeployUnits().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "deployUnits": [');
                  var firstItLoop = true;
                  {
                    var tmp$0 = selfObject.getDeployUnits().iterator();
                    while (tmp$0.hasNext()) {
                      var sub = tmp$0.next();
                      if (!firstItLoop) {
                        ostream.println_0(',');
                      }
                      var subsub = addrs.get(sub);
                      if (subsub != null) {
                        ostream.print_0('"');
                        ostream.print(subsub);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference NodeType/deployUnits ');
                      }
                      firstItLoop = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getSuperTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "superTypes": [');
                  var firstItLoop_0 = true;
                  {
                    var tmp$1 = selfObject.getSuperTypes().iterator();
                    while (tmp$1.hasNext()) {
                      var sub_0 = tmp$1.next();
                      if (!firstItLoop_0) {
                        ostream.println_0(',');
                      }
                      var subsub_0 = addrs.get(sub_0);
                      if (subsub_0 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_0);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference NodeType/superTypes ');
                      }
                      firstItLoop_0 = false;
                    }
                  }
                  ostream.print(']');
                }
                if (selfObject.getManagedPrimitiveTypes().size() > 0) {
                  ostream.println(',');
                  ostream.print(' "managedPrimitiveTypes": [');
                  var firstItLoop_1 = true;
                  {
                    var tmp$2 = selfObject.getManagedPrimitiveTypes().iterator();
                    while (tmp$2.hasNext()) {
                      var sub_1 = tmp$2.next();
                      if (!firstItLoop_1) {
                        ostream.println_0(',');
                      }
                      var subsub_1 = addrs.get(sub_1);
                      if (subsub_1 != null) {
                        ostream.print_0('"');
                        ostream.print(subsub_1);
                        ostream.print_0('"');
                      }
                       else {
                        throw new Kotlin.Exception('KMF Serialization error : non contained reference NodeType/managedPrimitiveTypes ');
                      }
                      firstItLoop_1 = false;
                    }
                  }
                  ostream.print(']');
                }
                var subdictionaryType = selfObject.getDictionaryType();
                if (subdictionaryType != null) {
                  ostream.println(',');
                  ostream.print('"dictionaryType":');
                  this.DictionaryTypetoJson(subdictionaryType, addrs, ostream);
                }
                if (selfObject.getManagedPrimitiveTypeRefs().size() > 0) {
                  ostream.println(',');
                  ostream.println_0('"managedPrimitiveTypeRefs": [');
                  var iloop_first_managedPrimitiveTypeRefs = true;
                  {
                    var tmp$3 = selfObject.getManagedPrimitiveTypeRefs().iterator();
                    while (tmp$3.hasNext()) {
                      var so = tmp$3.next();
                      if (!iloop_first_managedPrimitiveTypeRefs) {
                        ostream.println(',');
                      }
                      this.AdaptationPrimitiveTypeReftoJson(so, addrs, ostream);
                      iloop_first_managedPrimitiveTypeRefs = false;
                    }
                  }
                  ostream.println(']');
                }
                ostream.println('}');
              }
            },
            getAdaptationPrimitiveTypeJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            AdaptationPrimitiveTypetoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:AdaptationPrimitiveType" ');
                if (!Kotlin.equals(selfObject.getName().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "name":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getName());
                  ostream.print_0('"');
                }
                ostream.println('}');
              }
            },
            getAdaptationPrimitiveTypeRefJsonAddr: function (selfObject) {
              var subResult = new Kotlin.ComplexHashMap(0);
              return subResult;
            },
            AdaptationPrimitiveTypeReftoJson: function (selfObject, addrs, ostream) {
              {
                ostream.print_0('{');
                ostream.print(' "eClass":"org.kevoree:AdaptationPrimitiveTypeRef" ');
                if (!Kotlin.equals(selfObject.getMaxTime().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "maxTime":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getMaxTime());
                  ostream.print_0('"');
                }
                if (!Kotlin.equals(selfObject.getGenerated_KMF_ID().toString(), '')) {
                  ostream.println(',');
                  ostream.print(' "generated_KMF_ID":');
                  ostream.print('"');
                  this.escapeJson(ostream, selfObject.getGenerated_KMF_ID());
                  ostream.print_0('"');
                }
                var subsubref = selfObject.getRef();
                if (subsubref != null) {
                  var subsubsubref = addrs.get(subsubref);
                  if (subsubsubref != null) {
                    ostream.println(',');
                    ostream.print(' "ref":"' + subsubsubref + '"');
                  }
                   else {
                    throw new Kotlin.Exception('KMF AdaptationPrimitiveTypeRef Serialization error : No address found for reference ref(id:' + subsubref + ' container:' + subsubref.eContainer() + ')');
                  }
                }
                ostream.println('}');
              }
            }
          })
        }),
        cloner: Kotlin.definePackage({
          DefaultModelCloner: Kotlin.createClass(classes.cn, {
            initialize: function () {
              this.$mainFactory = new _.org.kevoree.factory.MainFactory();
            },
            clone: function (o) {
              return this.clone_0(o, false);
            },
            clone_0: function (o, readOnly) {
              return this.clone_1(o, readOnly, false);
            },
            cloneMutableOnly: function (o, readOnly) {
              return this.clone_1(o, readOnly, true);
            },
            clone_1: function (o, readOnly, mutableOnly) {
              if (Kotlin.isType(o, _.org.kevoree.ComponentInstance) || Kotlin.isType(o, _.org.kevoree.impl.ComponentInstanceImpl)) {
                var context = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context, this.get_mainFactory(), mutableOnly);
                return o.resolve(context, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.ComponentType) || Kotlin.isType(o, _.org.kevoree.impl.ComponentTypeImpl)) {
                var context_0 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_0, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_0, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.ContainerNode) || Kotlin.isType(o, _.org.kevoree.impl.ContainerNodeImpl)) {
                var context_1 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_1, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_1, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.ContainerRoot) || Kotlin.isType(o, _.org.kevoree.impl.ContainerRootImpl)) {
                var context_2 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_2, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_2, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.PortType) || Kotlin.isType(o, _.org.kevoree.impl.PortTypeImpl)) {
                var context_3 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_3, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_3, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.Port) || Kotlin.isType(o, _.org.kevoree.impl.PortImpl)) {
                var context_4 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_4, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_4, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.Namespace) || Kotlin.isType(o, _.org.kevoree.impl.NamespaceImpl)) {
                var context_5 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_5, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_5, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.Dictionary) || Kotlin.isType(o, _.org.kevoree.impl.DictionaryImpl)) {
                var context_6 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_6, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_6, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.DictionaryType) || Kotlin.isType(o, _.org.kevoree.impl.DictionaryTypeImpl)) {
                var context_7 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_7, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_7, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.DictionaryAttribute) || Kotlin.isType(o, _.org.kevoree.impl.DictionaryAttributeImpl)) {
                var context_8 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_8, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_8, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.DictionaryValue) || Kotlin.isType(o, _.org.kevoree.impl.DictionaryValueImpl)) {
                var context_9 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_9, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_9, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.CompositeType) || Kotlin.isType(o, _.org.kevoree.impl.CompositeTypeImpl)) {
                var context_10 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_10, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_10, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.PortTypeRef) || Kotlin.isType(o, _.org.kevoree.impl.PortTypeRefImpl)) {
                var context_11 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_11, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_11, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.Wire) || Kotlin.isType(o, _.org.kevoree.impl.WireImpl)) {
                var context_12 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_12, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_12, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.ServicePortType) || Kotlin.isType(o, _.org.kevoree.impl.ServicePortTypeImpl)) {
                var context_13 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_13, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_13, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.Operation) || Kotlin.isType(o, _.org.kevoree.impl.OperationImpl)) {
                var context_14 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_14, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_14, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.Parameter) || Kotlin.isType(o, _.org.kevoree.impl.ParameterImpl)) {
                var context_15 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_15, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_15, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.TypedElement) || Kotlin.isType(o, _.org.kevoree.impl.TypedElementImpl)) {
                var context_16 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_16, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_16, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.MessagePortType) || Kotlin.isType(o, _.org.kevoree.impl.MessagePortTypeImpl)) {
                var context_17 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_17, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_17, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.Repository) || Kotlin.isType(o, _.org.kevoree.impl.RepositoryImpl)) {
                var context_18 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_18, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_18, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.DeployUnit) || Kotlin.isType(o, _.org.kevoree.impl.DeployUnitImpl)) {
                var context_19 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_19, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_19, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.TypeLibrary) || Kotlin.isType(o, _.org.kevoree.impl.TypeLibraryImpl)) {
                var context_20 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_20, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_20, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.NamedElement) || Kotlin.isType(o, _.org.kevoree.impl.NamedElementImpl)) {
                var context_21 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_21, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_21, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.IntegrationPattern) || Kotlin.isType(o, _.org.kevoree.impl.IntegrationPatternImpl)) {
                var context_22 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_22, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_22, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.ExtraFonctionalProperty) || Kotlin.isType(o, _.org.kevoree.impl.ExtraFonctionalPropertyImpl)) {
                var context_23 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_23, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_23, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.PortTypeMapping) || Kotlin.isType(o, _.org.kevoree.impl.PortTypeMappingImpl)) {
                var context_24 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_24, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_24, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.Channel) || Kotlin.isType(o, _.org.kevoree.impl.ChannelImpl)) {
                var context_25 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_25, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_25, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.MBinding) || Kotlin.isType(o, _.org.kevoree.impl.MBindingImpl)) {
                var context_26 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_26, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_26, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.NodeNetwork) || Kotlin.isType(o, _.org.kevoree.impl.NodeNetworkImpl)) {
                var context_27 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_27, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_27, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.NodeLink) || Kotlin.isType(o, _.org.kevoree.impl.NodeLinkImpl)) {
                var context_28 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_28, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_28, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.NetworkProperty) || Kotlin.isType(o, _.org.kevoree.impl.NetworkPropertyImpl)) {
                var context_29 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_29, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_29, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.ChannelType) || Kotlin.isType(o, _.org.kevoree.impl.ChannelTypeImpl)) {
                var context_30 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_30, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_30, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.TypeDefinition) || Kotlin.isType(o, _.org.kevoree.impl.TypeDefinitionImpl)) {
                var context_31 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_31, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_31, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.Instance) || Kotlin.isType(o, _.org.kevoree.impl.InstanceImpl)) {
                var context_32 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_32, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_32, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.LifeCycleTypeDefinition) || Kotlin.isType(o, _.org.kevoree.impl.LifeCycleTypeDefinitionImpl)) {
                var context_33 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_33, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_33, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.Group) || Kotlin.isType(o, _.org.kevoree.impl.GroupImpl)) {
                var context_34 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_34, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_34, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.GroupType) || Kotlin.isType(o, _.org.kevoree.impl.GroupTypeImpl)) {
                var context_35 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_35, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_35, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.NodeType) || Kotlin.isType(o, _.org.kevoree.impl.NodeTypeImpl)) {
                var context_36 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_36, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_36, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.AdaptationPrimitiveType) || Kotlin.isType(o, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl)) {
                var context_37 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_37, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_37, readOnly, mutableOnly);
              }
              if (Kotlin.isType(o, _.org.kevoree.AdaptationPrimitiveTypeRef) || Kotlin.isType(o, _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl)) {
                var context_38 = new Kotlin.ComplexHashMap(0);
                o.getClonelazy(context_38, this.get_mainFactory(), mutableOnly);
                return o.resolve(context_38, readOnly, mutableOnly);
              }
              return null;
            },
            get_mainFactory: function () {
              return this.$mainFactory;
            },
            set_mainFactory: function (tmp$0) {
              this.$mainFactory = tmp$0;
            },
            setKevoreeFactory: function (fct) {
              this.get_mainFactory().setKevoreeFactory(fct);
            }
          })
        }),
        modeling: Kotlin.definePackage({
          api: Kotlin.definePackage({
            compare: Kotlin.definePackage({
              ModelCompare: classes.cg
            }),
            ModelLoader: classes.ch,
            KMFFactory: classes.ci,
            ModelSerializer: classes.cj,
            KMFContainer: classes.ck,
            ModelCloner: classes.cn,
            util: Kotlin.definePackage({
            }),
            events: Kotlin.definePackage({
              ModelTreeListener: classes.cl,
              ModelElementListener: classes.cm,
              ModelEvent: Kotlin.createClass({
                initialize: function (internal_sourcePath, internal_etype, internal_elementAttributeType, internal_elementAttributeName, internal_value) {
                  this.$internal_sourcePath = internal_sourcePath;
                  this.$internal_etype = internal_etype;
                  this.$internal_elementAttributeType = internal_elementAttributeType;
                  this.$internal_elementAttributeName = internal_elementAttributeName;
                  this.$internal_value = internal_value;
                },
                get_internal_sourcePath: function () {
                  return this.$internal_sourcePath;
                },
                get_internal_etype: function () {
                  return this.$internal_etype;
                },
                get_internal_elementAttributeType: function () {
                  return this.$internal_elementAttributeType;
                },
                get_internal_elementAttributeName: function () {
                  return this.$internal_elementAttributeName;
                },
                get_internal_value: function () {
                  return this.$internal_value;
                },
                getSourcePath: function () {
                  return this.get_internal_sourcePath();
                },
                getType: function () {
                  return this.get_internal_etype();
                },
                getElementAttributeType: function () {
                  return this.get_internal_elementAttributeType();
                },
                getElementAttributeName: function () {
                  return this.get_internal_elementAttributeName();
                },
                getValue: function () {
                  return this.get_internal_value();
                },
                toString: function () {
                  return 'ModelEvent[src:' + this.getSourcePath() + ', type:' + this.getType() + ', elementAttributeType:' + this.getElementAttributeType() + ', elementAttributeName:' + this.getElementAttributeName() + ', value:' + this.getValue() + ']';
                }
              })
            }),
            trace: Kotlin.definePackage({
              TraceSequence: classes.co,
              ModelTrace: classes.cp,
              ModelAddTrace: Kotlin.createClass(classes.cp, {
                initialize: function (srcPath, refName, previousPath, typeName) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                  this.$previousPath = previousPath;
                  this.$typeName = typeName;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                get_previousPath: function () {
                  return this.$previousPath;
                },
                get_typeName: function () {
                  return this.$typeName;
                },
                toString: function () {
                  var buffer = new _.java.lang.StringBuilder();
                  buffer.append('{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_ADD() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '"');
                  if (this.get_previousPath() != null) {
                    buffer.append(', "previouspath" : "' + this.get_previousPath() + '"');
                  }
                  if (this.get_typeName() != null) {
                    buffer.append(', "typename" : "' + this.get_typeName() + '"');
                  }
                  buffer.append('}');
                  return buffer.toString();
                }
              }),
              ModelAddAllTrace: Kotlin.createClass(classes.cp, {
                initialize: function (srcPath, refName, previousPath, typeName) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                  this.$previousPath = previousPath;
                  this.$typeName = typeName;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                get_previousPath: function () {
                  return this.$previousPath;
                },
                get_typeName: function () {
                  return this.$typeName;
                },
                mkString: function (ss) {
                  if (ss == null) {
                    return null;
                  }
                  var buffer = new _.java.lang.StringBuilder();
                  var isFirst = true;
                  {
                    var tmp$0 = ss.iterator();
                    while (tmp$0.hasNext()) {
                      var s = tmp$0.next();
                      if (!isFirst) {
                        buffer.append(',');
                      }
                      buffer.append(s);
                      isFirst = false;
                    }
                  }
                  return buffer.toString();
                },
                toString: function () {
                  var buffer = new _.java.lang.StringBuilder();
                  buffer.append('{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '"');
                  if (this.get_previousPath() != null) {
                    buffer.append(', "previouspath" : "' + this.mkString(this.get_previousPath()) + '"');
                  }
                  if (this.get_typeName() != null) {
                    buffer.append(', "typename" : "' + this.mkString(this.get_typeName()) + '"');
                  }
                  buffer.append('}');
                  return buffer.toString();
                }
              }),
              ModelRemoveTrace: Kotlin.createClass(classes.cp, {
                initialize: function (srcPath, refName, objPath) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                  this.$objPath = objPath;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                get_objPath: function () {
                  return this.$objPath;
                },
                toString: function () {
                  return '{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_REMOVE() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '", "objpath" : "' + this.get_objPath() + '" }';
                }
              }),
              ModelRemoveAllTrace: Kotlin.createClass(classes.cp, {
                initialize: function (srcPath, refName) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                toString: function () {
                  return '{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '" }';
                }
              }),
              ModelSetTrace: Kotlin.createClass(classes.cp, {
                initialize: function (srcPath, refName, objPath, content, typeName) {
                  this.$srcPath = srcPath;
                  this.$refName = refName;
                  this.$objPath = objPath;
                  this.$content = content;
                  this.$typeName = typeName;
                },
                get_srcPath: function () {
                  return this.$srcPath;
                },
                get_refName: function () {
                  return this.$refName;
                },
                get_objPath: function () {
                  return this.$objPath;
                },
                get_content: function () {
                  return this.$content;
                },
                get_typeName: function () {
                  return this.$typeName;
                },
                toString: function () {
                  var buffer = new _.java.lang.StringBuilder();
                  buffer.append('{ "traceType" : ' + _.org.kevoree.modeling.api.util.ActionType.get_SET() + ' , "src" : "' + this.get_srcPath() + '", "refname" : "' + this.get_refName() + '"');
                  if (this.get_objPath() != null) {
                    buffer.append(', "objpath" : "' + this.get_objPath() + '"');
                  }
                  if (this.get_content() != null) {
                    buffer.append(', "content" : "' + this.get_content() + '"');
                  }
                  if (this.get_typeName() != null) {
                    buffer.append(', "typename" : "' + this.get_typeName() + '"');
                  }
                  buffer.append('}');
                  return buffer.toString();
                }
              }),
              ModelTraceApplicator: Kotlin.createClass({
                initialize: function (targetModel, factory) {
                  this.$targetModel = targetModel;
                  this.$factory = factory;
                  this.$pendingObj = null;
                  this.$pendingParent = null;
                  this.$pendingParentRefName = null;
                  this.$pendingObjPath = null;
                },
                get_targetModel: function () {
                  return this.$targetModel;
                },
                get_factory: function () {
                  return this.$factory;
                },
                get_pendingObj: function () {
                  return this.$pendingObj;
                },
                set_pendingObj: function (tmp$0) {
                  this.$pendingObj = tmp$0;
                },
                get_pendingParent: function () {
                  return this.$pendingParent;
                },
                set_pendingParent: function (tmp$0) {
                  this.$pendingParent = tmp$0;
                },
                get_pendingParentRefName: function () {
                  return this.$pendingParentRefName;
                },
                set_pendingParentRefName: function (tmp$0) {
                  this.$pendingParentRefName = tmp$0;
                },
                get_pendingObjPath: function () {
                  return this.$pendingObjPath;
                },
                set_pendingObjPath: function (tmp$0) {
                  this.$pendingObjPath = tmp$0;
                },
                tryClosePending: function (srcPath) {
                  if (this.get_pendingObj() != null && !Kotlin.equals(this.get_pendingObjPath(), srcPath)) {
                    var tmp$0, tmp$1;
                    ((tmp$0 = this.get_pendingParent()) != null ? tmp$0 : Kotlin.throwNPE()).reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), (tmp$1 = this.get_pendingParentRefName()) != null ? tmp$1 : Kotlin.throwNPE(), this.get_pendingObj());
                    this.set_pendingObj(null);
                    this.set_pendingObjPath(null);
                    this.set_pendingParentRefName(null);
                    this.set_pendingParent(null);
                  }
                },
                createOrAdd: function (previousPath, target, refName, potentialTypeName) {
                  var tmp$0;
                  if (previousPath != null) {
                    tmp$0 = this.get_targetModel().findByPath(previousPath);
                  }
                   else {
                    tmp$0 = null;
                  }
                  var targetElem = tmp$0;
                  if (targetElem != null) {
                    target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_ADD(), refName, targetElem);
                  }
                   else {
                    var tmp$1;
                    this.set_pendingObj(this.get_factory().create((tmp$1 = potentialTypeName) != null ? tmp$1 : Kotlin.throwNPE()));
                    this.set_pendingObjPath(previousPath);
                    this.set_pendingParentRefName(refName);
                    this.set_pendingParent(target);
                  }
                },
                applyTraceOnModel: function (traceSeq) {
                  {
                    var tmp$0 = traceSeq.getTraces().iterator();
                    while (tmp$0.hasNext()) {
                      var trace = tmp$0.next();
                      var target = this.get_targetModel();
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelAddTrace)) {
                        var castedTrace = trace;
                        this.tryClosePending('#Fake#Path');
                        if (!Kotlin.equals(trace.get_srcPath(), '')) {
                          target = this.get_targetModel().findByPath(castedTrace.get_srcPath());
                        }
                        this.createOrAdd(castedTrace.get_previousPath(), target, castedTrace.get_refName(), castedTrace.get_typeName());
                      }
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelAddAllTrace)) {
                        var castedTrace_0 = trace;
                        this.tryClosePending('#Fake#Path');
                        var i = 0;
                        var tmp$1;
                        {
                          var tmp$2 = ((tmp$1 = castedTrace_0.get_previousPath()) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                          while (tmp$2.hasNext()) {
                            var path = tmp$2.next();
                            var tmp$3;
                            this.createOrAdd(path, target, castedTrace_0.get_refName(), ((tmp$3 = castedTrace_0.get_typeName()) != null ? tmp$3 : Kotlin.throwNPE()).get(i));
                            i++;
                          }
                        }
                      }
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelRemoveTrace)) {
                        var castedTrace_1 = trace;
                        this.tryClosePending(trace.get_srcPath());
                        if (!Kotlin.equals(trace.get_srcPath(), '')) {
                          target = this.get_targetModel().findByPath(castedTrace_1.get_srcPath());
                        }
                        target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), castedTrace_1.get_refName(), this.get_targetModel().findByPath(castedTrace_1.get_objPath()));
                      }
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace)) {
                        var castedTrace_2 = trace;
                        this.tryClosePending(trace.get_srcPath());
                        if (!Kotlin.equals(trace.get_srcPath(), '')) {
                          target = this.get_targetModel().findByPath(castedTrace_2.get_srcPath());
                        }
                        target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL(), castedTrace_2.get_refName(), null);
                      }
                      if (Kotlin.isType(trace, _.org.kevoree.modeling.api.trace.ModelSetTrace)) {
                        var castedTrace_3 = trace;
                        this.tryClosePending(trace.get_srcPath());
                        if (!Kotlin.equals(trace.get_srcPath(), '') && !Kotlin.equals(castedTrace_3.get_srcPath(), this.get_pendingObjPath())) {
                          target = this.get_targetModel().findByPath(castedTrace_3.get_srcPath());
                        }
                         else {
                          if (Kotlin.equals(castedTrace_3.get_srcPath(), this.get_pendingObjPath()) && this.get_pendingObj() != null) {
                            var tmp$4;
                            target = (tmp$4 = this.get_pendingObj()) != null ? tmp$4 : Kotlin.throwNPE();
                          }
                        }
                        if (castedTrace_3.get_content() != null) {
                          target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), castedTrace_3.get_refName(), castedTrace_3.get_content());
                        }
                         else {
                          var tmp$6;
                          if (castedTrace_3.get_objPath() != null) {
                            var tmp$5;
                            tmp$6 = this.get_targetModel().findByPath((tmp$5 = castedTrace_3.get_objPath()) != null ? tmp$5 : Kotlin.throwNPE());
                          }
                           else {
                            tmp$6 = null;
                          }
                          var targetContentPath = tmp$6;
                          if (targetContentPath != null) {
                            target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), castedTrace_3.get_refName(), targetContentPath);
                          }
                           else {
                            if (castedTrace_3.get_typeName() != null && !Kotlin.equals(castedTrace_3.get_typeName(), '')) {
                              this.createOrAdd(castedTrace_3.get_objPath(), target, castedTrace_3.get_refName(), castedTrace_3.get_typeName());
                            }
                             else {
                              target.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_SET(), castedTrace_3.get_refName(), targetContentPath);
                            }
                          }
                        }
                      }
                    }
                  }
                  this.tryClosePending('#Fake#Path');
                }
              }),
              Event2Trace: Kotlin.createClass({
                initialize: function (compare) {
                  this.$compare = compare;
                },
                get_compare: function () {
                  return this.$compare;
                },
                convert: function (event) {
                  var result = new Kotlin.ArrayList(0);
                  var tmp$0 = event.getType();
                  if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                    var tmp$1, tmp$2, tmp$3;
                    result.add(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace((tmp$1 = event.getSourcePath()) != null ? tmp$1 : Kotlin.throwNPE(), (tmp$2 = event.getElementAttributeName()) != null ? tmp$2 : Kotlin.throwNPE(), (tmp$3 = event.getValue().path()) != null ? tmp$3 : Kotlin.throwNPE()));
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                    var tmp$4, tmp$5;
                    result.add(new _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace((tmp$4 = event.getSourcePath()) != null ? tmp$4 : Kotlin.throwNPE(), (tmp$5 = event.getElementAttributeName()) != null ? tmp$5 : Kotlin.throwNPE()));
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                    var casted = event.getValue();
                    var traces = this.get_compare().inter(casted, casted);
                    var tmp$6, tmp$7;
                    result.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$6 = event.getSourcePath()) != null ? tmp$6 : Kotlin.throwNPE(), (tmp$7 = event.getElementAttributeName()) != null ? tmp$7 : Kotlin.throwNPE(), casted.path(), casted.metaClassName()));
                    result.addAll(traces.getTraces());
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                    var casted_0 = event.getValue();
                    {
                      var tmp$8 = casted_0.iterator();
                      while (tmp$8.hasNext()) {
                        var elem = tmp$8.next();
                        var elemCasted = elem;
                        var traces_0 = this.get_compare().inter(elemCasted, elemCasted);
                        var tmp$9, tmp$10;
                        result.add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$9 = event.getSourcePath()) != null ? tmp$9 : Kotlin.throwNPE(), (tmp$10 = event.getElementAttributeName()) != null ? tmp$10 : Kotlin.throwNPE(), elemCasted.path(), elemCasted.metaClassName()));
                        result.addAll(traces_0.getTraces());
                      }
                    }
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                    if (event.getElementAttributeType() === _.org.kevoree.modeling.api.util.ElementAttributeType.get_ATTRIBUTE()) {
                      var tmp$11, tmp$12;
                      result.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = event.getSourcePath()) != null ? tmp$11 : Kotlin.throwNPE(), (tmp$12 = event.getElementAttributeName()) != null ? tmp$12 : Kotlin.throwNPE(), null, event.getValue().toString(), null));
                    }
                     else {
                      var tmp$13, tmp$14;
                      result.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = event.getSourcePath()) != null ? tmp$13 : Kotlin.throwNPE(), (tmp$14 = event.getElementAttributeName()) != null ? tmp$14 : Kotlin.throwNPE(), event.getValue().path(), null, null));
                    }
                  }
                   else if (tmp$0 === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  }
                   else {
                    throw new Kotlin.Exception("Can't convert event : " + event);
                  }
                  return this.get_compare().createSequence().populate(result);
                }
              })
            })
          })
        }),
        util: Kotlin.definePackage({
        }),
        factory: Kotlin.definePackage({
          MainFactory: Kotlin.createClass(classes.ci, {
            initialize: function () {
              this.$factories = Kotlin.arrayFromFun(1, function (i) {
                return null;
              });
              {
                this.get_factories()[_.org.kevoree.factory.Package.get_ORG_KEVOREE()] = new _.org.kevoree.impl.DefaultKevoreeFactory();
              }
            },
            get_factories: function () {
              return this.$factories;
            },
            set_factories: function (tmp$0) {
              this.$factories = tmp$0;
            },
            getFactoryForPackage: function (pack) {
              return this.get_factories()[pack];
            },
            getKevoreeFactory: function () {
              return this.get_factories()[_.org.kevoree.factory.Package.get_ORG_KEVOREE()];
            },
            setKevoreeFactory: function (fct) {
              this.get_factories()[_.org.kevoree.factory.Package.get_ORG_KEVOREE()] = fct;
            },
            create: function (metaClassName) {
              var tmp$0;
              return (tmp$0 = this.getFactoryForPackage(_.org.kevoree.factory.Package.getPackageForName(metaClassName))) != null ? tmp$0.create(metaClassName) : null;
            }
          })
        }),
        loader: Kotlin.definePackage({
          JSONModelLoader: Kotlin.createClass(classes.ch, {
            initialize: function () {
              this.$mainFactory = new _.org.kevoree.factory.MainFactory();
            },
            get_mainFactory: function () {
              return this.$mainFactory;
            },
            loadModelFromString: function (str) {
              var bytes = Kotlin.numberArrayOfSize(str.length);
              var i = 0;
              while (i < str.length) {
                bytes[i] = str.charAt(i);
                i = i + 1;
              }
              return this.deserialize(new _.java.io.ByteArrayInputStream(bytes));
            },
            loadModelFromStream: function (inputStream) {
              return this.deserialize(inputStream);
            },
            deserialize: function (instream) {
              var reader = new _.org.kevoree.loader.JsonReader(instream);
              var context = new _.org.kevoree.loader.LoadingContext();
              while (reader.hasNext() && reader.peek() !== _.org.kevoree.loader.JsonToken.get_END_DOCUMENT()) {
                reader.beginObject();
                var nextKey = reader.nextName();
                if (Kotlin.equals(nextKey, 'eClass')) {
                  var eclassValue = reader.nextString();
                  if (Kotlin.equals(eclassValue, 'org.kevoree:ComponentInstance')) {
                    context.get_loadedRoots().add(this.loadComponentInstance(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ComponentType')) {
                    context.get_loadedRoots().add(this.loadComponentType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ContainerNode')) {
                    context.get_loadedRoots().add(this.loadContainerNode(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ContainerRoot')) {
                    context.get_loadedRoots().add(this.loadContainerRoot(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:PortType')) {
                    context.get_loadedRoots().add(this.loadPortType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Port')) {
                    context.get_loadedRoots().add(this.loadPort(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Namespace')) {
                    context.get_loadedRoots().add(this.loadNamespace(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Dictionary')) {
                    context.get_loadedRoots().add(this.loadDictionary(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:DictionaryType')) {
                    context.get_loadedRoots().add(this.loadDictionaryType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:DictionaryAttribute')) {
                    context.get_loadedRoots().add(this.loadDictionaryAttribute(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:DictionaryValue')) {
                    context.get_loadedRoots().add(this.loadDictionaryValue(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:CompositeType')) {
                    context.get_loadedRoots().add(this.loadCompositeType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:PortTypeRef')) {
                    context.get_loadedRoots().add(this.loadPortTypeRef(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Wire')) {
                    context.get_loadedRoots().add(this.loadWire(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ServicePortType')) {
                    context.get_loadedRoots().add(this.loadServicePortType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Operation')) {
                    context.get_loadedRoots().add(this.loadOperation(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Parameter')) {
                    context.get_loadedRoots().add(this.loadParameter(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:TypedElement')) {
                    context.get_loadedRoots().add(this.loadTypedElement(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:MessagePortType')) {
                    context.get_loadedRoots().add(this.loadMessagePortType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Repository')) {
                    context.get_loadedRoots().add(this.loadRepository(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:DeployUnit')) {
                    context.get_loadedRoots().add(this.loadDeployUnit(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:TypeLibrary')) {
                    context.get_loadedRoots().add(this.loadTypeLibrary(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NamedElement')) {
                    context.get_loadedRoots().add(this.loadNamedElement(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:IntegrationPattern')) {
                    context.get_loadedRoots().add(this.loadIntegrationPattern(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ExtraFonctionalProperty')) {
                    context.get_loadedRoots().add(this.loadExtraFonctionalProperty(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:PortTypeMapping')) {
                    context.get_loadedRoots().add(this.loadPortTypeMapping(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Channel')) {
                    context.get_loadedRoots().add(this.loadChannel(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:MBinding')) {
                    context.get_loadedRoots().add(this.loadMBinding(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NodeNetwork')) {
                    context.get_loadedRoots().add(this.loadNodeNetwork(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NodeLink')) {
                    context.get_loadedRoots().add(this.loadNodeLink(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NetworkProperty')) {
                    context.get_loadedRoots().add(this.loadNetworkProperty(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:ChannelType')) {
                    context.get_loadedRoots().add(this.loadChannelType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:TypeDefinition')) {
                    context.get_loadedRoots().add(this.loadTypeDefinition(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Instance')) {
                    context.get_loadedRoots().add(this.loadInstance(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:LifeCycleTypeDefinition')) {
                    context.get_loadedRoots().add(this.loadLifeCycleTypeDefinition(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:Group')) {
                    context.get_loadedRoots().add(this.loadGroup(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:GroupType')) {
                    context.get_loadedRoots().add(this.loadGroupType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:NodeType')) {
                    context.get_loadedRoots().add(this.loadNodeType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:AdaptationPrimitiveType')) {
                    context.get_loadedRoots().add(this.loadAdaptationPrimitiveType(reader, context));
                  }
                   else if (Kotlin.equals(eclassValue, 'org.kevoree:AdaptationPrimitiveTypeRef')) {
                    context.get_loadedRoots().add(this.loadAdaptationPrimitiveTypeRef(reader, context));
                  }
                   else {
                    Kotlin.println("Unknown root type '" + eclassValue + "'. Loading of this element aborted.");
                  }
                }
                 else {
                  Kotlin.println("Ignored key '" + nextKey + "' while looking for the root element 'eClass'");
                }
                reader.endObject();
              }
              {
                var tmp$0 = context.get_resolvers().iterator();
                while (tmp$0.hasNext()) {
                  var res = tmp$0.next();
                  res.run();
                }
              }
              return context.get_loadedRoots();
            },
            unescapeJSON: function (src) {
              var builder = null;
              var i = 0;
              while (i < src.length) {
                var c = src.charAt(i);
                if (c === '&') {
                  if (builder == null) {
                    builder = src.substring(0, i);
                  }
                  if (src.charAt(i + 1) === 'a') {
                    var tmp$0;
                    builder = ((tmp$0 = builder) != null ? tmp$0 : Kotlin.throwNPE()) + "'";
                    i = i + 6;
                  }
                   else if (src.charAt(i + 1) === 'q') {
                    var tmp$1;
                    builder = ((tmp$1 = builder) != null ? tmp$1 : Kotlin.throwNPE()) + '"';
                    i = i + 6;
                  }
                   else {
                    Kotlin.println('Could not unescaped chain:' + src.charAt(i) + src.charAt(i + 1));
                  }
                }
                 else {
                  if (builder != null) {
                    var tmp$2;
                    builder = ((tmp$2 = builder) != null ? tmp$2 : Kotlin.throwNPE()) + c;
                  }
                  i++;
                }
              }
              if (builder != null) {
                var tmp$3;
                return (tmp$3 = builder) != null ? tmp$3 : Kotlin.throwNPE();
              }
               else {
                return src;
              }
            },
            loadComponentInstance: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createComponentInstance();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'metaData') {
                  var tmp$1;
                  modelElem.setMetaData(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'started') {
                  modelElem.setStarted(reader.nextBoolean());
                }
                 else if (nextName === 'typeDefinition') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'typeDefinition', xmiRef));
                }
                 else if (nextName === 'dictionary') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionary(reader, context);
                  modelElem.setDictionary(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'provided') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadPort(reader, context);
                    modelElem.addProvided(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'required') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_1 = this.loadPort(reader, context);
                    modelElem.addRequired(loadedElem_1);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'namespace') {
                  var tmp$3;
                  var xmiRef_0 = (tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'namespace', xmiRef_0));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ComponentInstance');
                }
              }
              return modelElem;
            },
            loadComponentType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createComponentType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.setFactoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.setBean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'abstract') {
                  modelElem.setAbstract(reader.nextBoolean());
                }
                 else if (nextName === 'startMethod') {
                  var tmp$3;
                  modelElem.setStartMethod(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'stopMethod') {
                  var tmp$4;
                  modelElem.setStopMethod(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'updateMethod') {
                  var tmp$5;
                  modelElem.setUpdateMethod(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$6;
                    var xmiRef = (tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.setDictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$7;
                    var xmiRef_0 = (tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'required') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadPortTypeRef(reader, context);
                    modelElem.addRequired(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'integrationPatterns') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_1 = this.loadIntegrationPattern(reader, context);
                    modelElem.addIntegrationPatterns(loadedElem_1);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'extraFonctionalProperties') {
                  reader.beginObject();
                  var loadedElem_2 = this.loadExtraFonctionalProperty(reader, context);
                  modelElem.setExtraFonctionalProperties(loadedElem_2);
                  reader.endObject();
                }
                 else if (nextName === 'provided') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_3 = this.loadPortTypeRef(reader, context);
                    modelElem.addProvided(loadedElem_3);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ComponentType');
                }
              }
              return modelElem;
            },
            loadContainerNode: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createContainerNode();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'metaData') {
                  var tmp$1;
                  modelElem.setMetaData(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'started') {
                  modelElem.setStarted(reader.nextBoolean());
                }
                 else if (nextName === 'typeDefinition') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'typeDefinition', xmiRef));
                }
                 else if (nextName === 'dictionary') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionary(reader, context);
                  modelElem.setDictionary(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'components') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadComponentInstance(reader, context);
                    modelElem.addComponents(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'hosts') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$3;
                    var xmiRef_0 = (tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'hosts', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'host') {
                  var tmp$4;
                  var xmiRef_1 = (tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'host', xmiRef_1));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ContainerNode');
                }
              }
              return modelElem;
            },
            loadContainerRoot: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createContainerRoot();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.setGenerated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'nodes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadContainerNode(reader, context);
                    modelElem.addNodes(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'typeDefinitions') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var nextKey = reader.nextName();
                    if (Kotlin.equals(nextKey, 'eClass')) {
                      var eclassValue = reader.nextString();
                      if (eclassValue === 'org.kevoree:NodeType') {
                        var loadedElem_0 = this.loadNodeType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_0);
                      }
                       else if (eclassValue === 'org.kevoree:GroupType') {
                        var loadedElem_1 = this.loadGroupType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_1);
                      }
                       else if (eclassValue === 'org.kevoree:ChannelType') {
                        var loadedElem_2 = this.loadChannelType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_2);
                      }
                       else if (eclassValue === 'org.kevoree:MessagePortType') {
                        var loadedElem_3 = this.loadMessagePortType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_3);
                      }
                       else if (eclassValue === 'org.kevoree:ServicePortType') {
                        var loadedElem_4 = this.loadServicePortType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_4);
                      }
                       else if (eclassValue === 'org.kevoree:ComponentType') {
                        var loadedElem_5 = this.loadComponentType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_5);
                      }
                       else if (eclassValue === 'org.kevoree:CompositeType') {
                        var loadedElem_6 = this.loadCompositeType(reader, context);
                        modelElem.addTypeDefinitions(loadedElem_6);
                      }
                       else {
                        Kotlin.println("Unknown root type '" + eclassValue + "'. Loading aborted.");
                      }
                    }
                     else {
                      Kotlin.println("Ignored key '" + nextKey + "' while looking for the root element 'eClass'");
                    }
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'repositories') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_7 = this.loadRepository(reader, context);
                    modelElem.addRepositories(loadedElem_7);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dataTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var nextKey_0 = reader.nextName();
                    if (Kotlin.equals(nextKey_0, 'eClass')) {
                      var eclassValue_0 = reader.nextString();
                      if (eclassValue_0 === 'org.kevoree:TypedElement') {
                        var loadedElem_8 = this.loadTypedElement(reader, context);
                        modelElem.addDataTypes(loadedElem_8);
                      }
                       else if (eclassValue_0 === 'org.kevoree:DictionaryAttribute') {
                        var loadedElem_9 = this.loadDictionaryAttribute(reader, context);
                        modelElem.addDataTypes(loadedElem_9);
                      }
                       else {
                        Kotlin.println("Unknown root type '" + eclassValue_0 + "'. Loading aborted.");
                      }
                    }
                     else {
                      Kotlin.println("Ignored key '" + nextKey_0 + "' while looking for the root element 'eClass'");
                    }
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'libraries') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_10 = this.loadTypeLibrary(reader, context);
                    modelElem.addLibraries(loadedElem_10);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'hubs') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_11 = this.loadChannel(reader, context);
                    modelElem.addHubs(loadedElem_11);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'mBindings') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_12 = this.loadMBinding(reader, context);
                    modelElem.addMBindings(loadedElem_12);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_13 = this.loadDeployUnit(reader, context);
                    modelElem.addDeployUnits(loadedElem_13);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'nodeNetworks') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_14 = this.loadNodeNetwork(reader, context);
                    modelElem.addNodeNetworks(loadedElem_14);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'groups') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_15 = this.loadGroup(reader, context);
                    modelElem.addGroups(loadedElem_15);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'adaptationPrimitiveTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_16 = this.loadAdaptationPrimitiveType(reader, context);
                    modelElem.addAdaptationPrimitiveTypes(loadedElem_16);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ContainerRoot');
                }
              }
              return modelElem;
            },
            loadPortType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createPortType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.setFactoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.setBean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'abstract') {
                  modelElem.setAbstract(reader.nextBoolean());
                }
                 else if (nextName === 'synchrone') {
                  modelElem.setSynchrone(reader.nextBoolean());
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$3;
                    var xmiRef = (tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.setDictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$4;
                    var xmiRef_0 = (tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in PortType');
                }
              }
              return modelElem;
            },
            loadPort: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createPort();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.setGenerated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bindings') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'bindings', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'portTypeRef') {
                  var tmp$2;
                  var xmiRef_0 = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'portTypeRef', xmiRef_0));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Port');
                }
              }
              return modelElem;
            },
            loadNamespace: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createNamespace();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'childs') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadNamespace(reader, context);
                    modelElem.addChilds(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'parent') {
                  var tmp$1;
                  var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'parent', xmiRef));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Namespace');
                }
              }
              return modelElem;
            },
            loadDictionary: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createDictionary();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.setGenerated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'values') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadDictionaryValue(reader, context);
                    modelElem.addValues(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Dictionary');
                }
              }
              return modelElem;
            },
            loadDictionaryType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createDictionaryType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.setGenerated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'attributes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadDictionaryAttribute(reader, context);
                    modelElem.addAttributes(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'defaultValues') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadDictionaryValue(reader, context);
                    modelElem.addDefaultValues(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in DictionaryType');
                }
              }
              return modelElem;
            },
            loadDictionaryAttribute: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createDictionaryAttribute();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'optional') {
                  modelElem.setOptional(reader.nextBoolean());
                }
                 else if (nextName === 'state') {
                  modelElem.setState(reader.nextBoolean());
                }
                 else if (nextName === 'datatype') {
                  var tmp$1;
                  modelElem.setDatatype(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'fragmentDependant') {
                  modelElem.setFragmentDependant(reader.nextBoolean());
                }
                 else if (nextName === 'genericTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$2;
                    var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'genericTypes', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in DictionaryAttribute');
                }
              }
              return modelElem;
            },
            loadDictionaryValue: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createDictionaryValue();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'value') {
                  var tmp$0;
                  modelElem.setValue(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'generated_KMF_ID') {
                  var tmp$1;
                  modelElem.setGenerated_KMF_ID(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'attribute') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'attribute', xmiRef));
                }
                 else if (nextName === 'targetNode') {
                  var tmp$3;
                  var xmiRef_0 = (tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'targetNode', xmiRef_0));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in DictionaryValue');
                }
              }
              return modelElem;
            },
            loadCompositeType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createCompositeType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.setFactoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.setBean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'abstract') {
                  modelElem.setAbstract(reader.nextBoolean());
                }
                 else if (nextName === 'startMethod') {
                  var tmp$3;
                  modelElem.setStartMethod(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'stopMethod') {
                  var tmp$4;
                  modelElem.setStopMethod(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'updateMethod') {
                  var tmp$5;
                  modelElem.setUpdateMethod(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$6;
                    var xmiRef = (tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.setDictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$7;
                    var xmiRef_0 = (tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'required') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadPortTypeRef(reader, context);
                    modelElem.addRequired(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'integrationPatterns') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_1 = this.loadIntegrationPattern(reader, context);
                    modelElem.addIntegrationPatterns(loadedElem_1);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'extraFonctionalProperties') {
                  reader.beginObject();
                  var loadedElem_2 = this.loadExtraFonctionalProperty(reader, context);
                  modelElem.setExtraFonctionalProperties(loadedElem_2);
                  reader.endObject();
                }
                 else if (nextName === 'provided') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_3 = this.loadPortTypeRef(reader, context);
                    modelElem.addProvided(loadedElem_3);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'childs') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$8;
                    var xmiRef_1 = (tmp$8 = reader.nextString()) != null ? tmp$8 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'childs', xmiRef_1));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'wires') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_4 = this.loadWire(reader, context);
                    modelElem.addWires(loadedElem_4);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in CompositeType');
                }
              }
              return modelElem;
            },
            loadPortTypeRef: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createPortTypeRef();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'optional') {
                  modelElem.setOptional(reader.nextBoolean());
                }
                 else if (nextName === 'noDependency') {
                  modelElem.setNoDependency(reader.nextBoolean());
                }
                 else if (nextName === 'ref') {
                  var tmp$1;
                  var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'ref', xmiRef));
                }
                 else if (nextName === 'mappings') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadPortTypeMapping(reader, context);
                    modelElem.addMappings(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in PortTypeRef');
                }
              }
              return modelElem;
            },
            loadWire: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createWire();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.setGenerated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'ports') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'ports', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Wire');
                }
              }
              return modelElem;
            },
            loadServicePortType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createServicePortType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.setFactoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.setBean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'abstract') {
                  modelElem.setAbstract(reader.nextBoolean());
                }
                 else if (nextName === 'synchrone') {
                  modelElem.setSynchrone(reader.nextBoolean());
                }
                 else if (nextName === 'interface') {
                  var tmp$3;
                  modelElem.setInterface(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$4;
                    var xmiRef = (tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.setDictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$5;
                    var xmiRef_0 = (tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'operations') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadOperation(reader, context);
                    modelElem.addOperations(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ServicePortType');
                }
              }
              return modelElem;
            },
            loadOperation: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createOperation();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'parameters') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadParameter(reader, context);
                    modelElem.addParameters(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'returnType') {
                  var tmp$1;
                  var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'returnType', xmiRef));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Operation');
                }
              }
              return modelElem;
            },
            loadParameter: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createParameter();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'order') {
                  modelElem.setOrder(reader.nextInt());
                }
                 else if (nextName === 'type') {
                  var tmp$1;
                  var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'type', xmiRef));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Parameter');
                }
              }
              return modelElem;
            },
            loadTypedElement: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createTypedElement();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'genericTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'genericTypes', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in TypedElement');
                }
              }
              return modelElem;
            },
            loadMessagePortType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createMessagePortType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.setFactoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.setBean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'abstract') {
                  modelElem.setAbstract(reader.nextBoolean());
                }
                 else if (nextName === 'synchrone') {
                  modelElem.setSynchrone(reader.nextBoolean());
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$3;
                    var xmiRef = (tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.setDictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$4;
                    var xmiRef_0 = (tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'filters') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$5;
                    var xmiRef_1 = (tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'filters', xmiRef_1));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in MessagePortType');
                }
              }
              return modelElem;
            },
            loadRepository: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createRepository();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'url') {
                  var tmp$0;
                  modelElem.setUrl(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'units') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'units', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Repository');
                }
              }
              return modelElem;
            },
            loadDeployUnit: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createDeployUnit();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'groupName') {
                  var tmp$1;
                  modelElem.setGroupName(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'unitName') {
                  var tmp$2;
                  modelElem.setUnitName(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'version') {
                  var tmp$3;
                  modelElem.setVersion(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'url') {
                  var tmp$4;
                  modelElem.setUrl(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'hashcode') {
                  var tmp$5;
                  modelElem.setHashcode(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'type') {
                  var tmp$6;
                  modelElem.setType(this.unescapeJSON((tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'generated_KMF_ID') {
                  var tmp$7;
                  modelElem.setGenerated_KMF_ID(this.unescapeJSON((tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'requiredLibs') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$8;
                    var xmiRef = (tmp$8 = reader.nextString()) != null ? tmp$8 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'requiredLibs', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'targetNodeType') {
                  var tmp$9;
                  var xmiRef_0 = (tmp$9 = reader.nextString()) != null ? tmp$9 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'targetNodeType', xmiRef_0));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in DeployUnit');
                }
              }
              return modelElem;
            },
            loadTypeLibrary: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createTypeLibrary();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'subTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'subTypes', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in TypeLibrary');
                }
              }
              return modelElem;
            },
            loadNamedElement: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createNamedElement();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in NamedElement');
                }
              }
              return modelElem;
            },
            loadIntegrationPattern: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createIntegrationPattern();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'extraFonctionalProperties') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadExtraFonctionalProperty(reader, context);
                    modelElem.addExtraFonctionalProperties(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'portTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'portTypes', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in IntegrationPattern');
                }
              }
              return modelElem;
            },
            loadExtraFonctionalProperty: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createExtraFonctionalProperty();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.setGenerated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'portTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$1;
                    var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'portTypes', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ExtraFonctionalProperty');
                }
              }
              return modelElem;
            },
            loadPortTypeMapping: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createPortTypeMapping();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'beanMethodName') {
                  var tmp$0;
                  modelElem.setBeanMethodName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'serviceMethodName') {
                  var tmp$1;
                  modelElem.setServiceMethodName(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'paramTypes') {
                  var tmp$2;
                  modelElem.setParamTypes(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'generated_KMF_ID') {
                  var tmp$3;
                  modelElem.setGenerated_KMF_ID(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in PortTypeMapping');
                }
              }
              return modelElem;
            },
            loadChannel: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createChannel();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'metaData') {
                  var tmp$1;
                  modelElem.setMetaData(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'started') {
                  modelElem.setStarted(reader.nextBoolean());
                }
                 else if (nextName === 'typeDefinition') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'typeDefinition', xmiRef));
                }
                 else if (nextName === 'dictionary') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionary(reader, context);
                  modelElem.setDictionary(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'bindings') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$3;
                    var xmiRef_0 = (tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'bindings', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Channel');
                }
              }
              return modelElem;
            },
            loadMBinding: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createMBinding();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.setGenerated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'port') {
                  var tmp$1;
                  var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'port', xmiRef));
                }
                 else if (nextName === 'hub') {
                  var tmp$2;
                  var xmiRef_0 = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'hub', xmiRef_0));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in MBinding');
                }
              }
              return modelElem;
            },
            loadNodeNetwork: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createNodeNetwork();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'generated_KMF_ID') {
                  var tmp$0;
                  modelElem.setGenerated_KMF_ID(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'link') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadNodeLink(reader, context);
                    modelElem.addLink(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'initBy') {
                  var tmp$1;
                  var xmiRef = (tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'initBy', xmiRef));
                }
                 else if (nextName === 'target') {
                  var tmp$2;
                  var xmiRef_0 = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'target', xmiRef_0));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in NodeNetwork');
                }
              }
              return modelElem;
            },
            loadNodeLink: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createNodeLink();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'networkType') {
                  var tmp$0;
                  modelElem.setNetworkType(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'estimatedRate') {
                  modelElem.setEstimatedRate(reader.nextInt());
                }
                 else if (nextName === 'lastCheck') {
                  var tmp$1;
                  modelElem.setLastCheck(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'zoneID') {
                  var tmp$2;
                  modelElem.setZoneID(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'generated_KMF_ID') {
                  var tmp$3;
                  modelElem.setGenerated_KMF_ID(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'networkProperties') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem = this.loadNetworkProperty(reader, context);
                    modelElem.addNetworkProperties(loadedElem);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in NodeLink');
                }
              }
              return modelElem;
            },
            loadNetworkProperty: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createNetworkProperty();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'value') {
                  var tmp$1;
                  modelElem.setValue(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'lastCheck') {
                  var tmp$2;
                  modelElem.setLastCheck(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in NetworkProperty');
                }
              }
              return modelElem;
            },
            loadChannelType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createChannelType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.setFactoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.setBean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'abstract') {
                  modelElem.setAbstract(reader.nextBoolean());
                }
                 else if (nextName === 'startMethod') {
                  var tmp$3;
                  modelElem.setStartMethod(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'stopMethod') {
                  var tmp$4;
                  modelElem.setStopMethod(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'updateMethod') {
                  var tmp$5;
                  modelElem.setUpdateMethod(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'lowerBindings') {
                  modelElem.setLowerBindings(reader.nextInt());
                }
                 else if (nextName === 'upperBindings') {
                  modelElem.setUpperBindings(reader.nextInt());
                }
                 else if (nextName === 'lowerFragments') {
                  modelElem.setLowerFragments(reader.nextInt());
                }
                 else if (nextName === 'upperFragments') {
                  modelElem.setUpperFragments(reader.nextInt());
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$6;
                    var xmiRef = (tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.setDictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$7;
                    var xmiRef_0 = (tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in ChannelType');
                }
              }
              return modelElem;
            },
            loadTypeDefinition: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createTypeDefinition();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.setFactoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.setBean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'abstract') {
                  modelElem.setAbstract(reader.nextBoolean());
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$3;
                    var xmiRef = (tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.setDictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$4;
                    var xmiRef_0 = (tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in TypeDefinition');
                }
              }
              return modelElem;
            },
            loadInstance: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createInstance();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'metaData') {
                  var tmp$1;
                  modelElem.setMetaData(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'started') {
                  modelElem.setStarted(reader.nextBoolean());
                }
                 else if (nextName === 'typeDefinition') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'typeDefinition', xmiRef));
                }
                 else if (nextName === 'dictionary') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionary(reader, context);
                  modelElem.setDictionary(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Instance');
                }
              }
              return modelElem;
            },
            loadLifeCycleTypeDefinition: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createLifeCycleTypeDefinition();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.setFactoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.setBean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'abstract') {
                  modelElem.setAbstract(reader.nextBoolean());
                }
                 else if (nextName === 'startMethod') {
                  var tmp$3;
                  modelElem.setStartMethod(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'stopMethod') {
                  var tmp$4;
                  modelElem.setStopMethod(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'updateMethod') {
                  var tmp$5;
                  modelElem.setUpdateMethod(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$6;
                    var xmiRef = (tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.setDictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$7;
                    var xmiRef_0 = (tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in LifeCycleTypeDefinition');
                }
              }
              return modelElem;
            },
            loadGroup: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createGroup();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'metaData') {
                  var tmp$1;
                  modelElem.setMetaData(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'started') {
                  modelElem.setStarted(reader.nextBoolean());
                }
                 else if (nextName === 'typeDefinition') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'typeDefinition', xmiRef));
                }
                 else if (nextName === 'dictionary') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionary(reader, context);
                  modelElem.setDictionary(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'subNodes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$3;
                    var xmiRef_0 = (tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'subNodes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in Group');
                }
              }
              return modelElem;
            },
            loadGroupType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createGroupType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.setFactoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.setBean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'abstract') {
                  modelElem.setAbstract(reader.nextBoolean());
                }
                 else if (nextName === 'startMethod') {
                  var tmp$3;
                  modelElem.setStartMethod(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'stopMethod') {
                  var tmp$4;
                  modelElem.setStopMethod(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'updateMethod') {
                  var tmp$5;
                  modelElem.setUpdateMethod(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$6;
                    var xmiRef = (tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.setDictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$7;
                    var xmiRef_0 = (tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in GroupType');
                }
              }
              return modelElem;
            },
            loadNodeType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createNodeType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'factoryBean') {
                  var tmp$1;
                  modelElem.setFactoryBean(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'bean') {
                  var tmp$2;
                  modelElem.setBean(this.unescapeJSON((tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'abstract') {
                  modelElem.setAbstract(reader.nextBoolean());
                }
                 else if (nextName === 'startMethod') {
                  var tmp$3;
                  modelElem.setStartMethod(this.unescapeJSON((tmp$3 = reader.nextString()) != null ? tmp$3 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'stopMethod') {
                  var tmp$4;
                  modelElem.setStopMethod(this.unescapeJSON((tmp$4 = reader.nextString()) != null ? tmp$4 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'updateMethod') {
                  var tmp$5;
                  modelElem.setUpdateMethod(this.unescapeJSON((tmp$5 = reader.nextString()) != null ? tmp$5 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'deployUnits') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$6;
                    var xmiRef = (tmp$6 = reader.nextString()) != null ? tmp$6 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'deployUnits', xmiRef));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'dictionaryType') {
                  reader.beginObject();
                  var loadedElem = this.loadDictionaryType(reader, context);
                  modelElem.setDictionaryType(loadedElem);
                  reader.endObject();
                }
                 else if (nextName === 'superTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$7;
                    var xmiRef_0 = (tmp$7 = reader.nextString()) != null ? tmp$7 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'superTypes', xmiRef_0));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'managedPrimitiveTypes') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    var tmp$8;
                    var xmiRef_1 = (tmp$8 = reader.nextString()) != null ? tmp$8 : Kotlin.throwNPE();
                    context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_ADD(), 'managedPrimitiveTypes', xmiRef_1));
                  }
                  reader.endArray();
                }
                 else if (nextName === 'managedPrimitiveTypeRefs') {
                  reader.beginArray();
                  while (reader.hasNext()) {
                    reader.beginObject();
                    var loadedElem_0 = this.loadAdaptationPrimitiveTypeRef(reader, context);
                    modelElem.addManagedPrimitiveTypeRefs(loadedElem_0);
                    reader.endObject();
                  }
                  reader.endArray();
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in NodeType');
                }
              }
              return modelElem;
            },
            loadAdaptationPrimitiveType: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createAdaptationPrimitiveType();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'name') {
                  var tmp$0;
                  modelElem.setName(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in AdaptationPrimitiveType');
                }
              }
              return modelElem;
            },
            loadAdaptationPrimitiveTypeRef: function (reader, context) {
              var modelElem = this.get_mainFactory().getKevoreeFactory().createAdaptationPrimitiveTypeRef();
              while (reader.hasNext()) {
                var nextName = reader.nextName();
                if (nextName === 'maxTime') {
                  var tmp$0;
                  modelElem.setMaxTime(this.unescapeJSON((tmp$0 = reader.nextString()) != null ? tmp$0 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'generated_KMF_ID') {
                  var tmp$1;
                  modelElem.setGenerated_KMF_ID(this.unescapeJSON((tmp$1 = reader.nextString()) != null ? tmp$1 : Kotlin.throwNPE()));
                }
                 else if (nextName === 'ref') {
                  var tmp$2;
                  var xmiRef = (tmp$2 = reader.nextString()) != null ? tmp$2 : Kotlin.throwNPE();
                  context.get_resolvers().add(new _.org.kevoree.loader.JSONResolveCommand(context, modelElem, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'ref', xmiRef));
                }
                 else if (nextName === 'eClass') {
                  reader.nextString();
                }
                 else {
                  Kotlin.println('Tag unrecognized: ' + nextName + ' in AdaptationPrimitiveTypeRef');
                }
              }
              return modelElem;
            }
          }),
          JsonReader: Kotlin.createClass({
            initialize: function (ins) {
              this.$PEEKED_NONE = 0;
              this.$PEEKED_BEGIN_OBJECT = 1;
              this.$PEEKED_END_OBJECT = 2;
              this.$PEEKED_BEGIN_ARRAY = 3;
              this.$PEEKED_END_ARRAY = 4;
              this.$PEEKED_TRUE = 5;
              this.$PEEKED_FALSE = 6;
              this.$PEEKED_NULL = 7;
              this.$PEEKED_SINGLE_QUOTED = 8;
              this.$PEEKED_DOUBLE_QUOTED = 9;
              this.$PEEKED_UNQUOTED = 10;
              this.$PEEKED_BUFFERED = 11;
              this.$PEEKED_SINGLE_QUOTED_NAME = 12;
              this.$PEEKED_DOUBLE_QUOTED_NAME = 13;
              this.$PEEKED_UNQUOTED_NAME = 14;
              this.$PEEKED_LONG = 15;
              this.$PEEKED_NUMBER = 16;
              this.$PEEKED_EOF = 17;
              this.$lexer = new _.org.kevoree.loader.Lexer(ins);
              this.$token = null;
            },
            get_PEEKED_NONE: function () {
              return this.$PEEKED_NONE;
            },
            get_PEEKED_BEGIN_OBJECT: function () {
              return this.$PEEKED_BEGIN_OBJECT;
            },
            get_PEEKED_END_OBJECT: function () {
              return this.$PEEKED_END_OBJECT;
            },
            get_PEEKED_BEGIN_ARRAY: function () {
              return this.$PEEKED_BEGIN_ARRAY;
            },
            get_PEEKED_END_ARRAY: function () {
              return this.$PEEKED_END_ARRAY;
            },
            get_PEEKED_TRUE: function () {
              return this.$PEEKED_TRUE;
            },
            get_PEEKED_FALSE: function () {
              return this.$PEEKED_FALSE;
            },
            get_PEEKED_NULL: function () {
              return this.$PEEKED_NULL;
            },
            get_PEEKED_SINGLE_QUOTED: function () {
              return this.$PEEKED_SINGLE_QUOTED;
            },
            get_PEEKED_DOUBLE_QUOTED: function () {
              return this.$PEEKED_DOUBLE_QUOTED;
            },
            get_PEEKED_UNQUOTED: function () {
              return this.$PEEKED_UNQUOTED;
            },
            get_PEEKED_BUFFERED: function () {
              return this.$PEEKED_BUFFERED;
            },
            get_PEEKED_SINGLE_QUOTED_NAME: function () {
              return this.$PEEKED_SINGLE_QUOTED_NAME;
            },
            get_PEEKED_DOUBLE_QUOTED_NAME: function () {
              return this.$PEEKED_DOUBLE_QUOTED_NAME;
            },
            get_PEEKED_UNQUOTED_NAME: function () {
              return this.$PEEKED_UNQUOTED_NAME;
            },
            get_PEEKED_LONG: function () {
              return this.$PEEKED_LONG;
            },
            get_PEEKED_NUMBER: function () {
              return this.$PEEKED_NUMBER;
            },
            get_PEEKED_EOF: function () {
              return this.$PEEKED_EOF;
            },
            get_lexer: function () {
              return this.$lexer;
            },
            set_lexer: function (tmp$0) {
              this.$lexer = tmp$0;
            },
            get_token: function () {
              return this.$token;
            },
            set_token: function (tmp$0) {
              this.$token = tmp$0;
            },
            hasNext: function () {
              if (this.get_token() == null) {
                this.doPeek();
              }
              var t = this.get_token();
              return t.get_tokenType() !== _.org.kevoree.loader.Type.get_RIGHT_BRACE() && t.get_tokenType() !== _.org.kevoree.loader.Type.get_RIGHT_BRACKET();
            },
            doPeek: function () {
              this.set_token(this.get_lexer().nextToken());
              var t = this.get_token();
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_COLON() || t.get_tokenType() === _.org.kevoree.loader.Type.get_COMMA())
                this.doPeek();
              return this.get_token();
            },
            peek: function () {
              if (this.get_token() == null)
                this.doPeek();
              var t = this.get_token();
              var tmp$0 = t.get_tokenType();
              if (tmp$0 === _.org.kevoree.loader.Type.get_LEFT_BRACE())
                return _.org.kevoree.loader.JsonToken.get_BEGIN_OBJECT();
              else if (tmp$0 === _.org.kevoree.loader.Type.get_RIGHT_BRACE())
                return _.org.kevoree.loader.JsonToken.get_END_OBJECT();
              else if (tmp$0 === _.org.kevoree.loader.Type.get_LEFT_BRACKET())
                return _.org.kevoree.loader.JsonToken.get_BEGIN_ARRAY();
              else if (tmp$0 === _.org.kevoree.loader.Type.get_RIGHT_BRACKET())
                return _.org.kevoree.loader.JsonToken.get_END_ARRAY();
              else if (tmp$0 === _.org.kevoree.loader.Type.get_VALUE())
                return _.org.kevoree.loader.JsonToken.get_NAME();
              else if (tmp$0 === _.org.kevoree.loader.Type.get_EOF())
                return _.org.kevoree.loader.JsonToken.get_END_DOCUMENT();
              else
                return _.org.kevoree.loader.JsonToken.get_NULL();
            },
            beginObject: function () {
              if (this.get_token() == null) {
                this.doPeek();
              }
              var t = this.get_token();
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_LEFT_BRACE()) {
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected LEFT_BRACE but was ' + this.peek());
              }
            },
            endObject: function () {
              if (this.get_token() == null)
                this.doPeek();
              var t = this.get_token();
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_RIGHT_BRACE()) {
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected RIGHT_BRACE but was ' + this.peek());
              }
            },
            beginArray: function () {
              if (this.get_token() == null)
                this.doPeek();
              var t = this.get_token();
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_LEFT_BRACKET()) {
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected LEFT_BRACKET but was ' + this.peek());
              }
            },
            endArray: function () {
              if (this.get_token() == null)
                this.doPeek();
              var t = this.get_token();
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_RIGHT_BRACKET()) {
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected RIGHT_BRACKET but was ' + this.peek());
              }
            },
            nextBoolean: function () {
              if (this.get_token() == null)
                this.doPeek();
              var t = this.get_token();
              var ret = false;
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_VALUE()) {
                var tmp$0 = t.get_value();
                if (tmp$0 === true || tmp$0 === 'true')
                  ret = true;
                else if (tmp$0 === false || tmp$0 === 'false')
                  ret = false;
                else
                  ret = false;
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected VALUE(Boolean) but was ' + this.peek());
              }
              return ret;
            },
            nextString: function () {
              if (this.get_token() == null) {
                this.doPeek();
              }
              var t = this.get_token();
              var ret = '';
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_VALUE()) {
                ret = t.get_value();
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected VALUE(String) but was ' + this.peek());
              }
              return ret;
            },
            nextInt: function () {
              if (this.get_token() == null)
                this.doPeek();
              var t = this.get_token();
              var ret = 42;
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_VALUE()) {
                var tret = _.java.lang.IntegerParser.parseInt(t.get_value());
                if (tret != null) {
                  ret = tret;
                }
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected VALUE(Int) but was ' + this.peek());
              }
              return ret;
            },
            nextName: function () {
              if (this.get_token() == null) {
                this.doPeek();
              }
              var t = this.get_token();
              var ret = '';
              if (t.get_tokenType() === _.org.kevoree.loader.Type.get_VALUE()) {
                ret = t.get_value();
                this.set_token(null);
              }
               else {
                throw new Kotlin.IllegalStateException('Expected VALUE(Name) but was ' + this.peek());
              }
              return ret;
            }
          }),
          ResolveCommand: classes.c13,
          LoadingContext: Kotlin.createClass({
            initialize: function () {
              this.$loadedRoots = new Kotlin.ArrayList(0);
              this.$map = new Kotlin.PrimitiveHashMap(0);
              this.$elementsCount = new Kotlin.PrimitiveHashMap(0);
              this.$resolvers = new Kotlin.ArrayList(0);
              this.$stats = new Kotlin.PrimitiveHashMap(0);
            },
            get_loadedRoots: function () {
              return this.$loadedRoots;
            },
            set_loadedRoots: function (tmp$0) {
              this.$loadedRoots = tmp$0;
            },
            get_map: function () {
              return this.$map;
            },
            get_elementsCount: function () {
              return this.$elementsCount;
            },
            get_resolvers: function () {
              return this.$resolvers;
            },
            get_stats: function () {
              return this.$stats;
            }
          }),
          Token: Kotlin.createClass({
            initialize: function (tokenType, value) {
              this.$tokenType = tokenType;
              this.$value = value;
            },
            get_tokenType: function () {
              return this.$tokenType;
            },
            get_value: function () {
              return this.$value;
            },
            toString: function () {
              var tmp$0;
              if (this.get_value() != null) {
                tmp$0 = ' (' + this.get_value() + ')';
              }
               else {
                tmp$0 = '';
              }
              var v = tmp$0;
              var result = this.get_tokenType().toString() + v;
              return result;
            }
          }),
          Lexer: Kotlin.createClass({
            initialize: function (inputStream) {
              this.$inputStream = inputStream;
              this.$bytes = this.get_inputStream().readBytes();
              this.$EOF = new _.org.kevoree.loader.Token(_.org.kevoree.loader.Type.get_EOF(), null);
              this.$index = 0;
              this.$BOOLEAN_LETTERS = null;
              this.$DIGIT = null;
            },
            get_inputStream: function () {
              return this.$inputStream;
            },
            get_bytes: function () {
              return this.$bytes;
            },
            get_EOF: function () {
              return this.$EOF;
            },
            get_index: function () {
              return this.$index;
            },
            set_index: function (tmp$0) {
              this.$index = tmp$0;
            },
            isSpace: function (c) {
              return c === ' ' || c === '\r' || c === '\n' || c === '\t';
            },
            nextChar: function () {
              var tmp$0, tmp$1;
              return this.get_bytes()[tmp$0 = this.get_index(), tmp$1 = tmp$0, this.set_index(tmp$0 + 1), tmp$1];
            },
            peekChar: function () {
              return this.get_bytes()[this.get_index()];
            },
            isDone: function () {
              return this.get_index() >= this.get_bytes().length;
            },
            get_BOOLEAN_LETTERS: function () {
              return this.$BOOLEAN_LETTERS;
            },
            set_BOOLEAN_LETTERS: function (tmp$0) {
              this.$BOOLEAN_LETTERS = tmp$0;
            },
            isBooleanLetter: function (c) {
              if (this.get_BOOLEAN_LETTERS() == null) {
                this.set_BOOLEAN_LETTERS(new Kotlin.PrimitiveHashSet());
                var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6, tmp$7;
                ((tmp$0 = this.get_BOOLEAN_LETTERS()) != null ? tmp$0 : Kotlin.throwNPE()).add('f');
                ((tmp$1 = this.get_BOOLEAN_LETTERS()) != null ? tmp$1 : Kotlin.throwNPE()).add('a');
                ((tmp$2 = this.get_BOOLEAN_LETTERS()) != null ? tmp$2 : Kotlin.throwNPE()).add('l');
                ((tmp$3 = this.get_BOOLEAN_LETTERS()) != null ? tmp$3 : Kotlin.throwNPE()).add('s');
                ((tmp$4 = this.get_BOOLEAN_LETTERS()) != null ? tmp$4 : Kotlin.throwNPE()).add('e');
                ((tmp$5 = this.get_BOOLEAN_LETTERS()) != null ? tmp$5 : Kotlin.throwNPE()).add('t');
                ((tmp$6 = this.get_BOOLEAN_LETTERS()) != null ? tmp$6 : Kotlin.throwNPE()).add('r');
                ((tmp$7 = this.get_BOOLEAN_LETTERS()) != null ? tmp$7 : Kotlin.throwNPE()).add('u');
              }
              var tmp$8;
              return ((tmp$8 = this.get_BOOLEAN_LETTERS()) != null ? tmp$8 : Kotlin.throwNPE()).contains(c);
            },
            get_DIGIT: function () {
              return this.$DIGIT;
            },
            set_DIGIT: function (tmp$0) {
              this.$DIGIT = tmp$0;
            },
            isDigit: function (c) {
              if (this.get_DIGIT() == null) {
                this.set_DIGIT(new Kotlin.PrimitiveHashSet());
                var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6, tmp$7, tmp$8, tmp$9;
                ((tmp$0 = this.get_DIGIT()) != null ? tmp$0 : Kotlin.throwNPE()).add('0');
                ((tmp$1 = this.get_DIGIT()) != null ? tmp$1 : Kotlin.throwNPE()).add('1');
                ((tmp$2 = this.get_DIGIT()) != null ? tmp$2 : Kotlin.throwNPE()).add('2');
                ((tmp$3 = this.get_DIGIT()) != null ? tmp$3 : Kotlin.throwNPE()).add('3');
                ((tmp$4 = this.get_DIGIT()) != null ? tmp$4 : Kotlin.throwNPE()).add('4');
                ((tmp$5 = this.get_DIGIT()) != null ? tmp$5 : Kotlin.throwNPE()).add('5');
                ((tmp$6 = this.get_DIGIT()) != null ? tmp$6 : Kotlin.throwNPE()).add('6');
                ((tmp$7 = this.get_DIGIT()) != null ? tmp$7 : Kotlin.throwNPE()).add('7');
                ((tmp$8 = this.get_DIGIT()) != null ? tmp$8 : Kotlin.throwNPE()).add('8');
                ((tmp$9 = this.get_DIGIT()) != null ? tmp$9 : Kotlin.throwNPE()).add('9');
              }
              var tmp$10;
              return ((tmp$10 = this.get_DIGIT()) != null ? tmp$10 : Kotlin.throwNPE()).contains(c);
            },
            isValueLetter: function (c) {
              return c === '-' || c === '+' || c === '.' || this.isDigit(c) || this.isBooleanLetter(c);
            },
            nextToken: function () {
              if (this.isDone()) {
                return this.get_EOF();
              }
              var tokenType = _.org.kevoree.loader.Type.get_EOF();
              var c = this.nextChar();
              var currentValue = new _.java.lang.StringBuilder();
              var jsonValue = null;
              while (!this.isDone() && this.isSpace(c)) {
                c = this.nextChar();
              }
              if ('"' === c) {
                tokenType = _.org.kevoree.loader.Type.get_VALUE();
                if (!this.isDone()) {
                  c = this.nextChar();
                  while (this.get_index() < this.get_bytes().length && c !== '"') {
                    currentValue.append_0(c);
                    if (c === '\\' && this.get_index() < this.get_bytes().length) {
                      c = this.nextChar();
                      currentValue.append_0(c);
                    }
                    c = this.nextChar();
                  }
                  jsonValue = currentValue.toString();
                }
                 else {
                  throw new Kotlin.RuntimeException('Unterminated string');
                }
              }
               else if ('{' === c) {
                tokenType = _.org.kevoree.loader.Type.get_LEFT_BRACE();
              }
               else if ('}' === c) {
                tokenType = _.org.kevoree.loader.Type.get_RIGHT_BRACE();
              }
               else if ('[' === c) {
                tokenType = _.org.kevoree.loader.Type.get_LEFT_BRACKET();
              }
               else if (']' === c) {
                tokenType = _.org.kevoree.loader.Type.get_RIGHT_BRACKET();
              }
               else if (':' === c) {
                tokenType = _.org.kevoree.loader.Type.get_COLON();
              }
               else if (',' === c) {
                tokenType = _.org.kevoree.loader.Type.get_COMMA();
              }
               else if (!this.isDone()) {
                while (this.isValueLetter(c)) {
                  currentValue.append_0(c);
                  if (!this.isValueLetter(this.peekChar())) {
                    break;
                  }
                   else {
                    c = this.nextChar();
                  }
                }
                var v = currentValue.toString();
                if (Kotlin.equals('true', v.toLowerCase())) {
                  jsonValue = true;
                }
                 else if (Kotlin.equals('false', v.toLowerCase())) {
                  jsonValue = false;
                }
                 else {
                  jsonValue = v.toLowerCase();
                }
                tokenType = _.org.kevoree.loader.Type.get_VALUE();
              }
               else {
                tokenType = _.org.kevoree.loader.Type.get_EOF();
              }
              return new _.org.kevoree.loader.Token(tokenType, jsonValue);
            }
          }),
          JSONResolveCommand: Kotlin.createClass(classes.c13, {
            initialize: function (context, target, mutatorType, refName, ref) {
              this.$context = context;
              this.$target = target;
              this.$mutatorType = mutatorType;
              this.$refName = refName;
              this.$ref = ref;
            },
            get_context: function () {
              return this.$context;
            },
            get_target: function () {
              return this.$target;
            },
            get_mutatorType: function () {
              return this.$mutatorType;
            },
            get_refName: function () {
              return this.$refName;
            },
            get_ref: function () {
              return this.$ref;
            },
            run: function () {
              var referencedElement = null;
              var i = 0;
              while (referencedElement == null && i < this.get_context().get_loadedRoots().size()) {
                var tmp$0;
                referencedElement = (tmp$0 = this.get_context().get_loadedRoots().get(i++)) != null ? tmp$0.findByPath(this.get_ref()) : null;
              }
              if (referencedElement != null) {
                this.get_target().reflexiveMutator(this.get_mutatorType(), this.get_refName(), referencedElement);
                return;
              }
              throw new Kotlin.Exception('KMF Load error : reference ' + this.get_ref() + ' not found in map when trying to ' + this.get_mutatorType() + ' ' + this.get_refName() + ' on ' + this.get_target().toString());
            }
          })
        }),
        impl: Kotlin.definePackage({
          TypedElementImpl: Kotlin.createClass(classes.c8, classes.ce, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_genericTypes_java_cache = null;
              this.$_genericTypes = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__genericTypes_java_cache: function () {
              return this.$_genericTypes_java_cache;
            },
            set__genericTypes_java_cache: function (tmp$0) {
              this.$_genericTypes_java_cache = tmp$0;
            },
            get__genericTypes: function () {
              return this.$_genericTypes;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getGenericTypes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__genericTypes()) != null ? tmp$0.clear() : null;
              this.set__genericTypes_java_cache(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getGenericTypes: function () {
              return _.kotlin.toList_1(this.get__genericTypes().values());
            },
            setGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (genericTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__genericTypes_java_cache(null);
              if (!Kotlin.equals(this.get__genericTypes(), genericTypesP)) {
                this.get__genericTypes().clear();
                {
                  var tmp$0 = genericTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__genericTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__genericTypes_java_cache(null);
              var _key_ = genericTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__genericTypes().put(_key_, genericTypesP);
            },
            addAllGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__genericTypes_java_cache(null);
              {
                var tmp$0 = genericTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__genericTypes().put(_key_, el);
                }
              }
            },
            removeGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__genericTypes_java_cache(null);
              if (this.get__genericTypes().size() !== 0 && this.get__genericTypes().containsKey(genericTypesP.internalGetKey())) {
                this.get__genericTypes().remove(genericTypesP.internalGetKey());
              }
            },
            removeAllGenericTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getGenericTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__genericTypes_java_cache(null);
              this.get__genericTypes().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createTypedElement();
              selfObjectClone.setName(this.getName());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getGenericTypes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addGenericTypes(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained genericTypes from TypedElement : ' + this.getGenericTypes());
                    }
                    clonedSelfObject.addGenericTypes(interObj);
                  }
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_genericTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addGenericTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllGenericTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeGenericTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllGenericTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__genericTypes().size() !== 0 && this.get__genericTypes().containsKey(value)) {
                    var obj = this.get__genericTypes().get(value);
                    this.get__genericTypes().put(obj.internalGetKey(), obj);
                    this.get__genericTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findGenericTypesByID: function (key) {
              return this.get__genericTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_genericTypes();
              var optionalDetected = firstSepIndex !== 12;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, _.js.get_size(query));
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0, tmp$1;
              tmp$0 = query;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = _.js.get_size(relationName);
              }
              var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_genericTypes()) {
                var objFound = this.findGenericTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.TypedElement) || !Kotlin.isType(similarObj, _.org.kevoree.impl.TypedElementImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.TypedElement';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.TypedElement) || Kotlin.isType(similarObj, _.org.kevoree.impl.TypedElementImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$10;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$3 = this.getGenericTypes().iterator();
                while (tmp$3.hasNext()) {
                  var elem = tmp$3.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$4;
                    ((tmp$4 = hashLoop) != null ? tmp$4 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$5;
                {
                  var tmp$6 = ((tmp$5 = similarObjCasted) != null ? tmp$5 : Kotlin.throwNPE()).getGenericTypes().iterator();
                  while (tmp$6.hasNext()) {
                    var elem_0 = tmp$6.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$7;
                      if (((tmp$7 = hashLoop) != null ? tmp$7 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$8;
                          ((tmp$8 = hashResult) != null ? tmp$8 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$9;
                          ((tmp$9 = hashResult) != null ? tmp$9 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$10 = hashResult) != null ? tmp$10 : Kotlin.throwNPE()) !== 0) {
                var tmp$11, tmp$12;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), _.kotlin.toList_1((tmp$12 = hashResult) != null ? tmp$12 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          PortTypeMappingImpl: Kotlin.createClass(classes.c8, classes.cc, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_beanMethodName = '';
              this.$_serviceMethodName = '';
              this.$_paramTypes = '';
              this.$_generated_KMF_ID = '';
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__beanMethodName: function () {
              return this.$_beanMethodName;
            },
            set__beanMethodName: function (tmp$0) {
              this.$_beanMethodName = tmp$0;
            },
            get__serviceMethodName: function () {
              return this.$_serviceMethodName;
            },
            set__serviceMethodName: function (tmp$0) {
              this.$_serviceMethodName = tmp$0;
            },
            get__paramTypes: function () {
              return this.$_paramTypes;
            },
            set__paramTypes: function (tmp$0) {
              this.$_paramTypes = tmp$0;
            },
            get__generated_KMF_ID: function () {
              return this.$_generated_KMF_ID;
            },
            set__generated_KMF_ID: function (tmp$0) {
              this.$_generated_KMF_ID = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              this.setInternalReadOnly();
            },
            delete: function () {
            },
            getBeanMethodName: function () {
              return this.get__beanMethodName();
            },
            setBeanMethodName: function (beanMethodNameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__beanMethodName(beanMethodNameP);
            },
            getServiceMethodName: function () {
              return this.get__serviceMethodName();
            },
            setServiceMethodName: function (serviceMethodNameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__serviceMethodName(serviceMethodNameP);
            },
            getParamTypes: function () {
              return this.get__paramTypes();
            },
            setParamTypes: function (paramTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__paramTypes(paramTypesP);
            },
            getGenerated_KMF_ID: function () {
              return this.get__generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (generated_KMF_IDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__generated_KMF_ID(generated_KMF_IDP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createPortTypeMapping();
              selfObjectClone.setBeanMethodName(this.getBeanMethodName());
              selfObjectClone.setServiceMethodName(this.getServiceMethodName());
              selfObjectClone.setParamTypes(this.getParamTypes());
              selfObjectClone.setGenerated_KMF_ID(this.getGenerated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_beanMethodName()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setBeanMethodName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_serviceMethodName()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setServiceMethodName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_paramTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setParamTypes(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGenerated_KMF_ID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getGenerated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.PortTypeMapping) || !Kotlin.isType(similarObj, _.org.kevoree.impl.PortTypeMappingImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getBeanMethodName(), similarObjCasted.getBeanMethodName())) {
                return false;
              }
              if (!Kotlin.equals(this.getServiceMethodName(), similarObjCasted.getServiceMethodName())) {
                return false;
              }
              if (!Kotlin.equals(this.getParamTypes(), similarObjCasted.getParamTypes())) {
                return false;
              }
              if (!Kotlin.equals(this.getGenerated_KMF_ID(), similarObjCasted.getGenerated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.PortTypeMapping';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.PortTypeMapping) || Kotlin.isType(similarObj, _.org.kevoree.impl.PortTypeMappingImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getBeanMethodName();
              var tmp$0, tmp$3, tmp$6, tmp$9;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getBeanMethodName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_beanMethodName(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_beanMethodName(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getServiceMethodName();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getServiceMethodName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_serviceMethodName(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_serviceMethodName(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getParamTypes();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getParamTypes() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_paramTypes(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_paramTypes(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getGenerated_KMF_ID();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getGenerated_KMF_ID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
              return traces;
            }
          }),
          ParameterImpl: Kotlin.createClass(classes.c8, classes.c10, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_order = 0;
              this.$_type = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__order: function () {
              return this.$_order;
            },
            set__order: function (tmp$0) {
              this.$_order = tmp$0;
            },
            get__type: function () {
              return this.$_type;
            },
            set__type: function (tmp$0) {
              this.$_type = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              var subsubsubsubtype = this.getType();
              if (subsubsubsubtype != null) {
                subsubsubsubtype.setRecursiveReadOnly();
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              this.set__type(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getOrder: function () {
              return this.get__order();
            },
            setOrder: function (orderP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__order(orderP);
            },
            getType: function () {
              return this.get__type();
            },
            setType: function (typeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__type(), typeP)) {
                this.set__type(typeP);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createParameter();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setOrder(this.getOrder());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (this.getType() != null) {
                var tmp$0;
                if (mutableOnly && ((tmp$0 = this.getType()) != null ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$1;
                  clonedSelfObject.setType((tmp$1 = this.getType()) != null ? tmp$1 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.getType());
                  if (interObj == null) {
                    throw new Kotlin.Exception('Non contained type from Parameter : ' + this.getType());
                  }
                  clonedSelfObject.setType(interObj);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_order()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setOrder(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_type()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Parameter) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ParameterImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (this.getOrder() !== similarObjCasted.getOrder()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Parameter';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Parameter) || Kotlin.isType(similarObj, _.org.kevoree.impl.ParameterImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$7, tmp$8;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getOrder();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getOrder() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_order(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_order(), null, attVal2.toString(), null));
                }
              }
              attVal = null;
              attVal = (tmp$6 = this.getType()) != null ? tmp$6.path() : null;
              attVal2 = null;
              attVal2 = (tmp$8 = (tmp$7 = similarObjCasted) != null ? tmp$7.getType() : null) != null ? tmp$8.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$9;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_type(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_type(), attVal2String, null, null));
                }
              }
              return traces;
            }
          }),
          PortTypeImpl: Kotlin.createClass(classes.c8, classes.cz, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_factoryBean = '';
              this.$_bean = '';
              this.$_abstract = false;
              this.$_synchrone = false;
              this.$_deployUnits_java_cache = null;
              this.$_deployUnits = new Kotlin.ComplexHashMap(0);
              this.$_dictionaryType = null;
              this.$_superTypes_java_cache = null;
              this.$_superTypes = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__factoryBean: function () {
              return this.$_factoryBean;
            },
            set__factoryBean: function (tmp$0) {
              this.$_factoryBean = tmp$0;
            },
            get__bean: function () {
              return this.$_bean;
            },
            set__bean: function (tmp$0) {
              this.$_bean = tmp$0;
            },
            get__abstract: function () {
              return this.$_abstract;
            },
            set__abstract: function (tmp$0) {
              this.$_abstract = tmp$0;
            },
            get__synchrone: function () {
              return this.$_synchrone;
            },
            set__synchrone: function (tmp$0) {
              this.$_synchrone = tmp$0;
            },
            get__deployUnits_java_cache: function () {
              return this.$_deployUnits_java_cache;
            },
            set__deployUnits_java_cache: function (tmp$0) {
              this.$_deployUnits_java_cache = tmp$0;
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get__dictionaryType: function () {
              return this.$_dictionaryType;
            },
            set__dictionaryType: function (tmp$0) {
              this.$_dictionaryType = tmp$0;
            },
            get__superTypes_java_cache: function () {
              return this.$_superTypes_java_cache;
            },
            set__superTypes_java_cache: function (tmp$0) {
              this.$_superTypes_java_cache = tmp$0;
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.setRecursiveReadOnly();
              }
              {
                var tmp$1 = this.getSuperTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__dictionaryType()) != null ? tmp$0.delete() : null;
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getFactoryBean: function () {
              return this.get__factoryBean();
            },
            setFactoryBean: function (factoryBeanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__factoryBean(factoryBeanP);
            },
            getBean: function () {
              return this.get__bean();
            },
            setBean: function (beanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__bean(beanP);
            },
            getAbstract: function () {
              return this.get__abstract();
            },
            setAbstract: function (abstractP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__abstract(abstractP);
            },
            getSynchrone: function () {
              return this.get__synchrone();
            },
            setSynchrone: function (synchroneP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__synchrone(synchroneP);
            },
            getDeployUnits: function () {
              return _.kotlin.toList_1(this.get__deployUnits().values());
            },
            setDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (!Kotlin.equals(this.get__deployUnits(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__deployUnits().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              var _key_ = deployUnitsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(deployUnitsP.internalGetKey())) {
                this.get__deployUnits().remove(deployUnitsP.internalGetKey());
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getDeployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__deployUnits_java_cache(null);
              this.get__deployUnits().clear();
            },
            getDictionaryType: function () {
              return this.get__dictionaryType();
            },
            setDictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionaryType(), dictionaryTypeP)) {
                if (this.get__dictionaryType() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  dictionaryTypeP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.set__dictionaryType(dictionaryTypeP);
              }
            },
            getSuperTypes: function () {
              return _.kotlin.toList_1(this.get__superTypes().values());
            },
            setSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (!Kotlin.equals(this.get__superTypes(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__superTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              var _key_ = superTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(superTypesP.internalGetKey())) {
                this.get__superTypes().remove(superTypesP.internalGetKey());
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getSuperTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__superTypes_java_cache(null);
              this.get__superTypes().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createPortType();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setFactoryBean(this.getFactoryBean());
              selfObjectClone.setBean(this.getBean());
              selfObjectClone.setAbstract(this.getAbstract());
              selfObjectClone.setSynchrone(this.getSynchrone());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained deployUnits from PortType : ' + this.getDeployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj);
                  }
                }
              }
              if (this.getDictionaryType() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getDictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionaryType());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionaryType from PortType : ' + this.getDictionaryType());
                  }
                  clonedSelfObject.setDictionaryType(interObj_0);
                }
              }
              {
                var tmp$3 = this.getSuperTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained superTypes from PortType : ' + this.getSuperTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1);
                  }
                }
              }
              var subsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubdictionaryType != null) {
                subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setFactoryBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setAbstract(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_synchrone()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setSynchrone(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    this.get__deployUnits().put(obj.internalGetKey(), obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionaryType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    this.get__superTypes().put(obj_0.internalGetKey(), obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getDictionaryType();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.PortType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.PortTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getAbstract(), similarObjCasted.getAbstract())) {
                return false;
              }
              if (!Kotlin.equals(this.getSynchrone(), similarObjCasted.getSynchrone())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              if (this.get__dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.PortType';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.PortType) || Kotlin.isType(similarObj, _.org.kevoree.impl.PortTypeImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$12, tmp$22, tmp$32;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getFactoryBean();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getFactoryBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getBean();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getAbstract();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getAbstract() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getSynchrone();
              attVal2 = (tmp$12 = similarObjCasted) != null ? tmp$12.getSynchrone() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_synchrone(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$14;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_synchrone(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$15 = this.getDeployUnits().iterator();
                while (tmp$15.hasNext()) {
                  var elem = tmp$15.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$16;
                    ((tmp$16 = hashLoop) != null ? tmp$16 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$17;
                {
                  var tmp$18 = ((tmp$17 = similarObjCasted) != null ? tmp$17 : Kotlin.throwNPE()).getDeployUnits().iterator();
                  while (tmp$18.hasNext()) {
                    var elem_0 = tmp$18.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$19;
                      if (((tmp$19 = hashLoop) != null ? tmp$19 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$20;
                          ((tmp$20 = hashResult) != null ? tmp$20 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$21;
                          ((tmp$21 = hashResult) != null ? tmp$21 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$22 = hashResult) != null ? tmp$22 : Kotlin.throwNPE()) !== 0) {
                var tmp$23, tmp$24;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$23 = this.path()) != null ? tmp$23 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), _.kotlin.toList_1((tmp$24 = hashResult) != null ? tmp$24 : Kotlin.throwNPE()), null));
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$25 = this.getSuperTypes().iterator();
                while (tmp$25.hasNext()) {
                  var elem_1 = tmp$25.next();
                  var elemPath_1 = elem_1.path();
                  if (elemPath_1 != null) {
                    var tmp$26;
                    ((tmp$26 = hashLoop) != null ? tmp$26 : Kotlin.throwNPE()).add(elemPath_1);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$27;
                {
                  var tmp$28 = ((tmp$27 = similarObjCasted) != null ? tmp$27 : Kotlin.throwNPE()).getSuperTypes().iterator();
                  while (tmp$28.hasNext()) {
                    var elem_2 = tmp$28.next();
                    var elemPath_2 = elem_2.path();
                    if (elemPath_2 != null) {
                      var tmp$29;
                      if (((tmp$29 = hashLoop) != null ? tmp$29 : Kotlin.throwNPE()).contains(elemPath_2)) {
                        if (inter) {
                          var tmp$30;
                          ((tmp$30 = hashResult) != null ? tmp$30 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$31;
                          ((tmp$31 = hashResult) != null ? tmp$31 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$32 = hashResult) != null ? tmp$32 : Kotlin.throwNPE()) !== 0) {
                var tmp$33, tmp$34;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$33 = this.path()) != null ? tmp$33 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), _.kotlin.toList_1((tmp$34 = hashResult) != null ? tmp$34 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          TypeDefinitionImpl: Kotlin.createClass(classes.c8, classes.c6, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_factoryBean = '';
              this.$_bean = '';
              this.$_abstract = false;
              this.$_deployUnits_java_cache = null;
              this.$_deployUnits = new Kotlin.ComplexHashMap(0);
              this.$_dictionaryType = null;
              this.$_superTypes_java_cache = null;
              this.$_superTypes = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__factoryBean: function () {
              return this.$_factoryBean;
            },
            set__factoryBean: function (tmp$0) {
              this.$_factoryBean = tmp$0;
            },
            get__bean: function () {
              return this.$_bean;
            },
            set__bean: function (tmp$0) {
              this.$_bean = tmp$0;
            },
            get__abstract: function () {
              return this.$_abstract;
            },
            set__abstract: function (tmp$0) {
              this.$_abstract = tmp$0;
            },
            get__deployUnits_java_cache: function () {
              return this.$_deployUnits_java_cache;
            },
            set__deployUnits_java_cache: function (tmp$0) {
              this.$_deployUnits_java_cache = tmp$0;
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get__dictionaryType: function () {
              return this.$_dictionaryType;
            },
            set__dictionaryType: function (tmp$0) {
              this.$_dictionaryType = tmp$0;
            },
            get__superTypes_java_cache: function () {
              return this.$_superTypes_java_cache;
            },
            set__superTypes_java_cache: function (tmp$0) {
              this.$_superTypes_java_cache = tmp$0;
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.setRecursiveReadOnly();
              }
              {
                var tmp$1 = this.getSuperTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0, tmp$1, tmp$2;
              (tmp$0 = this.get__dictionaryType()) != null ? tmp$0.delete() : null;
              (tmp$1 = this.get__deployUnits()) != null ? tmp$1.clear() : null;
              this.set__deployUnits_java_cache(null);
              this.set__dictionaryType(null);
              (tmp$2 = this.get__superTypes()) != null ? tmp$2.clear() : null;
              this.set__superTypes_java_cache(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getFactoryBean: function () {
              return this.get__factoryBean();
            },
            setFactoryBean: function (factoryBeanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__factoryBean(factoryBeanP);
            },
            getBean: function () {
              return this.get__bean();
            },
            setBean: function (beanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__bean(beanP);
            },
            getAbstract: function () {
              return this.get__abstract();
            },
            setAbstract: function (abstractP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__abstract(abstractP);
            },
            getDeployUnits: function () {
              return _.kotlin.toList_1(this.get__deployUnits().values());
            },
            setDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (!Kotlin.equals(this.get__deployUnits(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__deployUnits().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              var _key_ = deployUnitsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(deployUnitsP.internalGetKey())) {
                this.get__deployUnits().remove(deployUnitsP.internalGetKey());
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getDeployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__deployUnits_java_cache(null);
              this.get__deployUnits().clear();
            },
            getDictionaryType: function () {
              return this.get__dictionaryType();
            },
            setDictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionaryType(), dictionaryTypeP)) {
                if (this.get__dictionaryType() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  dictionaryTypeP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.set__dictionaryType(dictionaryTypeP);
              }
            },
            getSuperTypes: function () {
              return _.kotlin.toList_1(this.get__superTypes().values());
            },
            setSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (!Kotlin.equals(this.get__superTypes(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__superTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              var _key_ = superTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(superTypesP.internalGetKey())) {
                this.get__superTypes().remove(superTypesP.internalGetKey());
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getSuperTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__superTypes_java_cache(null);
              this.get__superTypes().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createTypeDefinition();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setFactoryBean(this.getFactoryBean());
              selfObjectClone.setBean(this.getBean());
              selfObjectClone.setAbstract(this.getAbstract());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained deployUnits from TypeDefinition : ' + this.getDeployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj);
                  }
                }
              }
              if (this.getDictionaryType() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getDictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionaryType());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionaryType from TypeDefinition : ' + this.getDictionaryType());
                  }
                  clonedSelfObject.setDictionaryType(interObj_0);
                }
              }
              {
                var tmp$3 = this.getSuperTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained superTypes from TypeDefinition : ' + this.getSuperTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1);
                  }
                }
              }
              var subsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubdictionaryType != null) {
                subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setFactoryBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setAbstract(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    this.get__deployUnits().put(obj.internalGetKey(), obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionaryType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    this.get__superTypes().put(obj_0.internalGetKey(), obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getDictionaryType();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.TypeDefinition) || !Kotlin.isType(similarObj, _.org.kevoree.impl.TypeDefinitionImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getAbstract(), similarObjCasted.getAbstract())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              if (this.get__dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.TypeDefinition';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.TypeDefinition) || Kotlin.isType(similarObj, _.org.kevoree.impl.TypeDefinitionImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$19, tmp$29;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getFactoryBean();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getFactoryBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getBean();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getAbstract();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getAbstract() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$12 = this.getDeployUnits().iterator();
                while (tmp$12.hasNext()) {
                  var elem = tmp$12.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$13;
                    ((tmp$13 = hashLoop) != null ? tmp$13 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$14;
                {
                  var tmp$15 = ((tmp$14 = similarObjCasted) != null ? tmp$14 : Kotlin.throwNPE()).getDeployUnits().iterator();
                  while (tmp$15.hasNext()) {
                    var elem_0 = tmp$15.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$16;
                      if (((tmp$16 = hashLoop) != null ? tmp$16 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$17;
                          ((tmp$17 = hashResult) != null ? tmp$17 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$18;
                          ((tmp$18 = hashResult) != null ? tmp$18 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$19 = hashResult) != null ? tmp$19 : Kotlin.throwNPE()) !== 0) {
                var tmp$20, tmp$21;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$20 = this.path()) != null ? tmp$20 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), _.kotlin.toList_1((tmp$21 = hashResult) != null ? tmp$21 : Kotlin.throwNPE()), null));
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$22 = this.getSuperTypes().iterator();
                while (tmp$22.hasNext()) {
                  var elem_1 = tmp$22.next();
                  var elemPath_1 = elem_1.path();
                  if (elemPath_1 != null) {
                    var tmp$23;
                    ((tmp$23 = hashLoop) != null ? tmp$23 : Kotlin.throwNPE()).add(elemPath_1);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$24;
                {
                  var tmp$25 = ((tmp$24 = similarObjCasted) != null ? tmp$24 : Kotlin.throwNPE()).getSuperTypes().iterator();
                  while (tmp$25.hasNext()) {
                    var elem_2 = tmp$25.next();
                    var elemPath_2 = elem_2.path();
                    if (elemPath_2 != null) {
                      var tmp$26;
                      if (((tmp$26 = hashLoop) != null ? tmp$26 : Kotlin.throwNPE()).contains(elemPath_2)) {
                        if (inter) {
                          var tmp$27;
                          ((tmp$27 = hashResult) != null ? tmp$27 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$28;
                          ((tmp$28 = hashResult) != null ? tmp$28 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$29 = hashResult) != null ? tmp$29 : Kotlin.throwNPE()) !== 0) {
                var tmp$30, tmp$31;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$30 = this.path()) != null ? tmp$30 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), _.kotlin.toList_1((tmp$31 = hashResult) != null ? tmp$31 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          ChannelTypeImpl: Kotlin.createClass(classes.c8, classes.c1a, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_factoryBean = '';
              this.$_bean = '';
              this.$_abstract = false;
              this.$_startMethod = '';
              this.$_stopMethod = '';
              this.$_updateMethod = '';
              this.$_lowerBindings = 0;
              this.$_upperBindings = 0;
              this.$_lowerFragments = 0;
              this.$_upperFragments = 0;
              this.$_deployUnits_java_cache = null;
              this.$_deployUnits = new Kotlin.ComplexHashMap(0);
              this.$_dictionaryType = null;
              this.$_superTypes_java_cache = null;
              this.$_superTypes = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__factoryBean: function () {
              return this.$_factoryBean;
            },
            set__factoryBean: function (tmp$0) {
              this.$_factoryBean = tmp$0;
            },
            get__bean: function () {
              return this.$_bean;
            },
            set__bean: function (tmp$0) {
              this.$_bean = tmp$0;
            },
            get__abstract: function () {
              return this.$_abstract;
            },
            set__abstract: function (tmp$0) {
              this.$_abstract = tmp$0;
            },
            get__startMethod: function () {
              return this.$_startMethod;
            },
            set__startMethod: function (tmp$0) {
              this.$_startMethod = tmp$0;
            },
            get__stopMethod: function () {
              return this.$_stopMethod;
            },
            set__stopMethod: function (tmp$0) {
              this.$_stopMethod = tmp$0;
            },
            get__updateMethod: function () {
              return this.$_updateMethod;
            },
            set__updateMethod: function (tmp$0) {
              this.$_updateMethod = tmp$0;
            },
            get__lowerBindings: function () {
              return this.$_lowerBindings;
            },
            set__lowerBindings: function (tmp$0) {
              this.$_lowerBindings = tmp$0;
            },
            get__upperBindings: function () {
              return this.$_upperBindings;
            },
            set__upperBindings: function (tmp$0) {
              this.$_upperBindings = tmp$0;
            },
            get__lowerFragments: function () {
              return this.$_lowerFragments;
            },
            set__lowerFragments: function (tmp$0) {
              this.$_lowerFragments = tmp$0;
            },
            get__upperFragments: function () {
              return this.$_upperFragments;
            },
            set__upperFragments: function (tmp$0) {
              this.$_upperFragments = tmp$0;
            },
            get__deployUnits_java_cache: function () {
              return this.$_deployUnits_java_cache;
            },
            set__deployUnits_java_cache: function (tmp$0) {
              this.$_deployUnits_java_cache = tmp$0;
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get__dictionaryType: function () {
              return this.$_dictionaryType;
            },
            set__dictionaryType: function (tmp$0) {
              this.$_dictionaryType = tmp$0;
            },
            get__superTypes_java_cache: function () {
              return this.$_superTypes_java_cache;
            },
            set__superTypes_java_cache: function (tmp$0) {
              this.$_superTypes_java_cache = tmp$0;
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.setRecursiveReadOnly();
              }
              {
                var tmp$1 = this.getSuperTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__dictionaryType()) != null ? tmp$0.delete() : null;
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getFactoryBean: function () {
              return this.get__factoryBean();
            },
            setFactoryBean: function (factoryBeanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__factoryBean(factoryBeanP);
            },
            getBean: function () {
              return this.get__bean();
            },
            setBean: function (beanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__bean(beanP);
            },
            getAbstract: function () {
              return this.get__abstract();
            },
            setAbstract: function (abstractP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__abstract(abstractP);
            },
            getStartMethod: function () {
              return this.get__startMethod();
            },
            setStartMethod: function (startMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__startMethod(startMethodP);
            },
            getStopMethod: function () {
              return this.get__stopMethod();
            },
            setStopMethod: function (stopMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__stopMethod(stopMethodP);
            },
            getUpdateMethod: function () {
              return this.get__updateMethod();
            },
            setUpdateMethod: function (updateMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__updateMethod(updateMethodP);
            },
            getLowerBindings: function () {
              return this.get__lowerBindings();
            },
            setLowerBindings: function (lowerBindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__lowerBindings(lowerBindingsP);
            },
            getUpperBindings: function () {
              return this.get__upperBindings();
            },
            setUpperBindings: function (upperBindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__upperBindings(upperBindingsP);
            },
            getLowerFragments: function () {
              return this.get__lowerFragments();
            },
            setLowerFragments: function (lowerFragmentsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__lowerFragments(lowerFragmentsP);
            },
            getUpperFragments: function () {
              return this.get__upperFragments();
            },
            setUpperFragments: function (upperFragmentsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__upperFragments(upperFragmentsP);
            },
            getDeployUnits: function () {
              return _.kotlin.toList_1(this.get__deployUnits().values());
            },
            setDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (!Kotlin.equals(this.get__deployUnits(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__deployUnits().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              var _key_ = deployUnitsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(deployUnitsP.internalGetKey())) {
                this.get__deployUnits().remove(deployUnitsP.internalGetKey());
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getDeployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__deployUnits_java_cache(null);
              this.get__deployUnits().clear();
            },
            getDictionaryType: function () {
              return this.get__dictionaryType();
            },
            setDictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionaryType(), dictionaryTypeP)) {
                if (this.get__dictionaryType() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  dictionaryTypeP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.set__dictionaryType(dictionaryTypeP);
              }
            },
            getSuperTypes: function () {
              return _.kotlin.toList_1(this.get__superTypes().values());
            },
            setSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (!Kotlin.equals(this.get__superTypes(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__superTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              var _key_ = superTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(superTypesP.internalGetKey())) {
                this.get__superTypes().remove(superTypesP.internalGetKey());
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getSuperTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__superTypes_java_cache(null);
              this.get__superTypes().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createChannelType();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setFactoryBean(this.getFactoryBean());
              selfObjectClone.setBean(this.getBean());
              selfObjectClone.setAbstract(this.getAbstract());
              selfObjectClone.setStartMethod(this.getStartMethod());
              selfObjectClone.setStopMethod(this.getStopMethod());
              selfObjectClone.setUpdateMethod(this.getUpdateMethod());
              selfObjectClone.setLowerBindings(this.getLowerBindings());
              selfObjectClone.setUpperBindings(this.getUpperBindings());
              selfObjectClone.setLowerFragments(this.getLowerFragments());
              selfObjectClone.setUpperFragments(this.getUpperFragments());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained deployUnits from ChannelType : ' + this.getDeployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj);
                  }
                }
              }
              if (this.getDictionaryType() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getDictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionaryType());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionaryType from ChannelType : ' + this.getDictionaryType());
                  }
                  clonedSelfObject.setDictionaryType(interObj_0);
                }
              }
              {
                var tmp$3 = this.getSuperTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained superTypes from ChannelType : ' + this.getSuperTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1);
                  }
                }
              }
              var subsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubdictionaryType != null) {
                subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setFactoryBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setAbstract(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStartMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStopMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setUpdateMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_lowerBindings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setLowerBindings(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_upperBindings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setUpperBindings(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_lowerFragments()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setLowerFragments(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_upperFragments()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setUpperFragments(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    this.get__deployUnits().put(obj.internalGetKey(), obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionaryType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    this.get__superTypes().put(obj_0.internalGetKey(), obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getDictionaryType();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ChannelType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ChannelTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getAbstract(), similarObjCasted.getAbstract())) {
                return false;
              }
              if (!Kotlin.equals(this.getStartMethod(), similarObjCasted.getStartMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getStopMethod(), similarObjCasted.getStopMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getUpdateMethod(), similarObjCasted.getUpdateMethod())) {
                return false;
              }
              if (this.getLowerBindings() !== similarObjCasted.getLowerBindings()) {
                return false;
              }
              if (this.getUpperBindings() !== similarObjCasted.getUpperBindings()) {
                return false;
              }
              if (this.getLowerFragments() !== similarObjCasted.getLowerFragments()) {
                return false;
              }
              if (this.getUpperFragments() !== similarObjCasted.getUpperFragments()) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              if (this.get__dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.ChannelType';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ChannelType) || Kotlin.isType(similarObj, _.org.kevoree.impl.ChannelTypeImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$12, tmp$15, tmp$18, tmp$21, tmp$24, tmp$27, tmp$30, tmp$40, tmp$50;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getFactoryBean();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getFactoryBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getBean();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getAbstract();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getAbstract() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStartMethod();
              attVal2 = (tmp$12 = similarObjCasted) != null ? tmp$12.getStartMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$14;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStopMethod();
              attVal2 = (tmp$15 = similarObjCasted) != null ? tmp$15.getStopMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$16;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = this.path()) != null ? tmp$16 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$17;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getUpdateMethod();
              attVal2 = (tmp$18 = similarObjCasted) != null ? tmp$18.getUpdateMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$19;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$19 = this.path()) != null ? tmp$19 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$20;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$20 = this.path()) != null ? tmp$20 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getLowerBindings();
              attVal2 = (tmp$21 = similarObjCasted) != null ? tmp$21.getLowerBindings() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$22;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$22 = this.path()) != null ? tmp$22 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lowerBindings(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$23;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$23 = this.path()) != null ? tmp$23 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lowerBindings(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getUpperBindings();
              attVal2 = (tmp$24 = similarObjCasted) != null ? tmp$24.getUpperBindings() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$25;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$25 = this.path()) != null ? tmp$25 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_upperBindings(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$26;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$26 = this.path()) != null ? tmp$26 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_upperBindings(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getLowerFragments();
              attVal2 = (tmp$27 = similarObjCasted) != null ? tmp$27.getLowerFragments() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$28;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$28 = this.path()) != null ? tmp$28 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lowerFragments(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$29;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$29 = this.path()) != null ? tmp$29 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lowerFragments(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getUpperFragments();
              attVal2 = (tmp$30 = similarObjCasted) != null ? tmp$30.getUpperFragments() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$31;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$31 = this.path()) != null ? tmp$31 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_upperFragments(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$32;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$32 = this.path()) != null ? tmp$32 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_upperFragments(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$33 = this.getDeployUnits().iterator();
                while (tmp$33.hasNext()) {
                  var elem = tmp$33.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$34;
                    ((tmp$34 = hashLoop) != null ? tmp$34 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$35;
                {
                  var tmp$36 = ((tmp$35 = similarObjCasted) != null ? tmp$35 : Kotlin.throwNPE()).getDeployUnits().iterator();
                  while (tmp$36.hasNext()) {
                    var elem_0 = tmp$36.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$37;
                      if (((tmp$37 = hashLoop) != null ? tmp$37 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$38;
                          ((tmp$38 = hashResult) != null ? tmp$38 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$39;
                          ((tmp$39 = hashResult) != null ? tmp$39 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$40 = hashResult) != null ? tmp$40 : Kotlin.throwNPE()) !== 0) {
                var tmp$41, tmp$42;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$41 = this.path()) != null ? tmp$41 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), _.kotlin.toList_1((tmp$42 = hashResult) != null ? tmp$42 : Kotlin.throwNPE()), null));
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$43 = this.getSuperTypes().iterator();
                while (tmp$43.hasNext()) {
                  var elem_1 = tmp$43.next();
                  var elemPath_1 = elem_1.path();
                  if (elemPath_1 != null) {
                    var tmp$44;
                    ((tmp$44 = hashLoop) != null ? tmp$44 : Kotlin.throwNPE()).add(elemPath_1);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$45;
                {
                  var tmp$46 = ((tmp$45 = similarObjCasted) != null ? tmp$45 : Kotlin.throwNPE()).getSuperTypes().iterator();
                  while (tmp$46.hasNext()) {
                    var elem_2 = tmp$46.next();
                    var elemPath_2 = elem_2.path();
                    if (elemPath_2 != null) {
                      var tmp$47;
                      if (((tmp$47 = hashLoop) != null ? tmp$47 : Kotlin.throwNPE()).contains(elemPath_2)) {
                        if (inter) {
                          var tmp$48;
                          ((tmp$48 = hashResult) != null ? tmp$48 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$49;
                          ((tmp$49 = hashResult) != null ? tmp$49 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$50 = hashResult) != null ? tmp$50 : Kotlin.throwNPE()) !== 0) {
                var tmp$51, tmp$52;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$51 = this.path()) != null ? tmp$51 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), _.kotlin.toList_1((tmp$52 = hashResult) != null ? tmp$52 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          NodeNetworkImpl: Kotlin.createClass(classes.c8, classes.cf, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_generated_KMF_ID = '';
              this.$_link_java_cache = null;
              this.$_link = new Kotlin.ComplexHashMap(0);
              this.$_initBy = null;
              this.$_target = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__generated_KMF_ID: function () {
              return this.$_generated_KMF_ID;
            },
            set__generated_KMF_ID: function (tmp$0) {
              this.$_generated_KMF_ID = tmp$0;
            },
            get__link_java_cache: function () {
              return this.$_link_java_cache;
            },
            set__link_java_cache: function (tmp$0) {
              this.$_link_java_cache = tmp$0;
            },
            get__link: function () {
              return this.$_link;
            },
            get__initBy: function () {
              return this.$_initBy;
            },
            set__initBy: function (tmp$0) {
              this.$_initBy = tmp$0;
            },
            get__target: function () {
              return this.$_target;
            },
            set__target: function (tmp$0) {
              this.$_target = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getLink().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubinitBy = this.getInitBy();
              if (subsubsubsubinitBy != null) {
                subsubsubsubinitBy.setRecursiveReadOnly();
              }
              var subsubsubsubtarget = this.getTarget();
              if (subsubsubsubtarget != null) {
                subsubsubsubtarget.setRecursiveReadOnly();
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              {
                var tmp$0 = _.kotlin.iterator(this.get__link());
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              var tmp$1;
              (tmp$1 = this.get__link()) != null ? tmp$1.clear() : null;
              this.set__link_java_cache(null);
              this.set__initBy(null);
              this.set__target(null);
            },
            getGenerated_KMF_ID: function () {
              return this.get__generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (generated_KMF_IDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__generated_KMF_ID(generated_KMF_IDP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getLink: function () {
              return _.kotlin.toList_1(this.get__link().values());
            },
            setLink: function (linkP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (linkP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__link_java_cache(null);
              if (!Kotlin.equals(this.get__link(), linkP)) {
                this.get__link().clear();
                {
                  var tmp$0 = linkP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__link().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = linkP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'link', elem), 'link');
                  }
                }
              }
            },
            addLink: function (linkP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__link_java_cache(null);
              linkP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'link', linkP), 'link');
              var _key_ = linkP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__link().put(_key_, linkP);
            },
            addAllLink: function (linkP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__link_java_cache(null);
              {
                var tmp$0 = linkP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__link().put(_key_, el);
                }
              }
              {
                var tmp$1 = linkP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'link', el_0), 'link');
                }
              }
            },
            removeLink: function (linkP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__link_java_cache(null);
              if (this.get__link().size() !== 0 && this.get__link().containsKey(linkP.internalGetKey())) {
                this.get__link().remove(linkP.internalGetKey());
                var tmp$0;
                ((tmp$0 = linkP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllLink: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getLink()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__link_java_cache(null);
              this.get__link().clear();
            },
            getInitBy: function () {
              return this.get__initBy();
            },
            setInitBy: function (initByP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__initBy(), initByP)) {
                this.set__initBy(initByP);
              }
            },
            getTarget: function () {
              return this.get__target();
            },
            setTarget: function (targetP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__target(), targetP)) {
                this.set__target(targetP);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createNodeNetwork();
              selfObjectClone.setGenerated_KMF_ID(this.getGenerated_KMF_ID());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.getLink().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getLink().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addLink(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained link from NodeNetwork : ' + this.getLink());
                    }
                    clonedSelfObject.addLink(interObj);
                  }
                }
              }
              if (this.getInitBy() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getInitBy()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setInitBy((tmp$2 = this.getInitBy()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getInitBy());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained initBy from NodeNetwork : ' + this.getInitBy());
                  }
                  clonedSelfObject.setInitBy(interObj_0);
                }
              }
              if (this.getTarget() != null) {
                var tmp$3;
                if (mutableOnly && ((tmp$3 = this.getTarget()) != null ? tmp$3 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$4;
                  clonedSelfObject.setTarget((tmp$4 = this.getTarget()) != null ? tmp$4 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_1 = addrs.get(this.getTarget());
                  if (interObj_1 == null) {
                    throw new Kotlin.Exception('Non contained target from NodeNetwork : ' + this.getTarget());
                  }
                  clonedSelfObject.setTarget(interObj_1);
                }
              }
              {
                var tmp$5 = this.getLink().iterator();
                while (tmp$5.hasNext()) {
                  var sub_0 = tmp$5.next();
                  sub_0.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGenerated_KMF_ID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_link()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addLink(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllLink(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeLink(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllLink();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__link().size() !== 0 && this.get__link().containsKey(value)) {
                    var obj = this.get__link().get(value);
                    this.get__link().put(obj.internalGetKey(), obj);
                    this.get__link().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_initBy()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setInitBy(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setInitBy(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setInitBy(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_target()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setTarget(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setTarget(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setTarget(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getGenerated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findLinkByID: function (key) {
              return this.get__link().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_link()) {
                var objFound = this.findLinkByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_initBy()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getInitBy();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getInitBy();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_target()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.getTarget();
                  var tmp$2;
                  tmp$0 = (tmp$2 = obj_0) != null ? tmp$2.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getTarget();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getLink().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findLinkByID(subElement.getGenerated_KMF_ID());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.NodeNetwork) || !Kotlin.isType(similarObj, _.org.kevoree.impl.NodeNetworkImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getGenerated_KMF_ID(), similarObjCasted.getGenerated_KMF_ID())) {
                return false;
              }
              if (this.getLink().size() !== similarObjCasted.getLink().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              result.addAll(this.get__link().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.NodeNetwork';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.NodeNetwork) || Kotlin.isType(similarObj, _.org.kevoree.impl.NodeNetworkImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getGenerated_KMF_ID();
              var tmp$0, tmp$3, tmp$4, tmp$5, tmp$8, tmp$9, tmp$10;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getGenerated_KMF_ID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
              attVal = null;
              attVal = (tmp$3 = this.getInitBy()) != null ? tmp$3.path() : null;
              attVal2 = null;
              attVal2 = (tmp$5 = (tmp$4 = similarObjCasted) != null ? tmp$4.getInitBy() : null) != null ? tmp$5.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$6;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_initBy(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_initBy(), attVal2String, null, null));
                }
              }
              attVal = null;
              attVal = (tmp$8 = this.getTarget()) != null ? tmp$8.path() : null;
              attVal2 = null;
              attVal2 = (tmp$10 = (tmp$9 = similarObjCasted) != null ? tmp$9.getTarget() : null) != null ? tmp$10.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_target(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$12;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_target(), attVal2String, null, null));
                }
              }
              return traces;
            }
          }),
          MBindingImpl: Kotlin.createClass(classes.c8, classes.cy, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_generated_KMF_ID = '';
              this.$_port = null;
              this.$_hub = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__generated_KMF_ID: function () {
              return this.$_generated_KMF_ID;
            },
            set__generated_KMF_ID: function (tmp$0) {
              this.$_generated_KMF_ID = tmp$0;
            },
            get__port: function () {
              return this.$_port;
            },
            set__port: function (tmp$0) {
              this.$_port = tmp$0;
            },
            get__hub: function () {
              return this.$_hub;
            },
            set__hub: function (tmp$0) {
              this.$_hub = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              var subsubsubsubport = this.getPort();
              if (subsubsubsubport != null) {
                subsubsubsubport.setRecursiveReadOnly();
              }
              var subsubsubsubhub = this.getHub();
              if (subsubsubsubhub != null) {
                subsubsubsubhub.setRecursiveReadOnly();
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              this.set__port(null);
              this.set__hub(null);
            },
            getGenerated_KMF_ID: function () {
              return this.get__generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (generated_KMF_IDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__generated_KMF_ID(generated_KMF_IDP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getPort: function () {
              return this.get__port();
            },
            noOpposite_setPort: function (portP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__port(), portP)) {
                this.set__port(portP);
              }
            },
            setPort: function (portP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__port(), portP)) {
                if (this.get__port() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__port()) != null ? tmp$0 : Kotlin.throwNPE()).noOpposite_removeBindings(this);
                }
                if (portP != null) {
                  portP.noOpposite_addBindings(this);
                }
                this.set__port(portP);
              }
            },
            getHub: function () {
              return this.get__hub();
            },
            noOpposite_setHub: function (hubP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__hub(), hubP)) {
                this.set__hub(hubP);
              }
            },
            setHub: function (hubP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__hub(), hubP)) {
                if (this.get__hub() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__hub()) != null ? tmp$0 : Kotlin.throwNPE()).noOpposite_removeBindings(this);
                }
                if (hubP != null) {
                  hubP.noOpposite_addBindings(this);
                }
                this.set__hub(hubP);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createMBinding();
              selfObjectClone.setGenerated_KMF_ID(this.getGenerated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (this.getPort() != null) {
                var tmp$0;
                if (mutableOnly && ((tmp$0 = this.getPort()) != null ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$1;
                  clonedSelfObject.noOpposite_setPort((tmp$1 = this.getPort()) != null ? tmp$1 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.getPort());
                  if (interObj == null) {
                    throw new Kotlin.Exception('Non contained port from MBinding : ' + this.getPort());
                  }
                  clonedSelfObject.noOpposite_setPort(interObj);
                }
              }
              if (this.getHub() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.getHub()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.noOpposite_setHub((tmp$3 = this.getHub()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getHub());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained hub from MBinding : ' + this.getHub());
                  }
                  clonedSelfObject.noOpposite_setHub(interObj_0);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGenerated_KMF_ID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_port()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setPort(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setPort(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setPort(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_hub()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setHub(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setHub(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setHub(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getGenerated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.MBinding) || !Kotlin.isType(similarObj, _.org.kevoree.impl.MBindingImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getGenerated_KMF_ID(), similarObjCasted.getGenerated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.MBinding';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.MBinding) || Kotlin.isType(similarObj, _.org.kevoree.impl.MBindingImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getGenerated_KMF_ID();
              var tmp$0, tmp$3, tmp$4, tmp$5, tmp$8, tmp$9, tmp$10;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getGenerated_KMF_ID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
              attVal = null;
              attVal = (tmp$3 = this.getPort()) != null ? tmp$3.path() : null;
              attVal2 = null;
              attVal2 = (tmp$5 = (tmp$4 = similarObjCasted) != null ? tmp$4.getPort() : null) != null ? tmp$5.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$6;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_port(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_port(), attVal2String, null, null));
                }
              }
              attVal = null;
              attVal = (tmp$8 = this.getHub()) != null ? tmp$8.path() : null;
              attVal2 = null;
              attVal2 = (tmp$10 = (tmp$9 = similarObjCasted) != null ? tmp$9.getHub() : null) != null ? tmp$10.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_hub(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$12;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_hub(), attVal2String, null, null));
                }
              }
              return traces;
            }
          }),
          GroupImpl: Kotlin.createClass(classes.c8, classes.c1g, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_metaData = '';
              this.$_started = true;
              this.$_typeDefinition = null;
              this.$_dictionary = null;
              this.$_subNodes_java_cache = null;
              this.$_subNodes = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__metaData: function () {
              return this.$_metaData;
            },
            set__metaData: function (tmp$0) {
              this.$_metaData = tmp$0;
            },
            get__started: function () {
              return this.$_started;
            },
            set__started: function (tmp$0) {
              this.$_started = tmp$0;
            },
            get__typeDefinition: function () {
              return this.$_typeDefinition;
            },
            set__typeDefinition: function (tmp$0) {
              this.$_typeDefinition = tmp$0;
            },
            get__dictionary: function () {
              return this.$_dictionary;
            },
            set__dictionary: function (tmp$0) {
              this.$_dictionary = tmp$0;
            },
            get__subNodes_java_cache: function () {
              return this.$_subNodes_java_cache;
            },
            set__subNodes_java_cache: function (tmp$0) {
              this.$_subNodes_java_cache = tmp$0;
            },
            get__subNodes: function () {
              return this.$_subNodes;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              var subsubsubsubtypeDefinition = this.getTypeDefinition();
              if (subsubsubsubtypeDefinition != null) {
                subsubsubsubtypeDefinition.setRecursiveReadOnly();
              }
              var subsubsubsubdictionary = this.getDictionary();
              if (subsubsubsubdictionary != null) {
                subsubsubsubdictionary.setRecursiveReadOnly();
              }
              {
                var tmp$0 = this.getSubNodes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0, tmp$1;
              (tmp$0 = this.get__dictionary()) != null ? tmp$0.delete() : null;
              (tmp$1 = this.get__subNodes()) != null ? tmp$1.clear() : null;
              this.set__subNodes_java_cache(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getMetaData: function () {
              return this.get__metaData();
            },
            setMetaData: function (metaDataP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__metaData(metaDataP);
            },
            getStarted: function () {
              return this.get__started();
            },
            setStarted: function (startedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__started(startedP);
            },
            getTypeDefinition: function () {
              return this.get__typeDefinition();
            },
            setTypeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__typeDefinition(), typeDefinitionP)) {
                this.set__typeDefinition(typeDefinitionP);
              }
            },
            getDictionary: function () {
              return this.get__dictionary();
            },
            setDictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionary(), dictionaryP)) {
                if (this.get__dictionary() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionary()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  dictionaryP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionary', null), 'dictionary');
                }
                this.set__dictionary(dictionaryP);
              }
            },
            getSubNodes: function () {
              return _.kotlin.toList_1(this.get__subNodes().values());
            },
            setSubNodes: function (subNodesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (subNodesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__subNodes_java_cache(null);
              if (!Kotlin.equals(this.get__subNodes(), subNodesP)) {
                this.get__subNodes().clear();
                {
                  var tmp$0 = subNodesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__subNodes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addSubNodes: function (subNodesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__subNodes_java_cache(null);
              var _key_ = subNodesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__subNodes().put(_key_, subNodesP);
            },
            addAllSubNodes: function (subNodesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__subNodes_java_cache(null);
              {
                var tmp$0 = subNodesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__subNodes().put(_key_, el);
                }
              }
            },
            removeSubNodes: function (subNodesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__subNodes_java_cache(null);
              if (this.get__subNodes().size() !== 0 && this.get__subNodes().containsKey(subNodesP.internalGetKey())) {
                this.get__subNodes().remove(subNodesP.internalGetKey());
              }
            },
            removeAllSubNodes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getSubNodes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__subNodes_java_cache(null);
              this.get__subNodes().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createGroup();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setMetaData(this.getMetaData());
              selfObjectClone.setStarted(this.getStarted());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionary = this.getDictionary();
              if (subsubsubsubdictionary != null) {
                subsubsubsubdictionary.getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (this.getTypeDefinition() != null) {
                var tmp$0;
                if (mutableOnly && ((tmp$0 = this.getTypeDefinition()) != null ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$1;
                  clonedSelfObject.setTypeDefinition((tmp$1 = this.getTypeDefinition()) != null ? tmp$1 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.getTypeDefinition());
                  if (interObj == null) {
                    throw new Kotlin.Exception('Non contained typeDefinition from Group : ' + this.getTypeDefinition());
                  }
                  clonedSelfObject.setTypeDefinition(interObj);
                }
              }
              if (this.getDictionary() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.getDictionary()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.setDictionary((tmp$3 = this.getDictionary()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionary());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionary from Group : ' + this.getDictionary());
                  }
                  clonedSelfObject.setDictionary(interObj_0);
                }
              }
              {
                var tmp$4 = this.getSubNodes().iterator();
                while (tmp$4.hasNext()) {
                  var sub = tmp$4.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addSubNodes(sub);
                  }
                   else {
                    var interObj_1 = addrs.get(sub);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained subNodes from Group : ' + this.getSubNodes());
                    }
                    clonedSelfObject.addSubNodes(interObj_1);
                  }
                }
              }
              var subsubsubdictionary = this.getDictionary();
              if (subsubsubdictionary != null) {
                subsubsubdictionary.resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setMetaData(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_started()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStarted(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setTypeDefinition(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setTypeDefinition(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setTypeDefinition(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionary(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionary(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionary(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_subNodes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSubNodes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSubNodes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSubNodes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSubNodes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__subNodes().size() !== 0 && this.get__subNodes().containsKey(value)) {
                    var obj = this.get__subNodes().get(value);
                    this.get__subNodes().put(obj.internalGetKey(), obj);
                    this.get__subNodes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findSubNodesByID: function (key) {
              return this.get__subNodes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getTypeDefinition();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getTypeDefinition();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.getDictionary();
                  var tmp$2;
                  tmp$0 = (tmp$2 = obj_0) != null ? tmp$2.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionary();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_subNodes()) {
                var objFound = this.findSubNodesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Group) || !Kotlin.isType(similarObj, _.org.kevoree.impl.GroupImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getMetaData(), similarObjCasted.getMetaData())) {
                return false;
              }
              if (!Kotlin.equals(this.getStarted(), similarObjCasted.getStarted())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionary(), similarObjCasted.getDictionary())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              if (this.get__dictionary() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionary()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Group';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Group) || Kotlin.isType(similarObj, _.org.kevoree.impl.GroupImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$10, tmp$11, tmp$21;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getMetaData();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getMetaData() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStarted();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getStarted() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_started(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_started(), null, attVal2.toString(), null));
                }
              }
              attVal = null;
              attVal = (tmp$9 = this.getTypeDefinition()) != null ? tmp$9.path() : null;
              attVal2 = null;
              attVal2 = (tmp$11 = (tmp$10 = similarObjCasted) != null ? tmp$10.getTypeDefinition() : null) != null ? tmp$11.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$12;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$14 = this.getSubNodes().iterator();
                while (tmp$14.hasNext()) {
                  var elem = tmp$14.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$15;
                    ((tmp$15 = hashLoop) != null ? tmp$15 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$16;
                {
                  var tmp$17 = ((tmp$16 = similarObjCasted) != null ? tmp$16 : Kotlin.throwNPE()).getSubNodes().iterator();
                  while (tmp$17.hasNext()) {
                    var elem_0 = tmp$17.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$18;
                      if (((tmp$18 = hashLoop) != null ? tmp$18 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$19;
                          ((tmp$19 = hashResult) != null ? tmp$19 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$20;
                          ((tmp$20 = hashResult) != null ? tmp$20 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$21 = hashResult) != null ? tmp$21 : Kotlin.throwNPE()) !== 0) {
                var tmp$22, tmp$23;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$22 = this.path()) != null ? tmp$22 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_subNodes(), _.kotlin.toList_1((tmp$23 = hashResult) != null ? tmp$23 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          OperationImpl: Kotlin.createClass(classes.c8, classes.cv, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_parameters_java_cache = null;
              this.$_parameters = new Kotlin.ComplexHashMap(0);
              this.$_returnType = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__parameters_java_cache: function () {
              return this.$_parameters_java_cache;
            },
            set__parameters_java_cache: function (tmp$0) {
              this.$_parameters_java_cache = tmp$0;
            },
            get__parameters: function () {
              return this.$_parameters;
            },
            get__returnType: function () {
              return this.$_returnType;
            },
            set__returnType: function (tmp$0) {
              this.$_returnType = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getParameters().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubreturnType = this.getReturnType();
              if (subsubsubsubreturnType != null) {
                subsubsubsubreturnType.setRecursiveReadOnly();
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              {
                var tmp$0 = _.kotlin.iterator(this.get__parameters());
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              var tmp$1;
              (tmp$1 = this.get__parameters()) != null ? tmp$1.clear() : null;
              this.set__parameters_java_cache(null);
              this.set__returnType(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getParameters: function () {
              return _.kotlin.toList_1(this.get__parameters().values());
            },
            setParameters: function (parametersP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (parametersP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__parameters_java_cache(null);
              if (!Kotlin.equals(this.get__parameters(), parametersP)) {
                this.get__parameters().clear();
                {
                  var tmp$0 = parametersP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__parameters().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = parametersP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'parameters', elem), 'parameters');
                  }
                }
              }
            },
            addParameters: function (parametersP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__parameters_java_cache(null);
              parametersP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'parameters', parametersP), 'parameters');
              var _key_ = parametersP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__parameters().put(_key_, parametersP);
            },
            addAllParameters: function (parametersP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__parameters_java_cache(null);
              {
                var tmp$0 = parametersP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__parameters().put(_key_, el);
                }
              }
              {
                var tmp$1 = parametersP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'parameters', el_0), 'parameters');
                }
              }
            },
            removeParameters: function (parametersP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__parameters_java_cache(null);
              if (this.get__parameters().size() !== 0 && this.get__parameters().containsKey(parametersP.internalGetKey())) {
                this.get__parameters().remove(parametersP.internalGetKey());
                var tmp$0;
                ((tmp$0 = parametersP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllParameters: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getParameters()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__parameters_java_cache(null);
              this.get__parameters().clear();
            },
            getReturnType: function () {
              return this.get__returnType();
            },
            setReturnType: function (returnTypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__returnType(), returnTypeP)) {
                this.set__returnType(returnTypeP);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createOperation();
              selfObjectClone.setName(this.getName());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.getParameters().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getParameters().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addParameters(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained parameters from Operation : ' + this.getParameters());
                    }
                    clonedSelfObject.addParameters(interObj);
                  }
                }
              }
              if (this.getReturnType() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getReturnType()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setReturnType((tmp$2 = this.getReturnType()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getReturnType());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained returnType from Operation : ' + this.getReturnType());
                  }
                  clonedSelfObject.setReturnType(interObj_0);
                }
              }
              {
                var tmp$3 = this.getParameters().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  sub_0.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_parameters()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addParameters(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllParameters(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeParameters(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllParameters();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__parameters().size() !== 0 && this.get__parameters().containsKey(value)) {
                    var obj = this.get__parameters().get(value);
                    this.get__parameters().put(obj.internalGetKey(), obj);
                    this.get__parameters().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_returnType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setReturnType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setReturnType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setReturnType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findParametersByID: function (key) {
              return this.get__parameters().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_parameters()) {
                var objFound = this.findParametersByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  throw new Kotlin.Exception('KMFQL : rejected sucessor' + relationName + ' from Operation');
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_returnType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getReturnType();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getReturnType();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getParameters().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findParametersByID(subElement.getName());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Operation) || !Kotlin.isType(similarObj, _.org.kevoree.impl.OperationImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (this.getParameters().size() !== similarObjCasted.getParameters().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              result.addAll(this.get__parameters().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Operation';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Operation) || Kotlin.isType(similarObj, _.org.kevoree.impl.OperationImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$4, tmp$5;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = null;
              attVal = (tmp$3 = this.getReturnType()) != null ? tmp$3.path() : null;
              attVal2 = null;
              attVal2 = (tmp$5 = (tmp$4 = similarObjCasted) != null ? tmp$4.getReturnType() : null) != null ? tmp$5.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$6;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_returnType(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_returnType(), attVal2String, null, null));
                }
              }
              return traces;
            }
          }),
          ExtraFonctionalPropertyImpl: Kotlin.createClass(classes.c8, classes.c0, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_generated_KMF_ID = '';
              this.$_portTypes_java_cache = null;
              this.$_portTypes = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__generated_KMF_ID: function () {
              return this.$_generated_KMF_ID;
            },
            set__generated_KMF_ID: function (tmp$0) {
              this.$_generated_KMF_ID = tmp$0;
            },
            get__portTypes_java_cache: function () {
              return this.$_portTypes_java_cache;
            },
            set__portTypes_java_cache: function (tmp$0) {
              this.$_portTypes_java_cache = tmp$0;
            },
            get__portTypes: function () {
              return this.$_portTypes;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getPortTypes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__portTypes()) != null ? tmp$0.clear() : null;
              this.set__portTypes_java_cache(null);
            },
            getGenerated_KMF_ID: function () {
              return this.get__generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (generated_KMF_IDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__generated_KMF_ID(generated_KMF_IDP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getPortTypes: function () {
              return _.kotlin.toList_1(this.get__portTypes().values());
            },
            setPortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (portTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__portTypes_java_cache(null);
              if (!Kotlin.equals(this.get__portTypes(), portTypesP)) {
                this.get__portTypes().clear();
                {
                  var tmp$0 = portTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__portTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addPortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__portTypes_java_cache(null);
              var _key_ = portTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__portTypes().put(_key_, portTypesP);
            },
            addAllPortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__portTypes_java_cache(null);
              {
                var tmp$0 = portTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__portTypes().put(_key_, el);
                }
              }
            },
            removePortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__portTypes_java_cache(null);
              if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey(portTypesP.internalGetKey())) {
                this.get__portTypes().remove(portTypesP.internalGetKey());
              }
            },
            removeAllPortTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getPortTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__portTypes_java_cache(null);
              this.get__portTypes().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createExtraFonctionalProperty();
              selfObjectClone.setGenerated_KMF_ID(this.getGenerated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getPortTypes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addPortTypes(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained portTypes from ExtraFonctionalProperty : ' + this.getPortTypes());
                    }
                    clonedSelfObject.addPortTypes(interObj);
                  }
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGenerated_KMF_ID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_portTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addPortTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllPortTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removePortTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllPortTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey(value)) {
                    var obj = this.get__portTypes().get(value);
                    this.get__portTypes().put(obj.internalGetKey(), obj);
                    this.get__portTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getGenerated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findPortTypesByID: function (key) {
              return this.get__portTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_portTypes();
              var optionalDetected = firstSepIndex !== 9;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, _.js.get_size(query));
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0, tmp$1;
              tmp$0 = query;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = _.js.get_size(relationName);
              }
              var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_portTypes()) {
                var objFound = this.findPortTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ExtraFonctionalProperty) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ExtraFonctionalPropertyImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getGenerated_KMF_ID(), similarObjCasted.getGenerated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.ExtraFonctionalProperty';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ExtraFonctionalProperty) || Kotlin.isType(similarObj, _.org.kevoree.impl.ExtraFonctionalPropertyImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getGenerated_KMF_ID();
              var tmp$0, tmp$10;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getGenerated_KMF_ID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$3 = this.getPortTypes().iterator();
                while (tmp$3.hasNext()) {
                  var elem = tmp$3.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$4;
                    ((tmp$4 = hashLoop) != null ? tmp$4 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$5;
                {
                  var tmp$6 = ((tmp$5 = similarObjCasted) != null ? tmp$5 : Kotlin.throwNPE()).getPortTypes().iterator();
                  while (tmp$6.hasNext()) {
                    var elem_0 = tmp$6.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$7;
                      if (((tmp$7 = hashLoop) != null ? tmp$7 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$8;
                          ((tmp$8 = hashResult) != null ? tmp$8 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$9;
                          ((tmp$9 = hashResult) != null ? tmp$9 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$10 = hashResult) != null ? tmp$10 : Kotlin.throwNPE()) !== 0) {
                var tmp$11, tmp$12;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), _.kotlin.toList_1((tmp$12 = hashResult) != null ? tmp$12 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          LifeCycleTypeDefinitionImpl: Kotlin.createClass(classes.c8, classes.cd, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_factoryBean = '';
              this.$_bean = '';
              this.$_abstract = false;
              this.$_startMethod = '';
              this.$_stopMethod = '';
              this.$_updateMethod = '';
              this.$_deployUnits_java_cache = null;
              this.$_deployUnits = new Kotlin.ComplexHashMap(0);
              this.$_dictionaryType = null;
              this.$_superTypes_java_cache = null;
              this.$_superTypes = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__factoryBean: function () {
              return this.$_factoryBean;
            },
            set__factoryBean: function (tmp$0) {
              this.$_factoryBean = tmp$0;
            },
            get__bean: function () {
              return this.$_bean;
            },
            set__bean: function (tmp$0) {
              this.$_bean = tmp$0;
            },
            get__abstract: function () {
              return this.$_abstract;
            },
            set__abstract: function (tmp$0) {
              this.$_abstract = tmp$0;
            },
            get__startMethod: function () {
              return this.$_startMethod;
            },
            set__startMethod: function (tmp$0) {
              this.$_startMethod = tmp$0;
            },
            get__stopMethod: function () {
              return this.$_stopMethod;
            },
            set__stopMethod: function (tmp$0) {
              this.$_stopMethod = tmp$0;
            },
            get__updateMethod: function () {
              return this.$_updateMethod;
            },
            set__updateMethod: function (tmp$0) {
              this.$_updateMethod = tmp$0;
            },
            get__deployUnits_java_cache: function () {
              return this.$_deployUnits_java_cache;
            },
            set__deployUnits_java_cache: function (tmp$0) {
              this.$_deployUnits_java_cache = tmp$0;
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get__dictionaryType: function () {
              return this.$_dictionaryType;
            },
            set__dictionaryType: function (tmp$0) {
              this.$_dictionaryType = tmp$0;
            },
            get__superTypes_java_cache: function () {
              return this.$_superTypes_java_cache;
            },
            set__superTypes_java_cache: function (tmp$0) {
              this.$_superTypes_java_cache = tmp$0;
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.setRecursiveReadOnly();
              }
              {
                var tmp$1 = this.getSuperTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__dictionaryType()) != null ? tmp$0.delete() : null;
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getFactoryBean: function () {
              return this.get__factoryBean();
            },
            setFactoryBean: function (factoryBeanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__factoryBean(factoryBeanP);
            },
            getBean: function () {
              return this.get__bean();
            },
            setBean: function (beanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__bean(beanP);
            },
            getAbstract: function () {
              return this.get__abstract();
            },
            setAbstract: function (abstractP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__abstract(abstractP);
            },
            getStartMethod: function () {
              return this.get__startMethod();
            },
            setStartMethod: function (startMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__startMethod(startMethodP);
            },
            getStopMethod: function () {
              return this.get__stopMethod();
            },
            setStopMethod: function (stopMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__stopMethod(stopMethodP);
            },
            getUpdateMethod: function () {
              return this.get__updateMethod();
            },
            setUpdateMethod: function (updateMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__updateMethod(updateMethodP);
            },
            getDeployUnits: function () {
              return _.kotlin.toList_1(this.get__deployUnits().values());
            },
            setDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (!Kotlin.equals(this.get__deployUnits(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__deployUnits().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              var _key_ = deployUnitsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(deployUnitsP.internalGetKey())) {
                this.get__deployUnits().remove(deployUnitsP.internalGetKey());
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getDeployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__deployUnits_java_cache(null);
              this.get__deployUnits().clear();
            },
            getDictionaryType: function () {
              return this.get__dictionaryType();
            },
            setDictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionaryType(), dictionaryTypeP)) {
                if (this.get__dictionaryType() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  dictionaryTypeP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.set__dictionaryType(dictionaryTypeP);
              }
            },
            getSuperTypes: function () {
              return _.kotlin.toList_1(this.get__superTypes().values());
            },
            setSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (!Kotlin.equals(this.get__superTypes(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__superTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              var _key_ = superTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(superTypesP.internalGetKey())) {
                this.get__superTypes().remove(superTypesP.internalGetKey());
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getSuperTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__superTypes_java_cache(null);
              this.get__superTypes().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createLifeCycleTypeDefinition();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setFactoryBean(this.getFactoryBean());
              selfObjectClone.setBean(this.getBean());
              selfObjectClone.setAbstract(this.getAbstract());
              selfObjectClone.setStartMethod(this.getStartMethod());
              selfObjectClone.setStopMethod(this.getStopMethod());
              selfObjectClone.setUpdateMethod(this.getUpdateMethod());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained deployUnits from LifeCycleTypeDefinition : ' + this.getDeployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj);
                  }
                }
              }
              if (this.getDictionaryType() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getDictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionaryType());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionaryType from LifeCycleTypeDefinition : ' + this.getDictionaryType());
                  }
                  clonedSelfObject.setDictionaryType(interObj_0);
                }
              }
              {
                var tmp$3 = this.getSuperTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained superTypes from LifeCycleTypeDefinition : ' + this.getSuperTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1);
                  }
                }
              }
              var subsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubdictionaryType != null) {
                subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setFactoryBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setAbstract(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStartMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStopMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setUpdateMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    this.get__deployUnits().put(obj.internalGetKey(), obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionaryType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    this.get__superTypes().put(obj_0.internalGetKey(), obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getDictionaryType();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.LifeCycleTypeDefinition) || !Kotlin.isType(similarObj, _.org.kevoree.impl.LifeCycleTypeDefinitionImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getAbstract(), similarObjCasted.getAbstract())) {
                return false;
              }
              if (!Kotlin.equals(this.getStartMethod(), similarObjCasted.getStartMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getStopMethod(), similarObjCasted.getStopMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getUpdateMethod(), similarObjCasted.getUpdateMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              if (this.get__dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.LifeCycleTypeDefinition';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.LifeCycleTypeDefinition) || Kotlin.isType(similarObj, _.org.kevoree.impl.LifeCycleTypeDefinitionImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$12, tmp$15, tmp$18, tmp$28, tmp$38;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getFactoryBean();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getFactoryBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getBean();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getAbstract();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getAbstract() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStartMethod();
              attVal2 = (tmp$12 = similarObjCasted) != null ? tmp$12.getStartMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$14;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStopMethod();
              attVal2 = (tmp$15 = similarObjCasted) != null ? tmp$15.getStopMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$16;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = this.path()) != null ? tmp$16 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$17;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getUpdateMethod();
              attVal2 = (tmp$18 = similarObjCasted) != null ? tmp$18.getUpdateMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$19;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$19 = this.path()) != null ? tmp$19 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$20;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$20 = this.path()) != null ? tmp$20 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$21 = this.getDeployUnits().iterator();
                while (tmp$21.hasNext()) {
                  var elem = tmp$21.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$22;
                    ((tmp$22 = hashLoop) != null ? tmp$22 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$23;
                {
                  var tmp$24 = ((tmp$23 = similarObjCasted) != null ? tmp$23 : Kotlin.throwNPE()).getDeployUnits().iterator();
                  while (tmp$24.hasNext()) {
                    var elem_0 = tmp$24.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$25;
                      if (((tmp$25 = hashLoop) != null ? tmp$25 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$26;
                          ((tmp$26 = hashResult) != null ? tmp$26 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$27;
                          ((tmp$27 = hashResult) != null ? tmp$27 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$28 = hashResult) != null ? tmp$28 : Kotlin.throwNPE()) !== 0) {
                var tmp$29, tmp$30;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$29 = this.path()) != null ? tmp$29 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), _.kotlin.toList_1((tmp$30 = hashResult) != null ? tmp$30 : Kotlin.throwNPE()), null));
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$31 = this.getSuperTypes().iterator();
                while (tmp$31.hasNext()) {
                  var elem_1 = tmp$31.next();
                  var elemPath_1 = elem_1.path();
                  if (elemPath_1 != null) {
                    var tmp$32;
                    ((tmp$32 = hashLoop) != null ? tmp$32 : Kotlin.throwNPE()).add(elemPath_1);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$33;
                {
                  var tmp$34 = ((tmp$33 = similarObjCasted) != null ? tmp$33 : Kotlin.throwNPE()).getSuperTypes().iterator();
                  while (tmp$34.hasNext()) {
                    var elem_2 = tmp$34.next();
                    var elemPath_2 = elem_2.path();
                    if (elemPath_2 != null) {
                      var tmp$35;
                      if (((tmp$35 = hashLoop) != null ? tmp$35 : Kotlin.throwNPE()).contains(elemPath_2)) {
                        if (inter) {
                          var tmp$36;
                          ((tmp$36 = hashResult) != null ? tmp$36 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$37;
                          ((tmp$37 = hashResult) != null ? tmp$37 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$38 = hashResult) != null ? tmp$38 : Kotlin.throwNPE()) !== 0) {
                var tmp$39, tmp$40;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$39 = this.path()) != null ? tmp$39 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), _.kotlin.toList_1((tmp$40 = hashResult) != null ? tmp$40 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          MessagePortTypeImpl: Kotlin.createClass(classes.c8, classes.c18, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_factoryBean = '';
              this.$_bean = '';
              this.$_abstract = false;
              this.$_synchrone = false;
              this.$_deployUnits_java_cache = null;
              this.$_deployUnits = new Kotlin.ComplexHashMap(0);
              this.$_dictionaryType = null;
              this.$_superTypes_java_cache = null;
              this.$_superTypes = new Kotlin.ComplexHashMap(0);
              this.$_filters_java_cache = null;
              this.$_filters = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__factoryBean: function () {
              return this.$_factoryBean;
            },
            set__factoryBean: function (tmp$0) {
              this.$_factoryBean = tmp$0;
            },
            get__bean: function () {
              return this.$_bean;
            },
            set__bean: function (tmp$0) {
              this.$_bean = tmp$0;
            },
            get__abstract: function () {
              return this.$_abstract;
            },
            set__abstract: function (tmp$0) {
              this.$_abstract = tmp$0;
            },
            get__synchrone: function () {
              return this.$_synchrone;
            },
            set__synchrone: function (tmp$0) {
              this.$_synchrone = tmp$0;
            },
            get__deployUnits_java_cache: function () {
              return this.$_deployUnits_java_cache;
            },
            set__deployUnits_java_cache: function (tmp$0) {
              this.$_deployUnits_java_cache = tmp$0;
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get__dictionaryType: function () {
              return this.$_dictionaryType;
            },
            set__dictionaryType: function (tmp$0) {
              this.$_dictionaryType = tmp$0;
            },
            get__superTypes_java_cache: function () {
              return this.$_superTypes_java_cache;
            },
            set__superTypes_java_cache: function (tmp$0) {
              this.$_superTypes_java_cache = tmp$0;
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get__filters_java_cache: function () {
              return this.$_filters_java_cache;
            },
            set__filters_java_cache: function (tmp$0) {
              this.$_filters_java_cache = tmp$0;
            },
            get__filters: function () {
              return this.$_filters;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.setRecursiveReadOnly();
              }
              {
                var tmp$1 = this.getSuperTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              {
                var tmp$2 = this.getFilters().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  sub_1.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0, tmp$1;
              (tmp$0 = this.get__dictionaryType()) != null ? tmp$0.delete() : null;
              (tmp$1 = this.get__filters()) != null ? tmp$1.clear() : null;
              this.set__filters_java_cache(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getFactoryBean: function () {
              return this.get__factoryBean();
            },
            setFactoryBean: function (factoryBeanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__factoryBean(factoryBeanP);
            },
            getBean: function () {
              return this.get__bean();
            },
            setBean: function (beanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__bean(beanP);
            },
            getAbstract: function () {
              return this.get__abstract();
            },
            setAbstract: function (abstractP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__abstract(abstractP);
            },
            getSynchrone: function () {
              return this.get__synchrone();
            },
            setSynchrone: function (synchroneP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__synchrone(synchroneP);
            },
            getDeployUnits: function () {
              return _.kotlin.toList_1(this.get__deployUnits().values());
            },
            setDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (!Kotlin.equals(this.get__deployUnits(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__deployUnits().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              var _key_ = deployUnitsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(deployUnitsP.internalGetKey())) {
                this.get__deployUnits().remove(deployUnitsP.internalGetKey());
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getDeployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__deployUnits_java_cache(null);
              this.get__deployUnits().clear();
            },
            getDictionaryType: function () {
              return this.get__dictionaryType();
            },
            setDictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionaryType(), dictionaryTypeP)) {
                if (this.get__dictionaryType() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  dictionaryTypeP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.set__dictionaryType(dictionaryTypeP);
              }
            },
            getSuperTypes: function () {
              return _.kotlin.toList_1(this.get__superTypes().values());
            },
            setSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (!Kotlin.equals(this.get__superTypes(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__superTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              var _key_ = superTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(superTypesP.internalGetKey())) {
                this.get__superTypes().remove(superTypesP.internalGetKey());
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getSuperTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__superTypes_java_cache(null);
              this.get__superTypes().clear();
            },
            getFilters: function () {
              return _.kotlin.toList_1(this.get__filters().values());
            },
            setFilters: function (filtersP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (filtersP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__filters_java_cache(null);
              if (!Kotlin.equals(this.get__filters(), filtersP)) {
                this.get__filters().clear();
                {
                  var tmp$0 = filtersP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__filters().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addFilters: function (filtersP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__filters_java_cache(null);
              var _key_ = filtersP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__filters().put(_key_, filtersP);
            },
            addAllFilters: function (filtersP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__filters_java_cache(null);
              {
                var tmp$0 = filtersP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__filters().put(_key_, el);
                }
              }
            },
            removeFilters: function (filtersP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__filters_java_cache(null);
              if (this.get__filters().size() !== 0 && this.get__filters().containsKey(filtersP.internalGetKey())) {
                this.get__filters().remove(filtersP.internalGetKey());
              }
            },
            removeAllFilters: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getFilters()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__filters_java_cache(null);
              this.get__filters().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createMessagePortType();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setFactoryBean(this.getFactoryBean());
              selfObjectClone.setBean(this.getBean());
              selfObjectClone.setAbstract(this.getAbstract());
              selfObjectClone.setSynchrone(this.getSynchrone());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained deployUnits from MessagePortType : ' + this.getDeployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj);
                  }
                }
              }
              if (this.getDictionaryType() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getDictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionaryType());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionaryType from MessagePortType : ' + this.getDictionaryType());
                  }
                  clonedSelfObject.setDictionaryType(interObj_0);
                }
              }
              {
                var tmp$3 = this.getSuperTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained superTypes from MessagePortType : ' + this.getSuperTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1);
                  }
                }
              }
              {
                var tmp$4 = this.getFilters().iterator();
                while (tmp$4.hasNext()) {
                  var sub_1 = tmp$4.next();
                  if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                    clonedSelfObject.addFilters(sub_1);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_1);
                    if (interObj_2 == null) {
                      throw new Kotlin.Exception('Non contained filters from MessagePortType : ' + this.getFilters());
                    }
                    clonedSelfObject.addFilters(interObj_2);
                  }
                }
              }
              var subsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubdictionaryType != null) {
                subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setFactoryBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setAbstract(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_synchrone()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setSynchrone(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    this.get__deployUnits().put(obj.internalGetKey(), obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionaryType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    this.get__superTypes().put(obj_0.internalGetKey(), obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_filters()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addFilters(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllFilters(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeFilters(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllFilters();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__filters().size() !== 0 && this.get__filters().containsKey(value)) {
                    var obj_1 = this.get__filters().get(value);
                    this.get__filters().put(obj_1.internalGetKey(), obj_1);
                    this.get__filters().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findFiltersByID: function (key) {
              return this.get__filters().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getDictionaryType();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_filters()) {
                var objFound_1 = this.findFiltersByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_1 != null) {
                  tmp$0 = objFound_1.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_1;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.MessagePortType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.MessagePortTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getAbstract(), similarObjCasted.getAbstract())) {
                return false;
              }
              if (!Kotlin.equals(this.getSynchrone(), similarObjCasted.getSynchrone())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              if (this.get__dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.MessagePortType';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.MessagePortType) || Kotlin.isType(similarObj, _.org.kevoree.impl.MessagePortTypeImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$12, tmp$22, tmp$32, tmp$42;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getFactoryBean();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getFactoryBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getBean();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getAbstract();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getAbstract() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getSynchrone();
              attVal2 = (tmp$12 = similarObjCasted) != null ? tmp$12.getSynchrone() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_synchrone(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$14;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_synchrone(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$15 = this.getDeployUnits().iterator();
                while (tmp$15.hasNext()) {
                  var elem = tmp$15.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$16;
                    ((tmp$16 = hashLoop) != null ? tmp$16 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$17;
                {
                  var tmp$18 = ((tmp$17 = similarObjCasted) != null ? tmp$17 : Kotlin.throwNPE()).getDeployUnits().iterator();
                  while (tmp$18.hasNext()) {
                    var elem_0 = tmp$18.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$19;
                      if (((tmp$19 = hashLoop) != null ? tmp$19 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$20;
                          ((tmp$20 = hashResult) != null ? tmp$20 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$21;
                          ((tmp$21 = hashResult) != null ? tmp$21 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$22 = hashResult) != null ? tmp$22 : Kotlin.throwNPE()) !== 0) {
                var tmp$23, tmp$24;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$23 = this.path()) != null ? tmp$23 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), _.kotlin.toList_1((tmp$24 = hashResult) != null ? tmp$24 : Kotlin.throwNPE()), null));
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$25 = this.getSuperTypes().iterator();
                while (tmp$25.hasNext()) {
                  var elem_1 = tmp$25.next();
                  var elemPath_1 = elem_1.path();
                  if (elemPath_1 != null) {
                    var tmp$26;
                    ((tmp$26 = hashLoop) != null ? tmp$26 : Kotlin.throwNPE()).add(elemPath_1);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$27;
                {
                  var tmp$28 = ((tmp$27 = similarObjCasted) != null ? tmp$27 : Kotlin.throwNPE()).getSuperTypes().iterator();
                  while (tmp$28.hasNext()) {
                    var elem_2 = tmp$28.next();
                    var elemPath_2 = elem_2.path();
                    if (elemPath_2 != null) {
                      var tmp$29;
                      if (((tmp$29 = hashLoop) != null ? tmp$29 : Kotlin.throwNPE()).contains(elemPath_2)) {
                        if (inter) {
                          var tmp$30;
                          ((tmp$30 = hashResult) != null ? tmp$30 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$31;
                          ((tmp$31 = hashResult) != null ? tmp$31 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$32 = hashResult) != null ? tmp$32 : Kotlin.throwNPE()) !== 0) {
                var tmp$33, tmp$34;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$33 = this.path()) != null ? tmp$33 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), _.kotlin.toList_1((tmp$34 = hashResult) != null ? tmp$34 : Kotlin.throwNPE()), null));
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$35 = this.getFilters().iterator();
                while (tmp$35.hasNext()) {
                  var elem_3 = tmp$35.next();
                  var elemPath_3 = elem_3.path();
                  if (elemPath_3 != null) {
                    var tmp$36;
                    ((tmp$36 = hashLoop) != null ? tmp$36 : Kotlin.throwNPE()).add(elemPath_3);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$37;
                {
                  var tmp$38 = ((tmp$37 = similarObjCasted) != null ? tmp$37 : Kotlin.throwNPE()).getFilters().iterator();
                  while (tmp$38.hasNext()) {
                    var elem_4 = tmp$38.next();
                    var elemPath_4 = elem_4.path();
                    if (elemPath_4 != null) {
                      var tmp$39;
                      if (((tmp$39 = hashLoop) != null ? tmp$39 : Kotlin.throwNPE()).contains(elemPath_4)) {
                        if (inter) {
                          var tmp$40;
                          ((tmp$40 = hashResult) != null ? tmp$40 : Kotlin.throwNPE()).add(elemPath_4);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$41;
                          ((tmp$41 = hashResult) != null ? tmp$41 : Kotlin.throwNPE()).add(elemPath_4);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$42 = hashResult) != null ? tmp$42 : Kotlin.throwNPE()) !== 0) {
                var tmp$43, tmp$44;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$43 = this.path()) != null ? tmp$43 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_filters(), _.kotlin.toList_1((tmp$44 = hashResult) != null ? tmp$44 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          ComponentInstanceImpl: Kotlin.createClass(classes.c8, classes.cx, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_metaData = '';
              this.$_started = true;
              this.$_typeDefinition = null;
              this.$_dictionary = null;
              this.$_provided_java_cache = null;
              this.$_provided = new Kotlin.ComplexHashMap(0);
              this.$_required_java_cache = null;
              this.$_required = new Kotlin.ComplexHashMap(0);
              this.$_namespace = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__metaData: function () {
              return this.$_metaData;
            },
            set__metaData: function (tmp$0) {
              this.$_metaData = tmp$0;
            },
            get__started: function () {
              return this.$_started;
            },
            set__started: function (tmp$0) {
              this.$_started = tmp$0;
            },
            get__typeDefinition: function () {
              return this.$_typeDefinition;
            },
            set__typeDefinition: function (tmp$0) {
              this.$_typeDefinition = tmp$0;
            },
            get__dictionary: function () {
              return this.$_dictionary;
            },
            set__dictionary: function (tmp$0) {
              this.$_dictionary = tmp$0;
            },
            get__provided_java_cache: function () {
              return this.$_provided_java_cache;
            },
            set__provided_java_cache: function (tmp$0) {
              this.$_provided_java_cache = tmp$0;
            },
            get__provided: function () {
              return this.$_provided;
            },
            get__required_java_cache: function () {
              return this.$_required_java_cache;
            },
            set__required_java_cache: function (tmp$0) {
              this.$_required_java_cache = tmp$0;
            },
            get__required: function () {
              return this.$_required;
            },
            get__namespace: function () {
              return this.$_namespace;
            },
            set__namespace: function (tmp$0) {
              this.$_namespace = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              var subsubsubsubtypeDefinition = this.getTypeDefinition();
              if (subsubsubsubtypeDefinition != null) {
                subsubsubsubtypeDefinition.setRecursiveReadOnly();
              }
              var subsubsubsubdictionary = this.getDictionary();
              if (subsubsubsubdictionary != null) {
                subsubsubsubdictionary.setRecursiveReadOnly();
              }
              {
                var tmp$0 = this.getProvided().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              {
                var tmp$1 = this.getRequired().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              var subsubsubsubnamespace = this.getNamespace();
              if (subsubsubsubnamespace != null) {
                subsubsubsubnamespace.setRecursiveReadOnly();
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0, tmp$3, tmp$4;
              (tmp$0 = this.get__dictionary()) != null ? tmp$0.delete() : null;
              {
                var tmp$1 = _.kotlin.iterator(this.get__provided());
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              {
                var tmp$2 = _.kotlin.iterator(this.get__required());
                while (tmp$2.hasNext()) {
                  var el_0 = tmp$2.next();
                  _.kotlin.get_value(el_0).delete();
                }
              }
              (tmp$3 = this.get__provided()) != null ? tmp$3.clear() : null;
              this.set__provided_java_cache(null);
              (tmp$4 = this.get__required()) != null ? tmp$4.clear() : null;
              this.set__required_java_cache(null);
              this.set__namespace(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getMetaData: function () {
              return this.get__metaData();
            },
            setMetaData: function (metaDataP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__metaData(metaDataP);
            },
            getStarted: function () {
              return this.get__started();
            },
            setStarted: function (startedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__started(startedP);
            },
            getTypeDefinition: function () {
              return this.get__typeDefinition();
            },
            setTypeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__typeDefinition(), typeDefinitionP)) {
                this.set__typeDefinition(typeDefinitionP);
              }
            },
            getDictionary: function () {
              return this.get__dictionary();
            },
            setDictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionary(), dictionaryP)) {
                if (this.get__dictionary() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionary()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  dictionaryP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionary', null), 'dictionary');
                }
                this.set__dictionary(dictionaryP);
              }
            },
            getProvided: function () {
              return _.kotlin.toList_1(this.get__provided().values());
            },
            setProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (providedP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__provided_java_cache(null);
              if (!Kotlin.equals(this.get__provided(), providedP)) {
                this.get__provided().clear();
                {
                  var tmp$0 = providedP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__provided().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = providedP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', elem), 'provided');
                  }
                }
              }
            },
            addProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__provided_java_cache(null);
              providedP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', providedP), 'provided');
              var _key_ = providedP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__provided().put(_key_, providedP);
            },
            addAllProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__provided_java_cache(null);
              {
                var tmp$0 = providedP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__provided().put(_key_, el);
                }
              }
              {
                var tmp$1 = providedP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', el_0), 'provided');
                }
              }
            },
            removeProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__provided_java_cache(null);
              if (this.get__provided().size() !== 0 && this.get__provided().containsKey(providedP.internalGetKey())) {
                this.get__provided().remove(providedP.internalGetKey());
                var tmp$0;
                ((tmp$0 = providedP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllProvided: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getProvided()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__provided_java_cache(null);
              this.get__provided().clear();
            },
            getRequired: function () {
              return _.kotlin.toList_1(this.get__required().values());
            },
            setRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (requiredP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__required_java_cache(null);
              if (!Kotlin.equals(this.get__required(), requiredP)) {
                this.get__required().clear();
                {
                  var tmp$0 = requiredP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__required().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = requiredP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', elem), 'required');
                  }
                }
              }
            },
            addRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__required_java_cache(null);
              requiredP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', requiredP), 'required');
              var _key_ = requiredP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__required().put(_key_, requiredP);
            },
            addAllRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__required_java_cache(null);
              {
                var tmp$0 = requiredP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__required().put(_key_, el);
                }
              }
              {
                var tmp$1 = requiredP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', el_0), 'required');
                }
              }
            },
            removeRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__required_java_cache(null);
              if (this.get__required().size() !== 0 && this.get__required().containsKey(requiredP.internalGetKey())) {
                this.get__required().remove(requiredP.internalGetKey());
                var tmp$0;
                ((tmp$0 = requiredP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllRequired: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getRequired()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__required_java_cache(null);
              this.get__required().clear();
            },
            getNamespace: function () {
              return this.get__namespace();
            },
            setNamespace: function (namespaceP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__namespace(), namespaceP)) {
                this.set__namespace(namespaceP);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createComponentInstance();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setMetaData(this.getMetaData());
              selfObjectClone.setStarted(this.getStarted());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionary = this.getDictionary();
              if (subsubsubsubdictionary != null) {
                subsubsubsubdictionary.getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$0 = this.getProvided().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$1 = this.getRequired().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (this.getTypeDefinition() != null) {
                var tmp$0;
                if (mutableOnly && ((tmp$0 = this.getTypeDefinition()) != null ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$1;
                  clonedSelfObject.setTypeDefinition((tmp$1 = this.getTypeDefinition()) != null ? tmp$1 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.getTypeDefinition());
                  if (interObj == null) {
                    throw new Kotlin.Exception('Non contained typeDefinition from ComponentInstance : ' + this.getTypeDefinition());
                  }
                  clonedSelfObject.setTypeDefinition(interObj);
                }
              }
              if (this.getDictionary() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.getDictionary()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.setDictionary((tmp$3 = this.getDictionary()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionary());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionary from ComponentInstance : ' + this.getDictionary());
                  }
                  clonedSelfObject.setDictionary(interObj_0);
                }
              }
              {
                var tmp$4 = this.getProvided().iterator();
                while (tmp$4.hasNext()) {
                  var sub = tmp$4.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addProvided(sub);
                  }
                   else {
                    var interObj_1 = addrs.get(sub);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained provided from ComponentInstance : ' + this.getProvided());
                    }
                    clonedSelfObject.addProvided(interObj_1);
                  }
                }
              }
              {
                var tmp$5 = this.getRequired().iterator();
                while (tmp$5.hasNext()) {
                  var sub_0 = tmp$5.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addRequired(sub_0);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_0);
                    if (interObj_2 == null) {
                      throw new Kotlin.Exception('Non contained required from ComponentInstance : ' + this.getRequired());
                    }
                    clonedSelfObject.addRequired(interObj_2);
                  }
                }
              }
              if (this.getNamespace() != null) {
                var tmp$6;
                if (mutableOnly && ((tmp$6 = this.getNamespace()) != null ? tmp$6 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$7;
                  clonedSelfObject.setNamespace((tmp$7 = this.getNamespace()) != null ? tmp$7 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_3 = addrs.get(this.getNamespace());
                  if (interObj_3 == null) {
                    throw new Kotlin.Exception('Non contained namespace from ComponentInstance : ' + this.getNamespace());
                  }
                  clonedSelfObject.setNamespace(interObj_3);
                }
              }
              var subsubsubdictionary = this.getDictionary();
              if (subsubsubdictionary != null) {
                subsubsubdictionary.resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$8 = this.getProvided().iterator();
                while (tmp$8.hasNext()) {
                  var sub_1 = tmp$8.next();
                  sub_1.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$9 = this.getRequired().iterator();
                while (tmp$9.hasNext()) {
                  var sub_2 = tmp$9.next();
                  sub_2.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setMetaData(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_started()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStarted(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setTypeDefinition(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setTypeDefinition(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setTypeDefinition(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionary(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionary(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionary(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addProvided(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllProvided(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeProvided(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllProvided();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__provided().size() !== 0 && this.get__provided().containsKey(value)) {
                    var obj = this.get__provided().get(value);
                    this.get__provided().put(obj.internalGetKey(), obj);
                    this.get__provided().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_required()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addRequired(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllRequired(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeRequired(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRequired();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__required().size() !== 0 && this.get__required().containsKey(value)) {
                    var obj_0 = this.get__required().get(value);
                    this.get__required().put(obj_0.internalGetKey(), obj_0);
                    this.get__required().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_namespace()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setNamespace(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setNamespace(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setNamespace(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findProvidedByID: function (key) {
              return this.get__provided().get(key);
            },
            findRequiredByID: function (key) {
              return this.get__required().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getTypeDefinition();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getTypeDefinition();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.getDictionary();
                  var tmp$2;
                  tmp$0 = (tmp$2 = obj_0) != null ? tmp$2.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionary();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                var objFound = this.findProvidedByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_required()) {
                var objFound_0 = this.findRequiredByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_namespace()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_1 = this.getNamespace();
                  var tmp$3;
                  tmp$0 = (tmp$3 = obj_1) != null ? tmp$3.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getNamespace();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getProvided().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findProvidedByID(subElement.getGenerated_KMF_ID());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              {
                var tmp$1 = this.getRequired().iterator();
                while (tmp$1.hasNext()) {
                  var subElement_0 = tmp$1.next();
                  var foundedElement_0 = similarObjCasted.findRequiredByID(subElement_0.getGenerated_KMF_ID());
                  if (foundedElement_0 == null || !Kotlin.equals(foundedElement_0, subElement_0)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ComponentInstance) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ComponentInstanceImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getMetaData(), similarObjCasted.getMetaData())) {
                return false;
              }
              if (!Kotlin.equals(this.getStarted(), similarObjCasted.getStarted())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionary(), similarObjCasted.getDictionary())) {
                return false;
              }
              if (this.getProvided().size() !== similarObjCasted.getProvided().size()) {
                return false;
              }
              if (this.getRequired().size() !== similarObjCasted.getRequired().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(3);
              if (this.get__dictionary() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionary()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__provided().values());
              result.addAll(this.get__required().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.ComponentInstance';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ComponentInstance) || Kotlin.isType(similarObj, _.org.kevoree.impl.ComponentInstanceImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$10, tmp$11, tmp$14, tmp$15, tmp$16;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getMetaData();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getMetaData() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStarted();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getStarted() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_started(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_started(), null, attVal2.toString(), null));
                }
              }
              attVal = null;
              attVal = (tmp$9 = this.getTypeDefinition()) != null ? tmp$9.path() : null;
              attVal2 = null;
              attVal2 = (tmp$11 = (tmp$10 = similarObjCasted) != null ? tmp$10.getTypeDefinition() : null) != null ? tmp$11.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$12;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                }
              }
              attVal = null;
              attVal = (tmp$14 = this.getNamespace()) != null ? tmp$14.path() : null;
              attVal2 = null;
              attVal2 = (tmp$16 = (tmp$15 = similarObjCasted) != null ? tmp$15.getNamespace() : null) != null ? tmp$16.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$17;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_namespace(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$18;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$18 = this.path()) != null ? tmp$18 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_namespace(), attVal2String, null, null));
                }
              }
              return traces;
            }
          }),
          DictionaryValueImpl: Kotlin.createClass(classes.c8, classes.ct, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_value = '';
              this.$_generated_KMF_ID = '';
              this.$_attribute = null;
              this.$_targetNode = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__value: function () {
              return this.$_value;
            },
            set__value: function (tmp$0) {
              this.$_value = tmp$0;
            },
            get__generated_KMF_ID: function () {
              return this.$_generated_KMF_ID;
            },
            set__generated_KMF_ID: function (tmp$0) {
              this.$_generated_KMF_ID = tmp$0;
            },
            get__attribute: function () {
              return this.$_attribute;
            },
            set__attribute: function (tmp$0) {
              this.$_attribute = tmp$0;
            },
            get__targetNode: function () {
              return this.$_targetNode;
            },
            set__targetNode: function (tmp$0) {
              this.$_targetNode = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              var subsubsubsubattribute = this.getAttribute();
              if (subsubsubsubattribute != null) {
                subsubsubsubattribute.setRecursiveReadOnly();
              }
              var subsubsubsubtargetNode = this.getTargetNode();
              if (subsubsubsubtargetNode != null) {
                subsubsubsubtargetNode.setRecursiveReadOnly();
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              this.set__attribute(null);
              this.set__targetNode(null);
            },
            getValue: function () {
              return this.get__value();
            },
            setValue: function (valueP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__value(valueP);
            },
            getGenerated_KMF_ID: function () {
              return this.get__generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (generated_KMF_IDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__generated_KMF_ID(generated_KMF_IDP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getAttribute: function () {
              return this.get__attribute();
            },
            setAttribute: function (attributeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__attribute(), attributeP)) {
                this.set__attribute(attributeP);
              }
            },
            getTargetNode: function () {
              return this.get__targetNode();
            },
            setTargetNode: function (targetNodeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__targetNode(), targetNodeP)) {
                this.set__targetNode(targetNodeP);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createDictionaryValue();
              selfObjectClone.setValue(this.getValue());
              selfObjectClone.setGenerated_KMF_ID(this.getGenerated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (this.getAttribute() != null) {
                var tmp$0;
                if (mutableOnly && ((tmp$0 = this.getAttribute()) != null ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$1;
                  clonedSelfObject.setAttribute((tmp$1 = this.getAttribute()) != null ? tmp$1 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.getAttribute());
                  if (interObj == null) {
                    throw new Kotlin.Exception('Non contained attribute from DictionaryValue : ' + this.getAttribute());
                  }
                  clonedSelfObject.setAttribute(interObj);
                }
              }
              if (this.getTargetNode() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.getTargetNode()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.setTargetNode((tmp$3 = this.getTargetNode()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getTargetNode());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained targetNode from DictionaryValue : ' + this.getTargetNode());
                  }
                  clonedSelfObject.setTargetNode(interObj_0);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_value()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setValue(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGenerated_KMF_ID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_attribute()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setAttribute(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setAttribute(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setAttribute(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_targetNode()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setTargetNode(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setTargetNode(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setTargetNode(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getGenerated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.DictionaryValue) || !Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryValueImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getValue(), similarObjCasted.getValue())) {
                return false;
              }
              if (!Kotlin.equals(this.getGenerated_KMF_ID(), similarObjCasted.getGenerated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.DictionaryValue';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.DictionaryValue) || Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryValueImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getValue();
              var tmp$0, tmp$3, tmp$6, tmp$7, tmp$8, tmp$11, tmp$12, tmp$13;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getValue() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_value(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_value(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getGenerated_KMF_ID();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getGenerated_KMF_ID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
              attVal = null;
              attVal = (tmp$6 = this.getAttribute()) != null ? tmp$6.path() : null;
              attVal2 = null;
              attVal2 = (tmp$8 = (tmp$7 = similarObjCasted) != null ? tmp$7.getAttribute() : null) != null ? tmp$8.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$9;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_attribute(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_attribute(), attVal2String, null, null));
                }
              }
              attVal = null;
              attVal = (tmp$11 = this.getTargetNode()) != null ? tmp$11.path() : null;
              attVal2 = null;
              attVal2 = (tmp$13 = (tmp$12 = similarObjCasted) != null ? tmp$12.getTargetNode() : null) != null ? tmp$13.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$14;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_targetNode(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$15;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$15 = this.path()) != null ? tmp$15 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_targetNode(), attVal2String, null, null));
                }
              }
              return traces;
            }
          }),
          GroupTypeImpl: Kotlin.createClass(classes.c8, classes.c1e, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_factoryBean = '';
              this.$_bean = '';
              this.$_abstract = false;
              this.$_startMethod = '';
              this.$_stopMethod = '';
              this.$_updateMethod = '';
              this.$_deployUnits_java_cache = null;
              this.$_deployUnits = new Kotlin.ComplexHashMap(0);
              this.$_dictionaryType = null;
              this.$_superTypes_java_cache = null;
              this.$_superTypes = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__factoryBean: function () {
              return this.$_factoryBean;
            },
            set__factoryBean: function (tmp$0) {
              this.$_factoryBean = tmp$0;
            },
            get__bean: function () {
              return this.$_bean;
            },
            set__bean: function (tmp$0) {
              this.$_bean = tmp$0;
            },
            get__abstract: function () {
              return this.$_abstract;
            },
            set__abstract: function (tmp$0) {
              this.$_abstract = tmp$0;
            },
            get__startMethod: function () {
              return this.$_startMethod;
            },
            set__startMethod: function (tmp$0) {
              this.$_startMethod = tmp$0;
            },
            get__stopMethod: function () {
              return this.$_stopMethod;
            },
            set__stopMethod: function (tmp$0) {
              this.$_stopMethod = tmp$0;
            },
            get__updateMethod: function () {
              return this.$_updateMethod;
            },
            set__updateMethod: function (tmp$0) {
              this.$_updateMethod = tmp$0;
            },
            get__deployUnits_java_cache: function () {
              return this.$_deployUnits_java_cache;
            },
            set__deployUnits_java_cache: function (tmp$0) {
              this.$_deployUnits_java_cache = tmp$0;
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get__dictionaryType: function () {
              return this.$_dictionaryType;
            },
            set__dictionaryType: function (tmp$0) {
              this.$_dictionaryType = tmp$0;
            },
            get__superTypes_java_cache: function () {
              return this.$_superTypes_java_cache;
            },
            set__superTypes_java_cache: function (tmp$0) {
              this.$_superTypes_java_cache = tmp$0;
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.setRecursiveReadOnly();
              }
              {
                var tmp$1 = this.getSuperTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__dictionaryType()) != null ? tmp$0.delete() : null;
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getFactoryBean: function () {
              return this.get__factoryBean();
            },
            setFactoryBean: function (factoryBeanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__factoryBean(factoryBeanP);
            },
            getBean: function () {
              return this.get__bean();
            },
            setBean: function (beanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__bean(beanP);
            },
            getAbstract: function () {
              return this.get__abstract();
            },
            setAbstract: function (abstractP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__abstract(abstractP);
            },
            getStartMethod: function () {
              return this.get__startMethod();
            },
            setStartMethod: function (startMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__startMethod(startMethodP);
            },
            getStopMethod: function () {
              return this.get__stopMethod();
            },
            setStopMethod: function (stopMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__stopMethod(stopMethodP);
            },
            getUpdateMethod: function () {
              return this.get__updateMethod();
            },
            setUpdateMethod: function (updateMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__updateMethod(updateMethodP);
            },
            getDeployUnits: function () {
              return _.kotlin.toList_1(this.get__deployUnits().values());
            },
            setDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (!Kotlin.equals(this.get__deployUnits(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__deployUnits().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              var _key_ = deployUnitsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(deployUnitsP.internalGetKey())) {
                this.get__deployUnits().remove(deployUnitsP.internalGetKey());
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getDeployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__deployUnits_java_cache(null);
              this.get__deployUnits().clear();
            },
            getDictionaryType: function () {
              return this.get__dictionaryType();
            },
            setDictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionaryType(), dictionaryTypeP)) {
                if (this.get__dictionaryType() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  dictionaryTypeP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.set__dictionaryType(dictionaryTypeP);
              }
            },
            getSuperTypes: function () {
              return _.kotlin.toList_1(this.get__superTypes().values());
            },
            setSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (!Kotlin.equals(this.get__superTypes(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__superTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              var _key_ = superTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(superTypesP.internalGetKey())) {
                this.get__superTypes().remove(superTypesP.internalGetKey());
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getSuperTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__superTypes_java_cache(null);
              this.get__superTypes().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createGroupType();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setFactoryBean(this.getFactoryBean());
              selfObjectClone.setBean(this.getBean());
              selfObjectClone.setAbstract(this.getAbstract());
              selfObjectClone.setStartMethod(this.getStartMethod());
              selfObjectClone.setStopMethod(this.getStopMethod());
              selfObjectClone.setUpdateMethod(this.getUpdateMethod());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained deployUnits from GroupType : ' + this.getDeployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj);
                  }
                }
              }
              if (this.getDictionaryType() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getDictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionaryType());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionaryType from GroupType : ' + this.getDictionaryType());
                  }
                  clonedSelfObject.setDictionaryType(interObj_0);
                }
              }
              {
                var tmp$3 = this.getSuperTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained superTypes from GroupType : ' + this.getSuperTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1);
                  }
                }
              }
              var subsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubdictionaryType != null) {
                subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setFactoryBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setAbstract(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStartMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStopMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setUpdateMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    this.get__deployUnits().put(obj.internalGetKey(), obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionaryType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    this.get__superTypes().put(obj_0.internalGetKey(), obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getDictionaryType();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.GroupType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.GroupTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getAbstract(), similarObjCasted.getAbstract())) {
                return false;
              }
              if (!Kotlin.equals(this.getStartMethod(), similarObjCasted.getStartMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getStopMethod(), similarObjCasted.getStopMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getUpdateMethod(), similarObjCasted.getUpdateMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              if (this.get__dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.GroupType';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.GroupType) || Kotlin.isType(similarObj, _.org.kevoree.impl.GroupTypeImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$12, tmp$15, tmp$18, tmp$28, tmp$38;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getFactoryBean();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getFactoryBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getBean();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getAbstract();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getAbstract() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStartMethod();
              attVal2 = (tmp$12 = similarObjCasted) != null ? tmp$12.getStartMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$14;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStopMethod();
              attVal2 = (tmp$15 = similarObjCasted) != null ? tmp$15.getStopMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$16;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = this.path()) != null ? tmp$16 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$17;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getUpdateMethod();
              attVal2 = (tmp$18 = similarObjCasted) != null ? tmp$18.getUpdateMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$19;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$19 = this.path()) != null ? tmp$19 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$20;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$20 = this.path()) != null ? tmp$20 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$21 = this.getDeployUnits().iterator();
                while (tmp$21.hasNext()) {
                  var elem = tmp$21.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$22;
                    ((tmp$22 = hashLoop) != null ? tmp$22 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$23;
                {
                  var tmp$24 = ((tmp$23 = similarObjCasted) != null ? tmp$23 : Kotlin.throwNPE()).getDeployUnits().iterator();
                  while (tmp$24.hasNext()) {
                    var elem_0 = tmp$24.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$25;
                      if (((tmp$25 = hashLoop) != null ? tmp$25 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$26;
                          ((tmp$26 = hashResult) != null ? tmp$26 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$27;
                          ((tmp$27 = hashResult) != null ? tmp$27 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$28 = hashResult) != null ? tmp$28 : Kotlin.throwNPE()) !== 0) {
                var tmp$29, tmp$30;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$29 = this.path()) != null ? tmp$29 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), _.kotlin.toList_1((tmp$30 = hashResult) != null ? tmp$30 : Kotlin.throwNPE()), null));
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$31 = this.getSuperTypes().iterator();
                while (tmp$31.hasNext()) {
                  var elem_1 = tmp$31.next();
                  var elemPath_1 = elem_1.path();
                  if (elemPath_1 != null) {
                    var tmp$32;
                    ((tmp$32 = hashLoop) != null ? tmp$32 : Kotlin.throwNPE()).add(elemPath_1);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$33;
                {
                  var tmp$34 = ((tmp$33 = similarObjCasted) != null ? tmp$33 : Kotlin.throwNPE()).getSuperTypes().iterator();
                  while (tmp$34.hasNext()) {
                    var elem_2 = tmp$34.next();
                    var elemPath_2 = elem_2.path();
                    if (elemPath_2 != null) {
                      var tmp$35;
                      if (((tmp$35 = hashLoop) != null ? tmp$35 : Kotlin.throwNPE()).contains(elemPath_2)) {
                        if (inter) {
                          var tmp$36;
                          ((tmp$36 = hashResult) != null ? tmp$36 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$37;
                          ((tmp$37 = hashResult) != null ? tmp$37 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$38 = hashResult) != null ? tmp$38 : Kotlin.throwNPE()) !== 0) {
                var tmp$39, tmp$40;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$39 = this.path()) != null ? tmp$39 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), _.kotlin.toList_1((tmp$40 = hashResult) != null ? tmp$40 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          NodeTypeImpl: Kotlin.createClass(classes.c8, classes.c9, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_factoryBean = '';
              this.$_bean = '';
              this.$_abstract = false;
              this.$_startMethod = '';
              this.$_stopMethod = '';
              this.$_updateMethod = '';
              this.$_deployUnits_java_cache = null;
              this.$_deployUnits = new Kotlin.ComplexHashMap(0);
              this.$_dictionaryType = null;
              this.$_superTypes_java_cache = null;
              this.$_superTypes = new Kotlin.ComplexHashMap(0);
              this.$_managedPrimitiveTypes_java_cache = null;
              this.$_managedPrimitiveTypes = new Kotlin.ComplexHashMap(0);
              this.$_managedPrimitiveTypeRefs_java_cache = null;
              this.$_managedPrimitiveTypeRefs = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__factoryBean: function () {
              return this.$_factoryBean;
            },
            set__factoryBean: function (tmp$0) {
              this.$_factoryBean = tmp$0;
            },
            get__bean: function () {
              return this.$_bean;
            },
            set__bean: function (tmp$0) {
              this.$_bean = tmp$0;
            },
            get__abstract: function () {
              return this.$_abstract;
            },
            set__abstract: function (tmp$0) {
              this.$_abstract = tmp$0;
            },
            get__startMethod: function () {
              return this.$_startMethod;
            },
            set__startMethod: function (tmp$0) {
              this.$_startMethod = tmp$0;
            },
            get__stopMethod: function () {
              return this.$_stopMethod;
            },
            set__stopMethod: function (tmp$0) {
              this.$_stopMethod = tmp$0;
            },
            get__updateMethod: function () {
              return this.$_updateMethod;
            },
            set__updateMethod: function (tmp$0) {
              this.$_updateMethod = tmp$0;
            },
            get__deployUnits_java_cache: function () {
              return this.$_deployUnits_java_cache;
            },
            set__deployUnits_java_cache: function (tmp$0) {
              this.$_deployUnits_java_cache = tmp$0;
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get__dictionaryType: function () {
              return this.$_dictionaryType;
            },
            set__dictionaryType: function (tmp$0) {
              this.$_dictionaryType = tmp$0;
            },
            get__superTypes_java_cache: function () {
              return this.$_superTypes_java_cache;
            },
            set__superTypes_java_cache: function (tmp$0) {
              this.$_superTypes_java_cache = tmp$0;
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get__managedPrimitiveTypes_java_cache: function () {
              return this.$_managedPrimitiveTypes_java_cache;
            },
            set__managedPrimitiveTypes_java_cache: function (tmp$0) {
              this.$_managedPrimitiveTypes_java_cache = tmp$0;
            },
            get__managedPrimitiveTypes: function () {
              return this.$_managedPrimitiveTypes;
            },
            get__managedPrimitiveTypeRefs_java_cache: function () {
              return this.$_managedPrimitiveTypeRefs_java_cache;
            },
            set__managedPrimitiveTypeRefs_java_cache: function (tmp$0) {
              this.$_managedPrimitiveTypeRefs_java_cache = tmp$0;
            },
            get__managedPrimitiveTypeRefs: function () {
              return this.$_managedPrimitiveTypeRefs;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.setRecursiveReadOnly();
              }
              {
                var tmp$1 = this.getSuperTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              {
                var tmp$2 = this.getManagedPrimitiveTypes().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  sub_1.setRecursiveReadOnly();
                }
              }
              {
                var tmp$3 = this.getManagedPrimitiveTypeRefs().iterator();
                while (tmp$3.hasNext()) {
                  var sub_2 = tmp$3.next();
                  sub_2.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0, tmp$2, tmp$3;
              (tmp$0 = this.get__dictionaryType()) != null ? tmp$0.delete() : null;
              {
                var tmp$1 = _.kotlin.iterator(this.get__managedPrimitiveTypeRefs());
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              (tmp$2 = this.get__managedPrimitiveTypes()) != null ? tmp$2.clear() : null;
              this.set__managedPrimitiveTypes_java_cache(null);
              (tmp$3 = this.get__managedPrimitiveTypeRefs()) != null ? tmp$3.clear() : null;
              this.set__managedPrimitiveTypeRefs_java_cache(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getFactoryBean: function () {
              return this.get__factoryBean();
            },
            setFactoryBean: function (factoryBeanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__factoryBean(factoryBeanP);
            },
            getBean: function () {
              return this.get__bean();
            },
            setBean: function (beanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__bean(beanP);
            },
            getAbstract: function () {
              return this.get__abstract();
            },
            setAbstract: function (abstractP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__abstract(abstractP);
            },
            getStartMethod: function () {
              return this.get__startMethod();
            },
            setStartMethod: function (startMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__startMethod(startMethodP);
            },
            getStopMethod: function () {
              return this.get__stopMethod();
            },
            setStopMethod: function (stopMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__stopMethod(stopMethodP);
            },
            getUpdateMethod: function () {
              return this.get__updateMethod();
            },
            setUpdateMethod: function (updateMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__updateMethod(updateMethodP);
            },
            getDeployUnits: function () {
              return _.kotlin.toList_1(this.get__deployUnits().values());
            },
            setDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (!Kotlin.equals(this.get__deployUnits(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__deployUnits().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              var _key_ = deployUnitsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(deployUnitsP.internalGetKey())) {
                this.get__deployUnits().remove(deployUnitsP.internalGetKey());
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getDeployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__deployUnits_java_cache(null);
              this.get__deployUnits().clear();
            },
            getDictionaryType: function () {
              return this.get__dictionaryType();
            },
            setDictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionaryType(), dictionaryTypeP)) {
                if (this.get__dictionaryType() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  dictionaryTypeP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.set__dictionaryType(dictionaryTypeP);
              }
            },
            getSuperTypes: function () {
              return _.kotlin.toList_1(this.get__superTypes().values());
            },
            setSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (!Kotlin.equals(this.get__superTypes(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__superTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              var _key_ = superTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(superTypesP.internalGetKey())) {
                this.get__superTypes().remove(superTypesP.internalGetKey());
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getSuperTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__superTypes_java_cache(null);
              this.get__superTypes().clear();
            },
            getManagedPrimitiveTypes: function () {
              return _.kotlin.toList_1(this.get__managedPrimitiveTypes().values());
            },
            setManagedPrimitiveTypes: function (managedPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (managedPrimitiveTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__managedPrimitiveTypes_java_cache(null);
              if (!Kotlin.equals(this.get__managedPrimitiveTypes(), managedPrimitiveTypesP)) {
                this.get__managedPrimitiveTypes().clear();
                {
                  var tmp$0 = managedPrimitiveTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__managedPrimitiveTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addManagedPrimitiveTypes: function (managedPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__managedPrimitiveTypes_java_cache(null);
              var _key_ = managedPrimitiveTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__managedPrimitiveTypes().put(_key_, managedPrimitiveTypesP);
            },
            addAllManagedPrimitiveTypes: function (managedPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__managedPrimitiveTypes_java_cache(null);
              {
                var tmp$0 = managedPrimitiveTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__managedPrimitiveTypes().put(_key_, el);
                }
              }
            },
            removeManagedPrimitiveTypes: function (managedPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__managedPrimitiveTypes_java_cache(null);
              if (this.get__managedPrimitiveTypes().size() !== 0 && this.get__managedPrimitiveTypes().containsKey(managedPrimitiveTypesP.internalGetKey())) {
                this.get__managedPrimitiveTypes().remove(managedPrimitiveTypesP.internalGetKey());
              }
            },
            removeAllManagedPrimitiveTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getManagedPrimitiveTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__managedPrimitiveTypes_java_cache(null);
              this.get__managedPrimitiveTypes().clear();
            },
            getManagedPrimitiveTypeRefs: function () {
              return _.kotlin.toList_1(this.get__managedPrimitiveTypeRefs().values());
            },
            setManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (managedPrimitiveTypeRefsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__managedPrimitiveTypeRefs_java_cache(null);
              if (!Kotlin.equals(this.get__managedPrimitiveTypeRefs(), managedPrimitiveTypeRefsP)) {
                this.get__managedPrimitiveTypeRefs().clear();
                {
                  var tmp$0 = managedPrimitiveTypeRefsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__managedPrimitiveTypeRefs().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = managedPrimitiveTypeRefsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'managedPrimitiveTypeRefs', elem), 'managedPrimitiveTypeRefs');
                  }
                }
              }
            },
            addManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__managedPrimitiveTypeRefs_java_cache(null);
              managedPrimitiveTypeRefsP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'managedPrimitiveTypeRefs', managedPrimitiveTypeRefsP), 'managedPrimitiveTypeRefs');
              var _key_ = managedPrimitiveTypeRefsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__managedPrimitiveTypeRefs().put(_key_, managedPrimitiveTypeRefsP);
            },
            addAllManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__managedPrimitiveTypeRefs_java_cache(null);
              {
                var tmp$0 = managedPrimitiveTypeRefsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__managedPrimitiveTypeRefs().put(_key_, el);
                }
              }
              {
                var tmp$1 = managedPrimitiveTypeRefsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'managedPrimitiveTypeRefs', el_0), 'managedPrimitiveTypeRefs');
                }
              }
            },
            removeManagedPrimitiveTypeRefs: function (managedPrimitiveTypeRefsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__managedPrimitiveTypeRefs_java_cache(null);
              if (this.get__managedPrimitiveTypeRefs().size() !== 0 && this.get__managedPrimitiveTypeRefs().containsKey(managedPrimitiveTypeRefsP.internalGetKey())) {
                this.get__managedPrimitiveTypeRefs().remove(managedPrimitiveTypeRefsP.internalGetKey());
                var tmp$0;
                ((tmp$0 = managedPrimitiveTypeRefsP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllManagedPrimitiveTypeRefs: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getManagedPrimitiveTypeRefs()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__managedPrimitiveTypeRefs_java_cache(null);
              this.get__managedPrimitiveTypeRefs().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createNodeType();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setFactoryBean(this.getFactoryBean());
              selfObjectClone.setBean(this.getBean());
              selfObjectClone.setAbstract(this.getAbstract());
              selfObjectClone.setStartMethod(this.getStartMethod());
              selfObjectClone.setStopMethod(this.getStopMethod());
              selfObjectClone.setUpdateMethod(this.getUpdateMethod());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$0 = this.getManagedPrimitiveTypeRefs().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained deployUnits from NodeType : ' + this.getDeployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj);
                  }
                }
              }
              if (this.getDictionaryType() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getDictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionaryType());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionaryType from NodeType : ' + this.getDictionaryType());
                  }
                  clonedSelfObject.setDictionaryType(interObj_0);
                }
              }
              {
                var tmp$3 = this.getSuperTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained superTypes from NodeType : ' + this.getSuperTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1);
                  }
                }
              }
              {
                var tmp$4 = this.getManagedPrimitiveTypes().iterator();
                while (tmp$4.hasNext()) {
                  var sub_1 = tmp$4.next();
                  if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                    clonedSelfObject.addManagedPrimitiveTypes(sub_1);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_1);
                    if (interObj_2 == null) {
                      throw new Kotlin.Exception('Non contained managedPrimitiveTypes from NodeType : ' + this.getManagedPrimitiveTypes());
                    }
                    clonedSelfObject.addManagedPrimitiveTypes(interObj_2);
                  }
                }
              }
              {
                var tmp$5 = this.getManagedPrimitiveTypeRefs().iterator();
                while (tmp$5.hasNext()) {
                  var sub_2 = tmp$5.next();
                  if (mutableOnly && sub_2.isRecursiveReadOnly()) {
                    clonedSelfObject.addManagedPrimitiveTypeRefs(sub_2);
                  }
                   else {
                    var interObj_3 = addrs.get(sub_2);
                    if (interObj_3 == null) {
                      throw new Kotlin.Exception('Non contained managedPrimitiveTypeRefs from NodeType : ' + this.getManagedPrimitiveTypeRefs());
                    }
                    clonedSelfObject.addManagedPrimitiveTypeRefs(interObj_3);
                  }
                }
              }
              var subsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubdictionaryType != null) {
                subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$6 = this.getManagedPrimitiveTypeRefs().iterator();
                while (tmp$6.hasNext()) {
                  var sub_3 = tmp$6.next();
                  sub_3.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setFactoryBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setAbstract(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStartMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStopMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setUpdateMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    this.get__deployUnits().put(obj.internalGetKey(), obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionaryType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    this.get__superTypes().put(obj_0.internalGetKey(), obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addManagedPrimitiveTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllManagedPrimitiveTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeManagedPrimitiveTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllManagedPrimitiveTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__managedPrimitiveTypes().size() !== 0 && this.get__managedPrimitiveTypes().containsKey(value)) {
                    var obj_1 = this.get__managedPrimitiveTypes().get(value);
                    this.get__managedPrimitiveTypes().put(obj_1.internalGetKey(), obj_1);
                    this.get__managedPrimitiveTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addManagedPrimitiveTypeRefs(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllManagedPrimitiveTypeRefs(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeManagedPrimitiveTypeRefs(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllManagedPrimitiveTypeRefs();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__managedPrimitiveTypeRefs().size() !== 0 && this.get__managedPrimitiveTypeRefs().containsKey(value)) {
                    var obj_2 = this.get__managedPrimitiveTypeRefs().get(value);
                    this.get__managedPrimitiveTypeRefs().put(obj_2.internalGetKey(), obj_2);
                    this.get__managedPrimitiveTypeRefs().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findManagedPrimitiveTypesByID: function (key) {
              return this.get__managedPrimitiveTypes().get(key);
            },
            findManagedPrimitiveTypeRefsByID: function (key) {
              return this.get__managedPrimitiveTypeRefs().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getDictionaryType();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes()) {
                var objFound_1 = this.findManagedPrimitiveTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_1 != null) {
                  throw new Kotlin.Exception('KMFQL : rejected sucessor' + relationName + ' from NodeType');
                }
                 else {
                  tmp$0 = objFound_1;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypeRefs()) {
                var objFound_2 = this.findManagedPrimitiveTypeRefsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_2 != null) {
                  throw new Kotlin.Exception('KMFQL : rejected sucessor' + relationName + ' from NodeType');
                }
                 else {
                  tmp$0 = objFound_2;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getManagedPrimitiveTypeRefs().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findManagedPrimitiveTypeRefsByID(subElement.getGenerated_KMF_ID());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.NodeType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.NodeTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getAbstract(), similarObjCasted.getAbstract())) {
                return false;
              }
              if (!Kotlin.equals(this.getStartMethod(), similarObjCasted.getStartMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getStopMethod(), similarObjCasted.getStopMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getUpdateMethod(), similarObjCasted.getUpdateMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                return false;
              }
              if (this.getManagedPrimitiveTypeRefs().size() !== similarObjCasted.getManagedPrimitiveTypeRefs().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(2);
              if (this.get__dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__managedPrimitiveTypeRefs().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.NodeType';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.NodeType) || Kotlin.isType(similarObj, _.org.kevoree.impl.NodeTypeImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$12, tmp$15, tmp$18, tmp$28, tmp$38, tmp$48;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getFactoryBean();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getFactoryBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getBean();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getAbstract();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getAbstract() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStartMethod();
              attVal2 = (tmp$12 = similarObjCasted) != null ? tmp$12.getStartMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$14;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStopMethod();
              attVal2 = (tmp$15 = similarObjCasted) != null ? tmp$15.getStopMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$16;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = this.path()) != null ? tmp$16 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$17;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getUpdateMethod();
              attVal2 = (tmp$18 = similarObjCasted) != null ? tmp$18.getUpdateMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$19;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$19 = this.path()) != null ? tmp$19 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$20;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$20 = this.path()) != null ? tmp$20 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$21 = this.getDeployUnits().iterator();
                while (tmp$21.hasNext()) {
                  var elem = tmp$21.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$22;
                    ((tmp$22 = hashLoop) != null ? tmp$22 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$23;
                {
                  var tmp$24 = ((tmp$23 = similarObjCasted) != null ? tmp$23 : Kotlin.throwNPE()).getDeployUnits().iterator();
                  while (tmp$24.hasNext()) {
                    var elem_0 = tmp$24.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$25;
                      if (((tmp$25 = hashLoop) != null ? tmp$25 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$26;
                          ((tmp$26 = hashResult) != null ? tmp$26 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$27;
                          ((tmp$27 = hashResult) != null ? tmp$27 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$28 = hashResult) != null ? tmp$28 : Kotlin.throwNPE()) !== 0) {
                var tmp$29, tmp$30;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$29 = this.path()) != null ? tmp$29 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), _.kotlin.toList_1((tmp$30 = hashResult) != null ? tmp$30 : Kotlin.throwNPE()), null));
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$31 = this.getSuperTypes().iterator();
                while (tmp$31.hasNext()) {
                  var elem_1 = tmp$31.next();
                  var elemPath_1 = elem_1.path();
                  if (elemPath_1 != null) {
                    var tmp$32;
                    ((tmp$32 = hashLoop) != null ? tmp$32 : Kotlin.throwNPE()).add(elemPath_1);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$33;
                {
                  var tmp$34 = ((tmp$33 = similarObjCasted) != null ? tmp$33 : Kotlin.throwNPE()).getSuperTypes().iterator();
                  while (tmp$34.hasNext()) {
                    var elem_2 = tmp$34.next();
                    var elemPath_2 = elem_2.path();
                    if (elemPath_2 != null) {
                      var tmp$35;
                      if (((tmp$35 = hashLoop) != null ? tmp$35 : Kotlin.throwNPE()).contains(elemPath_2)) {
                        if (inter) {
                          var tmp$36;
                          ((tmp$36 = hashResult) != null ? tmp$36 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$37;
                          ((tmp$37 = hashResult) != null ? tmp$37 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$38 = hashResult) != null ? tmp$38 : Kotlin.throwNPE()) !== 0) {
                var tmp$39, tmp$40;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$39 = this.path()) != null ? tmp$39 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), _.kotlin.toList_1((tmp$40 = hashResult) != null ? tmp$40 : Kotlin.throwNPE()), null));
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$41 = this.getManagedPrimitiveTypes().iterator();
                while (tmp$41.hasNext()) {
                  var elem_3 = tmp$41.next();
                  var elemPath_3 = elem_3.path();
                  if (elemPath_3 != null) {
                    var tmp$42;
                    ((tmp$42 = hashLoop) != null ? tmp$42 : Kotlin.throwNPE()).add(elemPath_3);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$43;
                {
                  var tmp$44 = ((tmp$43 = similarObjCasted) != null ? tmp$43 : Kotlin.throwNPE()).getManagedPrimitiveTypes().iterator();
                  while (tmp$44.hasNext()) {
                    var elem_4 = tmp$44.next();
                    var elemPath_4 = elem_4.path();
                    if (elemPath_4 != null) {
                      var tmp$45;
                      if (((tmp$45 = hashLoop) != null ? tmp$45 : Kotlin.throwNPE()).contains(elemPath_4)) {
                        if (inter) {
                          var tmp$46;
                          ((tmp$46 = hashResult) != null ? tmp$46 : Kotlin.throwNPE()).add(elemPath_4);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$47;
                          ((tmp$47 = hashResult) != null ? tmp$47 : Kotlin.throwNPE()).add(elemPath_4);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$48 = hashResult) != null ? tmp$48 : Kotlin.throwNPE()) !== 0) {
                var tmp$49, tmp$50;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$49 = this.path()) != null ? tmp$49 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_managedPrimitiveTypes(), _.kotlin.toList_1((tmp$50 = hashResult) != null ? tmp$50 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          AdaptationPrimitiveTypeRefImpl: Kotlin.createClass(classes.c8, classes.c1c, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_maxTime = '';
              this.$_generated_KMF_ID = '';
              this.$_ref = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__maxTime: function () {
              return this.$_maxTime;
            },
            set__maxTime: function (tmp$0) {
              this.$_maxTime = tmp$0;
            },
            get__generated_KMF_ID: function () {
              return this.$_generated_KMF_ID;
            },
            set__generated_KMF_ID: function (tmp$0) {
              this.$_generated_KMF_ID = tmp$0;
            },
            get__ref: function () {
              return this.$_ref;
            },
            set__ref: function (tmp$0) {
              this.$_ref = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              var subsubsubsubref = this.getRef();
              if (subsubsubsubref != null) {
                subsubsubsubref.setRecursiveReadOnly();
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              this.set__ref(null);
            },
            getMaxTime: function () {
              return this.get__maxTime();
            },
            setMaxTime: function (maxTimeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__maxTime(maxTimeP);
            },
            getGenerated_KMF_ID: function () {
              return this.get__generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (generated_KMF_IDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__generated_KMF_ID(generated_KMF_IDP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getRef: function () {
              return this.get__ref();
            },
            setRef: function (refP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__ref(), refP)) {
                this.set__ref(refP);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createAdaptationPrimitiveTypeRef();
              selfObjectClone.setMaxTime(this.getMaxTime());
              selfObjectClone.setGenerated_KMF_ID(this.getGenerated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (this.getRef() != null) {
                var tmp$0;
                if (mutableOnly && ((tmp$0 = this.getRef()) != null ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$1;
                  clonedSelfObject.setRef((tmp$1 = this.getRef()) != null ? tmp$1 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.getRef());
                  if (interObj == null) {
                    throw new Kotlin.Exception('Non contained ref from AdaptationPrimitiveTypeRef : ' + this.getRef());
                  }
                  clonedSelfObject.setRef(interObj);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_maxTime()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setMaxTime(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGenerated_KMF_ID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_ref()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setRef(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setRef(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setRef(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getGenerated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.AdaptationPrimitiveTypeRef) || !Kotlin.isType(similarObj, _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getMaxTime(), similarObjCasted.getMaxTime())) {
                return false;
              }
              if (!Kotlin.equals(this.getGenerated_KMF_ID(), similarObjCasted.getGenerated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.AdaptationPrimitiveTypeRef';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.AdaptationPrimitiveTypeRef) || Kotlin.isType(similarObj, _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getMaxTime();
              var tmp$0, tmp$3, tmp$6, tmp$7, tmp$8;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getMaxTime() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_maxTime(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_maxTime(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getGenerated_KMF_ID();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getGenerated_KMF_ID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
              attVal = null;
              attVal = (tmp$6 = this.getRef()) != null ? tmp$6.path() : null;
              attVal2 = null;
              attVal2 = (tmp$8 = (tmp$7 = similarObjCasted) != null ? tmp$7.getRef() : null) != null ? tmp$8.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$9;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$9 = this.path()) != null ? tmp$9 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_ref(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_ref(), attVal2String, null, null));
                }
              }
              return traces;
            }
          }),
          DefaultKevoreeFactory: Kotlin.createClass(classes.c3, {
            initialize: function () {
            },
            getVersion: function () {
              return '1.0.0-SNAPSHOT';
            },
            createComponentInstance: function () {
              return new _.org.kevoree.impl.ComponentInstanceImpl();
            },
            createComponentType: function () {
              return new _.org.kevoree.impl.ComponentTypeImpl();
            },
            createContainerNode: function () {
              return new _.org.kevoree.impl.ContainerNodeImpl();
            },
            createContainerRoot: function () {
              return new _.org.kevoree.impl.ContainerRootImpl();
            },
            createPortType: function () {
              return new _.org.kevoree.impl.PortTypeImpl();
            },
            createPort: function () {
              return new _.org.kevoree.impl.PortImpl();
            },
            createNamespace: function () {
              return new _.org.kevoree.impl.NamespaceImpl();
            },
            createDictionary: function () {
              return new _.org.kevoree.impl.DictionaryImpl();
            },
            createDictionaryType: function () {
              return new _.org.kevoree.impl.DictionaryTypeImpl();
            },
            createDictionaryAttribute: function () {
              return new _.org.kevoree.impl.DictionaryAttributeImpl();
            },
            createDictionaryValue: function () {
              return new _.org.kevoree.impl.DictionaryValueImpl();
            },
            createCompositeType: function () {
              return new _.org.kevoree.impl.CompositeTypeImpl();
            },
            createPortTypeRef: function () {
              return new _.org.kevoree.impl.PortTypeRefImpl();
            },
            createWire: function () {
              return new _.org.kevoree.impl.WireImpl();
            },
            createServicePortType: function () {
              return new _.org.kevoree.impl.ServicePortTypeImpl();
            },
            createOperation: function () {
              return new _.org.kevoree.impl.OperationImpl();
            },
            createParameter: function () {
              return new _.org.kevoree.impl.ParameterImpl();
            },
            createTypedElement: function () {
              return new _.org.kevoree.impl.TypedElementImpl();
            },
            createMessagePortType: function () {
              return new _.org.kevoree.impl.MessagePortTypeImpl();
            },
            createRepository: function () {
              return new _.org.kevoree.impl.RepositoryImpl();
            },
            createDeployUnit: function () {
              return new _.org.kevoree.impl.DeployUnitImpl();
            },
            createTypeLibrary: function () {
              return new _.org.kevoree.impl.TypeLibraryImpl();
            },
            createNamedElement: function () {
              return new _.org.kevoree.impl.NamedElementImpl();
            },
            createIntegrationPattern: function () {
              return new _.org.kevoree.impl.IntegrationPatternImpl();
            },
            createExtraFonctionalProperty: function () {
              return new _.org.kevoree.impl.ExtraFonctionalPropertyImpl();
            },
            createPortTypeMapping: function () {
              return new _.org.kevoree.impl.PortTypeMappingImpl();
            },
            createChannel: function () {
              return new _.org.kevoree.impl.ChannelImpl();
            },
            createMBinding: function () {
              return new _.org.kevoree.impl.MBindingImpl();
            },
            createNodeNetwork: function () {
              return new _.org.kevoree.impl.NodeNetworkImpl();
            },
            createNodeLink: function () {
              return new _.org.kevoree.impl.NodeLinkImpl();
            },
            createNetworkProperty: function () {
              return new _.org.kevoree.impl.NetworkPropertyImpl();
            },
            createChannelType: function () {
              return new _.org.kevoree.impl.ChannelTypeImpl();
            },
            createTypeDefinition: function () {
              return new _.org.kevoree.impl.TypeDefinitionImpl();
            },
            createInstance: function () {
              return new _.org.kevoree.impl.InstanceImpl();
            },
            createLifeCycleTypeDefinition: function () {
              return new _.org.kevoree.impl.LifeCycleTypeDefinitionImpl();
            },
            createGroup: function () {
              return new _.org.kevoree.impl.GroupImpl();
            },
            createGroupType: function () {
              return new _.org.kevoree.impl.GroupTypeImpl();
            },
            createNodeType: function () {
              return new _.org.kevoree.impl.NodeTypeImpl();
            },
            createAdaptationPrimitiveType: function () {
              return new _.org.kevoree.impl.AdaptationPrimitiveTypeImpl();
            },
            createAdaptationPrimitiveTypeRef: function () {
              return new _.org.kevoree.impl.AdaptationPrimitiveTypeRefImpl();
            },
            create: function (metaClassName) {
              if (metaClassName === 'org.kevoree.ComponentInstance') {
                return this.createComponentInstance();
              }
               else if (metaClassName === 'ComponentInstance') {
                return this.createComponentInstance();
              }
               else if (metaClassName === 'org.kevoree.ComponentType') {
                return this.createComponentType();
              }
               else if (metaClassName === 'ComponentType') {
                return this.createComponentType();
              }
               else if (metaClassName === 'org.kevoree.ContainerNode') {
                return this.createContainerNode();
              }
               else if (metaClassName === 'ContainerNode') {
                return this.createContainerNode();
              }
               else if (metaClassName === 'org.kevoree.ContainerRoot') {
                return this.createContainerRoot();
              }
               else if (metaClassName === 'ContainerRoot') {
                return this.createContainerRoot();
              }
               else if (metaClassName === 'org.kevoree.PortType') {
                return this.createPortType();
              }
               else if (metaClassName === 'PortType') {
                return this.createPortType();
              }
               else if (metaClassName === 'org.kevoree.Port') {
                return this.createPort();
              }
               else if (metaClassName === 'Port') {
                return this.createPort();
              }
               else if (metaClassName === 'org.kevoree.Namespace') {
                return this.createNamespace();
              }
               else if (metaClassName === 'Namespace') {
                return this.createNamespace();
              }
               else if (metaClassName === 'org.kevoree.Dictionary') {
                return this.createDictionary();
              }
               else if (metaClassName === 'Dictionary') {
                return this.createDictionary();
              }
               else if (metaClassName === 'org.kevoree.DictionaryType') {
                return this.createDictionaryType();
              }
               else if (metaClassName === 'DictionaryType') {
                return this.createDictionaryType();
              }
               else if (metaClassName === 'org.kevoree.DictionaryAttribute') {
                return this.createDictionaryAttribute();
              }
               else if (metaClassName === 'DictionaryAttribute') {
                return this.createDictionaryAttribute();
              }
               else if (metaClassName === 'org.kevoree.DictionaryValue') {
                return this.createDictionaryValue();
              }
               else if (metaClassName === 'DictionaryValue') {
                return this.createDictionaryValue();
              }
               else if (metaClassName === 'org.kevoree.CompositeType') {
                return this.createCompositeType();
              }
               else if (metaClassName === 'CompositeType') {
                return this.createCompositeType();
              }
               else if (metaClassName === 'org.kevoree.PortTypeRef') {
                return this.createPortTypeRef();
              }
               else if (metaClassName === 'PortTypeRef') {
                return this.createPortTypeRef();
              }
               else if (metaClassName === 'org.kevoree.Wire') {
                return this.createWire();
              }
               else if (metaClassName === 'Wire') {
                return this.createWire();
              }
               else if (metaClassName === 'org.kevoree.ServicePortType') {
                return this.createServicePortType();
              }
               else if (metaClassName === 'ServicePortType') {
                return this.createServicePortType();
              }
               else if (metaClassName === 'org.kevoree.Operation') {
                return this.createOperation();
              }
               else if (metaClassName === 'Operation') {
                return this.createOperation();
              }
               else if (metaClassName === 'org.kevoree.Parameter') {
                return this.createParameter();
              }
               else if (metaClassName === 'Parameter') {
                return this.createParameter();
              }
               else if (metaClassName === 'org.kevoree.TypedElement') {
                return this.createTypedElement();
              }
               else if (metaClassName === 'TypedElement') {
                return this.createTypedElement();
              }
               else if (metaClassName === 'org.kevoree.MessagePortType') {
                return this.createMessagePortType();
              }
               else if (metaClassName === 'MessagePortType') {
                return this.createMessagePortType();
              }
               else if (metaClassName === 'org.kevoree.Repository') {
                return this.createRepository();
              }
               else if (metaClassName === 'Repository') {
                return this.createRepository();
              }
               else if (metaClassName === 'org.kevoree.DeployUnit') {
                return this.createDeployUnit();
              }
               else if (metaClassName === 'DeployUnit') {
                return this.createDeployUnit();
              }
               else if (metaClassName === 'org.kevoree.TypeLibrary') {
                return this.createTypeLibrary();
              }
               else if (metaClassName === 'TypeLibrary') {
                return this.createTypeLibrary();
              }
               else if (metaClassName === 'org.kevoree.NamedElement') {
                return this.createNamedElement();
              }
               else if (metaClassName === 'NamedElement') {
                return this.createNamedElement();
              }
               else if (metaClassName === 'org.kevoree.IntegrationPattern') {
                return this.createIntegrationPattern();
              }
               else if (metaClassName === 'IntegrationPattern') {
                return this.createIntegrationPattern();
              }
               else if (metaClassName === 'org.kevoree.ExtraFonctionalProperty') {
                return this.createExtraFonctionalProperty();
              }
               else if (metaClassName === 'ExtraFonctionalProperty') {
                return this.createExtraFonctionalProperty();
              }
               else if (metaClassName === 'org.kevoree.PortTypeMapping') {
                return this.createPortTypeMapping();
              }
               else if (metaClassName === 'PortTypeMapping') {
                return this.createPortTypeMapping();
              }
               else if (metaClassName === 'org.kevoree.Channel') {
                return this.createChannel();
              }
               else if (metaClassName === 'Channel') {
                return this.createChannel();
              }
               else if (metaClassName === 'org.kevoree.MBinding') {
                return this.createMBinding();
              }
               else if (metaClassName === 'MBinding') {
                return this.createMBinding();
              }
               else if (metaClassName === 'org.kevoree.NodeNetwork') {
                return this.createNodeNetwork();
              }
               else if (metaClassName === 'NodeNetwork') {
                return this.createNodeNetwork();
              }
               else if (metaClassName === 'org.kevoree.NodeLink') {
                return this.createNodeLink();
              }
               else if (metaClassName === 'NodeLink') {
                return this.createNodeLink();
              }
               else if (metaClassName === 'org.kevoree.NetworkProperty') {
                return this.createNetworkProperty();
              }
               else if (metaClassName === 'NetworkProperty') {
                return this.createNetworkProperty();
              }
               else if (metaClassName === 'org.kevoree.ChannelType') {
                return this.createChannelType();
              }
               else if (metaClassName === 'ChannelType') {
                return this.createChannelType();
              }
               else if (metaClassName === 'org.kevoree.TypeDefinition') {
                return this.createTypeDefinition();
              }
               else if (metaClassName === 'TypeDefinition') {
                return this.createTypeDefinition();
              }
               else if (metaClassName === 'org.kevoree.Instance') {
                return this.createInstance();
              }
               else if (metaClassName === 'Instance') {
                return this.createInstance();
              }
               else if (metaClassName === 'org.kevoree.LifeCycleTypeDefinition') {
                return this.createLifeCycleTypeDefinition();
              }
               else if (metaClassName === 'LifeCycleTypeDefinition') {
                return this.createLifeCycleTypeDefinition();
              }
               else if (metaClassName === 'org.kevoree.Group') {
                return this.createGroup();
              }
               else if (metaClassName === 'Group') {
                return this.createGroup();
              }
               else if (metaClassName === 'org.kevoree.GroupType') {
                return this.createGroupType();
              }
               else if (metaClassName === 'GroupType') {
                return this.createGroupType();
              }
               else if (metaClassName === 'org.kevoree.NodeType') {
                return this.createNodeType();
              }
               else if (metaClassName === 'NodeType') {
                return this.createNodeType();
              }
               else if (metaClassName === 'org.kevoree.AdaptationPrimitiveType') {
                return this.createAdaptationPrimitiveType();
              }
               else if (metaClassName === 'AdaptationPrimitiveType') {
                return this.createAdaptationPrimitiveType();
              }
               else if (metaClassName === 'org.kevoree.AdaptationPrimitiveTypeRef') {
                return this.createAdaptationPrimitiveTypeRef();
              }
               else if (metaClassName === 'AdaptationPrimitiveTypeRef') {
                return this.createAdaptationPrimitiveTypeRef();
              }
               else {
                return null;
              }
            }
          }),
          IntegrationPatternImpl: Kotlin.createClass(classes.c8, classes.c1f, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_extraFonctionalProperties_java_cache = null;
              this.$_extraFonctionalProperties = new Kotlin.ComplexHashMap(0);
              this.$_portTypes_java_cache = null;
              this.$_portTypes = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__extraFonctionalProperties_java_cache: function () {
              return this.$_extraFonctionalProperties_java_cache;
            },
            set__extraFonctionalProperties_java_cache: function (tmp$0) {
              this.$_extraFonctionalProperties_java_cache = tmp$0;
            },
            get__extraFonctionalProperties: function () {
              return this.$_extraFonctionalProperties;
            },
            get__portTypes_java_cache: function () {
              return this.$_portTypes_java_cache;
            },
            set__portTypes_java_cache: function (tmp$0) {
              this.$_portTypes_java_cache = tmp$0;
            },
            get__portTypes: function () {
              return this.$_portTypes;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getExtraFonctionalProperties().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              {
                var tmp$1 = this.getPortTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              {
                var tmp$0 = _.kotlin.iterator(this.get__extraFonctionalProperties());
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              var tmp$1, tmp$2;
              (tmp$1 = this.get__extraFonctionalProperties()) != null ? tmp$1.clear() : null;
              this.set__extraFonctionalProperties_java_cache(null);
              (tmp$2 = this.get__portTypes()) != null ? tmp$2.clear() : null;
              this.set__portTypes_java_cache(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getExtraFonctionalProperties: function () {
              return _.kotlin.toList_1(this.get__extraFonctionalProperties().values());
            },
            setExtraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (extraFonctionalPropertiesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__extraFonctionalProperties_java_cache(null);
              if (!Kotlin.equals(this.get__extraFonctionalProperties(), extraFonctionalPropertiesP)) {
                this.get__extraFonctionalProperties().clear();
                {
                  var tmp$0 = extraFonctionalPropertiesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__extraFonctionalProperties().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = extraFonctionalPropertiesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'extraFonctionalProperties', elem), 'extraFonctionalProperties');
                  }
                }
              }
            },
            addExtraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__extraFonctionalProperties_java_cache(null);
              extraFonctionalPropertiesP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'extraFonctionalProperties', extraFonctionalPropertiesP), 'extraFonctionalProperties');
              var _key_ = extraFonctionalPropertiesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__extraFonctionalProperties().put(_key_, extraFonctionalPropertiesP);
            },
            addAllExtraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__extraFonctionalProperties_java_cache(null);
              {
                var tmp$0 = extraFonctionalPropertiesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__extraFonctionalProperties().put(_key_, el);
                }
              }
              {
                var tmp$1 = extraFonctionalPropertiesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'extraFonctionalProperties', el_0), 'extraFonctionalProperties');
                }
              }
            },
            removeExtraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__extraFonctionalProperties_java_cache(null);
              if (this.get__extraFonctionalProperties().size() !== 0 && this.get__extraFonctionalProperties().containsKey(extraFonctionalPropertiesP.internalGetKey())) {
                this.get__extraFonctionalProperties().remove(extraFonctionalPropertiesP.internalGetKey());
                var tmp$0;
                ((tmp$0 = extraFonctionalPropertiesP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllExtraFonctionalProperties: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getExtraFonctionalProperties()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__extraFonctionalProperties_java_cache(null);
              this.get__extraFonctionalProperties().clear();
            },
            getPortTypes: function () {
              return _.kotlin.toList_1(this.get__portTypes().values());
            },
            setPortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (portTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__portTypes_java_cache(null);
              if (!Kotlin.equals(this.get__portTypes(), portTypesP)) {
                this.get__portTypes().clear();
                {
                  var tmp$0 = portTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__portTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addPortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__portTypes_java_cache(null);
              var _key_ = portTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__portTypes().put(_key_, portTypesP);
            },
            addAllPortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__portTypes_java_cache(null);
              {
                var tmp$0 = portTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__portTypes().put(_key_, el);
                }
              }
            },
            removePortTypes: function (portTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__portTypes_java_cache(null);
              if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey(portTypesP.internalGetKey())) {
                this.get__portTypes().remove(portTypesP.internalGetKey());
              }
            },
            removeAllPortTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getPortTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__portTypes_java_cache(null);
              this.get__portTypes().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createIntegrationPattern();
              selfObjectClone.setName(this.getName());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.getExtraFonctionalProperties().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getExtraFonctionalProperties().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addExtraFonctionalProperties(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained extraFonctionalProperties from IntegrationPattern : ' + this.getExtraFonctionalProperties());
                    }
                    clonedSelfObject.addExtraFonctionalProperties(interObj);
                  }
                }
              }
              {
                var tmp$1 = this.getPortTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addPortTypes(sub_0);
                  }
                   else {
                    var interObj_0 = addrs.get(sub_0);
                    if (interObj_0 == null) {
                      throw new Kotlin.Exception('Non contained portTypes from IntegrationPattern : ' + this.getPortTypes());
                    }
                    clonedSelfObject.addPortTypes(interObj_0);
                  }
                }
              }
              {
                var tmp$2 = this.getExtraFonctionalProperties().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  sub_1.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addExtraFonctionalProperties(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllExtraFonctionalProperties(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeExtraFonctionalProperties(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllExtraFonctionalProperties();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__extraFonctionalProperties().size() !== 0 && this.get__extraFonctionalProperties().containsKey(value)) {
                    var obj = this.get__extraFonctionalProperties().get(value);
                    this.get__extraFonctionalProperties().put(obj.internalGetKey(), obj);
                    this.get__extraFonctionalProperties().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_portTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addPortTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllPortTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removePortTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllPortTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__portTypes().size() !== 0 && this.get__portTypes().containsKey(value)) {
                    var obj_0 = this.get__portTypes().get(value);
                    this.get__portTypes().put(obj_0.internalGetKey(), obj_0);
                    this.get__portTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findExtraFonctionalPropertiesByID: function (key) {
              return this.get__extraFonctionalProperties().get(key);
            },
            findPortTypesByID: function (key) {
              return this.get__portTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                var objFound = this.findExtraFonctionalPropertiesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_portTypes()) {
                var objFound_0 = this.findPortTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getExtraFonctionalProperties().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findExtraFonctionalPropertiesByID(subElement.getGenerated_KMF_ID());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.IntegrationPattern) || !Kotlin.isType(similarObj, _.org.kevoree.impl.IntegrationPatternImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (this.getExtraFonctionalProperties().size() !== similarObjCasted.getExtraFonctionalProperties().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              result.addAll(this.get__extraFonctionalProperties().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.IntegrationPattern';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.IntegrationPattern) || Kotlin.isType(similarObj, _.org.kevoree.impl.IntegrationPatternImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$10;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$3 = this.getPortTypes().iterator();
                while (tmp$3.hasNext()) {
                  var elem = tmp$3.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$4;
                    ((tmp$4 = hashLoop) != null ? tmp$4 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$5;
                {
                  var tmp$6 = ((tmp$5 = similarObjCasted) != null ? tmp$5 : Kotlin.throwNPE()).getPortTypes().iterator();
                  while (tmp$6.hasNext()) {
                    var elem_0 = tmp$6.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$7;
                      if (((tmp$7 = hashLoop) != null ? tmp$7 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$8;
                          ((tmp$8 = hashResult) != null ? tmp$8 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$9;
                          ((tmp$9 = hashResult) != null ? tmp$9 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$10 = hashResult) != null ? tmp$10 : Kotlin.throwNPE()) !== 0) {
                var tmp$11, tmp$12;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_portTypes(), _.kotlin.toList_1((tmp$12 = hashResult) != null ? tmp$12 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          DeployUnitImpl: Kotlin.createClass(classes.c8, classes.c7, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_groupName = '';
              this.$_unitName = '';
              this.$_version = '';
              this.$_url = '';
              this.$_hashcode = '';
              this.$_type = '';
              this.$_generated_KMF_ID = '';
              this.$_requiredLibs_java_cache = null;
              this.$_requiredLibs = new Kotlin.ComplexHashMap(0);
              this.$_targetNodeType = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__groupName: function () {
              return this.$_groupName;
            },
            set__groupName: function (tmp$0) {
              this.$_groupName = tmp$0;
            },
            get__unitName: function () {
              return this.$_unitName;
            },
            set__unitName: function (tmp$0) {
              this.$_unitName = tmp$0;
            },
            get__version: function () {
              return this.$_version;
            },
            set__version: function (tmp$0) {
              this.$_version = tmp$0;
            },
            get__url: function () {
              return this.$_url;
            },
            set__url: function (tmp$0) {
              this.$_url = tmp$0;
            },
            get__hashcode: function () {
              return this.$_hashcode;
            },
            set__hashcode: function (tmp$0) {
              this.$_hashcode = tmp$0;
            },
            get__type: function () {
              return this.$_type;
            },
            set__type: function (tmp$0) {
              this.$_type = tmp$0;
            },
            get__generated_KMF_ID: function () {
              return this.$_generated_KMF_ID;
            },
            set__generated_KMF_ID: function (tmp$0) {
              this.$_generated_KMF_ID = tmp$0;
            },
            get__requiredLibs_java_cache: function () {
              return this.$_requiredLibs_java_cache;
            },
            set__requiredLibs_java_cache: function (tmp$0) {
              this.$_requiredLibs_java_cache = tmp$0;
            },
            get__requiredLibs: function () {
              return this.$_requiredLibs;
            },
            get__targetNodeType: function () {
              return this.$_targetNodeType;
            },
            set__targetNodeType: function (tmp$0) {
              this.$_targetNodeType = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getRequiredLibs().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubtargetNodeType = this.getTargetNodeType();
              if (subsubsubsubtargetNodeType != null) {
                subsubsubsubtargetNodeType.setRecursiveReadOnly();
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__requiredLibs()) != null ? tmp$0.clear() : null;
              this.set__requiredLibs_java_cache(null);
              this.set__targetNodeType(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__name(nameP);
            },
            getGroupName: function () {
              return this.get__groupName();
            },
            setGroupName: function (groupNameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__groupName(groupNameP);
            },
            getUnitName: function () {
              return this.get__unitName();
            },
            setUnitName: function (unitNameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__unitName(unitNameP);
            },
            getVersion: function () {
              return this.get__version();
            },
            setVersion: function (versionP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__version(versionP);
            },
            getUrl: function () {
              return this.get__url();
            },
            setUrl: function (urlP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__url(urlP);
            },
            getHashcode: function () {
              return this.get__hashcode();
            },
            setHashcode: function (hashcodeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__hashcode(hashcodeP);
            },
            getType: function () {
              return this.get__type();
            },
            setType: function (typeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__type(typeP);
            },
            getGenerated_KMF_ID: function () {
              return this.get__generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (generated_KMF_IDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__generated_KMF_ID(generated_KMF_IDP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getRequiredLibs: function () {
              return _.kotlin.toList_1(this.get__requiredLibs().values());
            },
            setRequiredLibs: function (requiredLibsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (requiredLibsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__requiredLibs_java_cache(null);
              if (!Kotlin.equals(this.get__requiredLibs(), requiredLibsP)) {
                this.get__requiredLibs().clear();
                {
                  var tmp$0 = requiredLibsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__requiredLibs().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addRequiredLibs: function (requiredLibsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__requiredLibs_java_cache(null);
              var _key_ = requiredLibsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__requiredLibs().put(_key_, requiredLibsP);
            },
            addAllRequiredLibs: function (requiredLibsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__requiredLibs_java_cache(null);
              {
                var tmp$0 = requiredLibsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__requiredLibs().put(_key_, el);
                }
              }
            },
            removeRequiredLibs: function (requiredLibsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__requiredLibs_java_cache(null);
              if (this.get__requiredLibs().size() !== 0 && this.get__requiredLibs().containsKey(requiredLibsP.internalGetKey())) {
                this.get__requiredLibs().remove(requiredLibsP.internalGetKey());
              }
            },
            removeAllRequiredLibs: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getRequiredLibs()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__requiredLibs_java_cache(null);
              this.get__requiredLibs().clear();
            },
            getTargetNodeType: function () {
              return this.get__targetNodeType();
            },
            setTargetNodeType: function (targetNodeTypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__targetNodeType(), targetNodeTypeP)) {
                this.set__targetNodeType(targetNodeTypeP);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createDeployUnit();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setGroupName(this.getGroupName());
              selfObjectClone.setUnitName(this.getUnitName());
              selfObjectClone.setVersion(this.getVersion());
              selfObjectClone.setUrl(this.getUrl());
              selfObjectClone.setHashcode(this.getHashcode());
              selfObjectClone.setType(this.getType());
              selfObjectClone.setGenerated_KMF_ID(this.getGenerated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getRequiredLibs().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addRequiredLibs(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained requiredLibs from DeployUnit : ' + this.getRequiredLibs());
                    }
                    clonedSelfObject.addRequiredLibs(interObj);
                  }
                }
              }
              if (this.getTargetNodeType() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getTargetNodeType()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setTargetNodeType((tmp$2 = this.getTargetNodeType()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getTargetNodeType());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained targetNodeType from DeployUnit : ' + this.getTargetNodeType());
                  }
                  clonedSelfObject.setTargetNodeType(interObj_0);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_groupName()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGroupName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_unitName()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setUnitName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_version()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setVersion(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_url()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setUrl(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_hashcode()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setHashcode(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_type()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGenerated_KMF_ID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_requiredLibs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addRequiredLibs(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllRequiredLibs(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeRequiredLibs(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRequiredLibs();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__requiredLibs().size() !== 0 && this.get__requiredLibs().containsKey(value)) {
                    var obj = this.get__requiredLibs().get(value);
                    this.get__requiredLibs().put(obj.internalGetKey(), obj);
                    this.get__requiredLibs().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_targetNodeType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setTargetNodeType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setTargetNodeType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setTargetNodeType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getGenerated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findRequiredLibsByID: function (key) {
              return this.get__requiredLibs().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_requiredLibs()) {
                var objFound = this.findRequiredLibsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_targetNodeType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getTargetNodeType();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getTargetNodeType();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.DeployUnit) || !Kotlin.isType(similarObj, _.org.kevoree.impl.DeployUnitImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getGroupName(), similarObjCasted.getGroupName())) {
                return false;
              }
              if (!Kotlin.equals(this.getUnitName(), similarObjCasted.getUnitName())) {
                return false;
              }
              if (!Kotlin.equals(this.getVersion(), similarObjCasted.getVersion())) {
                return false;
              }
              if (!Kotlin.equals(this.getUrl(), similarObjCasted.getUrl())) {
                return false;
              }
              if (!Kotlin.equals(this.getHashcode(), similarObjCasted.getHashcode())) {
                return false;
              }
              if (!Kotlin.equals(this.getType(), similarObjCasted.getType())) {
                return false;
              }
              if (!Kotlin.equals(this.getGenerated_KMF_ID(), similarObjCasted.getGenerated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.DeployUnit';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.DeployUnit) || Kotlin.isType(similarObj, _.org.kevoree.impl.DeployUnitImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$12, tmp$15, tmp$18, tmp$21, tmp$31, tmp$34, tmp$35, tmp$36;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getGroupName();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getGroupName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_groupName(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_groupName(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getUnitName();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getUnitName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_unitName(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_unitName(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getVersion();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getVersion() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_version(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_version(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getUrl();
              attVal2 = (tmp$12 = similarObjCasted) != null ? tmp$12.getUrl() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_url(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$14;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_url(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getHashcode();
              attVal2 = (tmp$15 = similarObjCasted) != null ? tmp$15.getHashcode() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$16;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = this.path()) != null ? tmp$16 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_hashcode(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$17;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_hashcode(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getType();
              attVal2 = (tmp$18 = similarObjCasted) != null ? tmp$18.getType() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$19;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$19 = this.path()) != null ? tmp$19 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_type(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$20;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$20 = this.path()) != null ? tmp$20 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_type(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getGenerated_KMF_ID();
              attVal2 = (tmp$21 = similarObjCasted) != null ? tmp$21.getGenerated_KMF_ID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$22;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$22 = this.path()) != null ? tmp$22 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$23;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$23 = this.path()) != null ? tmp$23 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$24 = this.getRequiredLibs().iterator();
                while (tmp$24.hasNext()) {
                  var elem = tmp$24.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$25;
                    ((tmp$25 = hashLoop) != null ? tmp$25 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$26;
                {
                  var tmp$27 = ((tmp$26 = similarObjCasted) != null ? tmp$26 : Kotlin.throwNPE()).getRequiredLibs().iterator();
                  while (tmp$27.hasNext()) {
                    var elem_0 = tmp$27.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$28;
                      if (((tmp$28 = hashLoop) != null ? tmp$28 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$29;
                          ((tmp$29 = hashResult) != null ? tmp$29 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$30;
                          ((tmp$30 = hashResult) != null ? tmp$30 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$31 = hashResult) != null ? tmp$31 : Kotlin.throwNPE()) !== 0) {
                var tmp$32, tmp$33;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$32 = this.path()) != null ? tmp$32 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_requiredLibs(), _.kotlin.toList_1((tmp$33 = hashResult) != null ? tmp$33 : Kotlin.throwNPE()), null));
              }
              attVal = null;
              attVal = (tmp$34 = this.getTargetNodeType()) != null ? tmp$34.path() : null;
              attVal2 = null;
              attVal2 = (tmp$36 = (tmp$35 = similarObjCasted) != null ? tmp$35.getTargetNodeType() : null) != null ? tmp$36.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$37;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$37 = this.path()) != null ? tmp$37 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_targetNodeType(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$38;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$38 = this.path()) != null ? tmp$38 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_targetNodeType(), attVal2String, null, null));
                }
              }
              return traces;
            }
          }),
          ContainerRootImpl: Kotlin.createClass(classes.c8, classes.cb, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_generated_KMF_ID = '';
              this.$_nodes_java_cache = null;
              this.$_nodes = new Kotlin.ComplexHashMap(0);
              this.$_typeDefinitions_java_cache = null;
              this.$_typeDefinitions = new Kotlin.ComplexHashMap(0);
              this.$_repositories_java_cache = null;
              this.$_repositories = new Kotlin.ComplexHashMap(0);
              this.$_dataTypes_java_cache = null;
              this.$_dataTypes = new Kotlin.ComplexHashMap(0);
              this.$_libraries_java_cache = null;
              this.$_libraries = new Kotlin.ComplexHashMap(0);
              this.$_hubs_java_cache = null;
              this.$_hubs = new Kotlin.ComplexHashMap(0);
              this.$_mBindings_java_cache = null;
              this.$_mBindings = new Kotlin.ComplexHashMap(0);
              this.$_deployUnits_java_cache = null;
              this.$_deployUnits = new Kotlin.ComplexHashMap(0);
              this.$_nodeNetworks_java_cache = null;
              this.$_nodeNetworks = new Kotlin.ComplexHashMap(0);
              this.$_groups_java_cache = null;
              this.$_groups = new Kotlin.ComplexHashMap(0);
              this.$_adaptationPrimitiveTypes_java_cache = null;
              this.$_adaptationPrimitiveTypes = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__generated_KMF_ID: function () {
              return this.$_generated_KMF_ID;
            },
            set__generated_KMF_ID: function (tmp$0) {
              this.$_generated_KMF_ID = tmp$0;
            },
            get__nodes_java_cache: function () {
              return this.$_nodes_java_cache;
            },
            set__nodes_java_cache: function (tmp$0) {
              this.$_nodes_java_cache = tmp$0;
            },
            get__nodes: function () {
              return this.$_nodes;
            },
            get__typeDefinitions_java_cache: function () {
              return this.$_typeDefinitions_java_cache;
            },
            set__typeDefinitions_java_cache: function (tmp$0) {
              this.$_typeDefinitions_java_cache = tmp$0;
            },
            get__typeDefinitions: function () {
              return this.$_typeDefinitions;
            },
            get__repositories_java_cache: function () {
              return this.$_repositories_java_cache;
            },
            set__repositories_java_cache: function (tmp$0) {
              this.$_repositories_java_cache = tmp$0;
            },
            get__repositories: function () {
              return this.$_repositories;
            },
            get__dataTypes_java_cache: function () {
              return this.$_dataTypes_java_cache;
            },
            set__dataTypes_java_cache: function (tmp$0) {
              this.$_dataTypes_java_cache = tmp$0;
            },
            get__dataTypes: function () {
              return this.$_dataTypes;
            },
            get__libraries_java_cache: function () {
              return this.$_libraries_java_cache;
            },
            set__libraries_java_cache: function (tmp$0) {
              this.$_libraries_java_cache = tmp$0;
            },
            get__libraries: function () {
              return this.$_libraries;
            },
            get__hubs_java_cache: function () {
              return this.$_hubs_java_cache;
            },
            set__hubs_java_cache: function (tmp$0) {
              this.$_hubs_java_cache = tmp$0;
            },
            get__hubs: function () {
              return this.$_hubs;
            },
            get__mBindings_java_cache: function () {
              return this.$_mBindings_java_cache;
            },
            set__mBindings_java_cache: function (tmp$0) {
              this.$_mBindings_java_cache = tmp$0;
            },
            get__mBindings: function () {
              return this.$_mBindings;
            },
            get__deployUnits_java_cache: function () {
              return this.$_deployUnits_java_cache;
            },
            set__deployUnits_java_cache: function (tmp$0) {
              this.$_deployUnits_java_cache = tmp$0;
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get__nodeNetworks_java_cache: function () {
              return this.$_nodeNetworks_java_cache;
            },
            set__nodeNetworks_java_cache: function (tmp$0) {
              this.$_nodeNetworks_java_cache = tmp$0;
            },
            get__nodeNetworks: function () {
              return this.$_nodeNetworks;
            },
            get__groups_java_cache: function () {
              return this.$_groups_java_cache;
            },
            set__groups_java_cache: function (tmp$0) {
              this.$_groups_java_cache = tmp$0;
            },
            get__groups: function () {
              return this.$_groups;
            },
            get__adaptationPrimitiveTypes_java_cache: function () {
              return this.$_adaptationPrimitiveTypes_java_cache;
            },
            set__adaptationPrimitiveTypes_java_cache: function (tmp$0) {
              this.$_adaptationPrimitiveTypes_java_cache = tmp$0;
            },
            get__adaptationPrimitiveTypes: function () {
              return this.$_adaptationPrimitiveTypes;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getNodes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              {
                var tmp$1 = this.getTypeDefinitions().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              {
                var tmp$2 = this.getRepositories().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  sub_1.setRecursiveReadOnly();
                }
              }
              {
                var tmp$3 = this.getDataTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_2 = tmp$3.next();
                  sub_2.setRecursiveReadOnly();
                }
              }
              {
                var tmp$4 = this.getLibraries().iterator();
                while (tmp$4.hasNext()) {
                  var sub_3 = tmp$4.next();
                  sub_3.setRecursiveReadOnly();
                }
              }
              {
                var tmp$5 = this.getHubs().iterator();
                while (tmp$5.hasNext()) {
                  var sub_4 = tmp$5.next();
                  sub_4.setRecursiveReadOnly();
                }
              }
              {
                var tmp$6 = this.getMBindings().iterator();
                while (tmp$6.hasNext()) {
                  var sub_5 = tmp$6.next();
                  sub_5.setRecursiveReadOnly();
                }
              }
              {
                var tmp$7 = this.getDeployUnits().iterator();
                while (tmp$7.hasNext()) {
                  var sub_6 = tmp$7.next();
                  sub_6.setRecursiveReadOnly();
                }
              }
              {
                var tmp$8 = this.getNodeNetworks().iterator();
                while (tmp$8.hasNext()) {
                  var sub_7 = tmp$8.next();
                  sub_7.setRecursiveReadOnly();
                }
              }
              {
                var tmp$9 = this.getGroups().iterator();
                while (tmp$9.hasNext()) {
                  var sub_8 = tmp$9.next();
                  sub_8.setRecursiveReadOnly();
                }
              }
              {
                var tmp$10 = this.getAdaptationPrimitiveTypes().iterator();
                while (tmp$10.hasNext()) {
                  var sub_9 = tmp$10.next();
                  sub_9.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              {
                var tmp$0 = _.kotlin.iterator(this.get__nodes());
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              {
                var tmp$1 = _.kotlin.iterator(this.get__typeDefinitions());
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  _.kotlin.get_value(el_0).delete();
                }
              }
              {
                var tmp$2 = _.kotlin.iterator(this.get__repositories());
                while (tmp$2.hasNext()) {
                  var el_1 = tmp$2.next();
                  _.kotlin.get_value(el_1).delete();
                }
              }
              {
                var tmp$3 = _.kotlin.iterator(this.get__dataTypes());
                while (tmp$3.hasNext()) {
                  var el_2 = tmp$3.next();
                  _.kotlin.get_value(el_2).delete();
                }
              }
              {
                var tmp$4 = _.kotlin.iterator(this.get__libraries());
                while (tmp$4.hasNext()) {
                  var el_3 = tmp$4.next();
                  _.kotlin.get_value(el_3).delete();
                }
              }
              {
                var tmp$5 = _.kotlin.iterator(this.get__hubs());
                while (tmp$5.hasNext()) {
                  var el_4 = tmp$5.next();
                  _.kotlin.get_value(el_4).delete();
                }
              }
              {
                var tmp$6 = _.kotlin.iterator(this.get__mBindings());
                while (tmp$6.hasNext()) {
                  var el_5 = tmp$6.next();
                  _.kotlin.get_value(el_5).delete();
                }
              }
              {
                var tmp$7 = _.kotlin.iterator(this.get__deployUnits());
                while (tmp$7.hasNext()) {
                  var el_6 = tmp$7.next();
                  _.kotlin.get_value(el_6).delete();
                }
              }
              {
                var tmp$8 = _.kotlin.iterator(this.get__nodeNetworks());
                while (tmp$8.hasNext()) {
                  var el_7 = tmp$8.next();
                  _.kotlin.get_value(el_7).delete();
                }
              }
              {
                var tmp$9 = _.kotlin.iterator(this.get__groups());
                while (tmp$9.hasNext()) {
                  var el_8 = tmp$9.next();
                  _.kotlin.get_value(el_8).delete();
                }
              }
              {
                var tmp$10 = _.kotlin.iterator(this.get__adaptationPrimitiveTypes());
                while (tmp$10.hasNext()) {
                  var el_9 = tmp$10.next();
                  _.kotlin.get_value(el_9).delete();
                }
              }
              var tmp$11, tmp$12, tmp$13, tmp$14, tmp$15, tmp$16, tmp$17, tmp$18, tmp$19, tmp$20, tmp$21;
              (tmp$11 = this.get__nodes()) != null ? tmp$11.clear() : null;
              this.set__nodes_java_cache(null);
              (tmp$12 = this.get__typeDefinitions()) != null ? tmp$12.clear() : null;
              this.set__typeDefinitions_java_cache(null);
              (tmp$13 = this.get__repositories()) != null ? tmp$13.clear() : null;
              this.set__repositories_java_cache(null);
              (tmp$14 = this.get__dataTypes()) != null ? tmp$14.clear() : null;
              this.set__dataTypes_java_cache(null);
              (tmp$15 = this.get__libraries()) != null ? tmp$15.clear() : null;
              this.set__libraries_java_cache(null);
              (tmp$16 = this.get__hubs()) != null ? tmp$16.clear() : null;
              this.set__hubs_java_cache(null);
              (tmp$17 = this.get__mBindings()) != null ? tmp$17.clear() : null;
              this.set__mBindings_java_cache(null);
              (tmp$18 = this.get__deployUnits()) != null ? tmp$18.clear() : null;
              this.set__deployUnits_java_cache(null);
              (tmp$19 = this.get__nodeNetworks()) != null ? tmp$19.clear() : null;
              this.set__nodeNetworks_java_cache(null);
              (tmp$20 = this.get__groups()) != null ? tmp$20.clear() : null;
              this.set__groups_java_cache(null);
              (tmp$21 = this.get__adaptationPrimitiveTypes()) != null ? tmp$21.clear() : null;
              this.set__adaptationPrimitiveTypes_java_cache(null);
            },
            getGenerated_KMF_ID: function () {
              return this.get__generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (generated_KMF_IDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__generated_KMF_ID(generated_KMF_IDP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getNodes: function () {
              return _.kotlin.toList_1(this.get__nodes().values());
            },
            setNodes: function (nodesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (nodesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__nodes_java_cache(null);
              if (!Kotlin.equals(this.get__nodes(), nodesP)) {
                this.get__nodes().clear();
                {
                  var tmp$0 = nodesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__nodes().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = nodesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'nodes', elem), 'nodes');
                  }
                }
              }
            },
            addNodes: function (nodesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__nodes_java_cache(null);
              nodesP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'nodes', nodesP), 'nodes');
              var _key_ = nodesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__nodes().put(_key_, nodesP);
            },
            addAllNodes: function (nodesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__nodes_java_cache(null);
              {
                var tmp$0 = nodesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__nodes().put(_key_, el);
                }
              }
              {
                var tmp$1 = nodesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'nodes', el_0), 'nodes');
                }
              }
            },
            removeNodes: function (nodesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__nodes_java_cache(null);
              if (this.get__nodes().size() !== 0 && this.get__nodes().containsKey(nodesP.internalGetKey())) {
                this.get__nodes().remove(nodesP.internalGetKey());
                var tmp$0;
                ((tmp$0 = nodesP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllNodes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getNodes()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__nodes_java_cache(null);
              this.get__nodes().clear();
            },
            getTypeDefinitions: function () {
              return _.kotlin.toList_1(this.get__typeDefinitions().values());
            },
            setTypeDefinitions: function (typeDefinitionsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (typeDefinitionsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__typeDefinitions_java_cache(null);
              if (!Kotlin.equals(this.get__typeDefinitions(), typeDefinitionsP)) {
                this.get__typeDefinitions().clear();
                {
                  var tmp$0 = typeDefinitionsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__typeDefinitions().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = typeDefinitionsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'typeDefinitions', elem), 'typeDefinitions');
                  }
                }
              }
            },
            addTypeDefinitions: function (typeDefinitionsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__typeDefinitions_java_cache(null);
              typeDefinitionsP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'typeDefinitions', typeDefinitionsP), 'typeDefinitions');
              var _key_ = typeDefinitionsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__typeDefinitions().put(_key_, typeDefinitionsP);
            },
            addAllTypeDefinitions: function (typeDefinitionsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__typeDefinitions_java_cache(null);
              {
                var tmp$0 = typeDefinitionsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__typeDefinitions().put(_key_, el);
                }
              }
              {
                var tmp$1 = typeDefinitionsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'typeDefinitions', el_0), 'typeDefinitions');
                }
              }
            },
            removeTypeDefinitions: function (typeDefinitionsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__typeDefinitions_java_cache(null);
              if (this.get__typeDefinitions().size() !== 0 && this.get__typeDefinitions().containsKey(typeDefinitionsP.internalGetKey())) {
                this.get__typeDefinitions().remove(typeDefinitionsP.internalGetKey());
                var tmp$0;
                ((tmp$0 = typeDefinitionsP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllTypeDefinitions: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getTypeDefinitions()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__typeDefinitions_java_cache(null);
              this.get__typeDefinitions().clear();
            },
            getRepositories: function () {
              return _.kotlin.toList_1(this.get__repositories().values());
            },
            setRepositories: function (repositoriesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (repositoriesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__repositories_java_cache(null);
              if (!Kotlin.equals(this.get__repositories(), repositoriesP)) {
                this.get__repositories().clear();
                {
                  var tmp$0 = repositoriesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__repositories().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = repositoriesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'repositories', elem), 'repositories');
                  }
                }
              }
            },
            addRepositories: function (repositoriesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__repositories_java_cache(null);
              repositoriesP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'repositories', repositoriesP), 'repositories');
              var _key_ = repositoriesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__repositories().put(_key_, repositoriesP);
            },
            addAllRepositories: function (repositoriesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__repositories_java_cache(null);
              {
                var tmp$0 = repositoriesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__repositories().put(_key_, el);
                }
              }
              {
                var tmp$1 = repositoriesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'repositories', el_0), 'repositories');
                }
              }
            },
            removeRepositories: function (repositoriesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__repositories_java_cache(null);
              if (this.get__repositories().size() !== 0 && this.get__repositories().containsKey(repositoriesP.internalGetKey())) {
                this.get__repositories().remove(repositoriesP.internalGetKey());
                var tmp$0;
                ((tmp$0 = repositoriesP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllRepositories: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getRepositories()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__repositories_java_cache(null);
              this.get__repositories().clear();
            },
            getDataTypes: function () {
              return _.kotlin.toList_1(this.get__dataTypes().values());
            },
            setDataTypes: function (dataTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (dataTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__dataTypes_java_cache(null);
              if (!Kotlin.equals(this.get__dataTypes(), dataTypesP)) {
                this.get__dataTypes().clear();
                {
                  var tmp$0 = dataTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__dataTypes().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = dataTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'dataTypes', elem), 'dataTypes');
                  }
                }
              }
            },
            addDataTypes: function (dataTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__dataTypes_java_cache(null);
              dataTypesP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'dataTypes', dataTypesP), 'dataTypes');
              var _key_ = dataTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__dataTypes().put(_key_, dataTypesP);
            },
            addAllDataTypes: function (dataTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__dataTypes_java_cache(null);
              {
                var tmp$0 = dataTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__dataTypes().put(_key_, el);
                }
              }
              {
                var tmp$1 = dataTypesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'dataTypes', el_0), 'dataTypes');
                }
              }
            },
            removeDataTypes: function (dataTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__dataTypes_java_cache(null);
              if (this.get__dataTypes().size() !== 0 && this.get__dataTypes().containsKey(dataTypesP.internalGetKey())) {
                this.get__dataTypes().remove(dataTypesP.internalGetKey());
                var tmp$0;
                ((tmp$0 = dataTypesP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllDataTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getDataTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__dataTypes_java_cache(null);
              this.get__dataTypes().clear();
            },
            getLibraries: function () {
              return _.kotlin.toList_1(this.get__libraries().values());
            },
            setLibraries: function (librariesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (librariesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__libraries_java_cache(null);
              if (!Kotlin.equals(this.get__libraries(), librariesP)) {
                this.get__libraries().clear();
                {
                  var tmp$0 = librariesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__libraries().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = librariesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'libraries', elem), 'libraries');
                  }
                }
              }
            },
            addLibraries: function (librariesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__libraries_java_cache(null);
              librariesP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'libraries', librariesP), 'libraries');
              var _key_ = librariesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__libraries().put(_key_, librariesP);
            },
            addAllLibraries: function (librariesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__libraries_java_cache(null);
              {
                var tmp$0 = librariesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__libraries().put(_key_, el);
                }
              }
              {
                var tmp$1 = librariesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'libraries', el_0), 'libraries');
                }
              }
            },
            removeLibraries: function (librariesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__libraries_java_cache(null);
              if (this.get__libraries().size() !== 0 && this.get__libraries().containsKey(librariesP.internalGetKey())) {
                this.get__libraries().remove(librariesP.internalGetKey());
                var tmp$0;
                ((tmp$0 = librariesP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllLibraries: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getLibraries()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__libraries_java_cache(null);
              this.get__libraries().clear();
            },
            getHubs: function () {
              return _.kotlin.toList_1(this.get__hubs().values());
            },
            setHubs: function (hubsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (hubsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__hubs_java_cache(null);
              if (!Kotlin.equals(this.get__hubs(), hubsP)) {
                this.get__hubs().clear();
                {
                  var tmp$0 = hubsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__hubs().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = hubsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'hubs', elem), 'hubs');
                  }
                }
              }
            },
            addHubs: function (hubsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__hubs_java_cache(null);
              hubsP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'hubs', hubsP), 'hubs');
              var _key_ = hubsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__hubs().put(_key_, hubsP);
            },
            addAllHubs: function (hubsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__hubs_java_cache(null);
              {
                var tmp$0 = hubsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__hubs().put(_key_, el);
                }
              }
              {
                var tmp$1 = hubsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'hubs', el_0), 'hubs');
                }
              }
            },
            removeHubs: function (hubsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__hubs_java_cache(null);
              if (this.get__hubs().size() !== 0 && this.get__hubs().containsKey(hubsP.internalGetKey())) {
                this.get__hubs().remove(hubsP.internalGetKey());
                var tmp$0;
                ((tmp$0 = hubsP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllHubs: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getHubs()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__hubs_java_cache(null);
              this.get__hubs().clear();
            },
            getMBindings: function () {
              return _.kotlin.toList_1(this.get__mBindings().values());
            },
            setMBindings: function (mBindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (mBindingsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__mBindings_java_cache(null);
              if (!Kotlin.equals(this.get__mBindings(), mBindingsP)) {
                this.get__mBindings().clear();
                {
                  var tmp$0 = mBindingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__mBindings().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = mBindingsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'mBindings', elem), 'mBindings');
                  }
                }
              }
            },
            addMBindings: function (mBindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__mBindings_java_cache(null);
              mBindingsP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'mBindings', mBindingsP), 'mBindings');
              var _key_ = mBindingsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__mBindings().put(_key_, mBindingsP);
            },
            addAllMBindings: function (mBindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__mBindings_java_cache(null);
              {
                var tmp$0 = mBindingsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__mBindings().put(_key_, el);
                }
              }
              {
                var tmp$1 = mBindingsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'mBindings', el_0), 'mBindings');
                }
              }
            },
            removeMBindings: function (mBindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__mBindings_java_cache(null);
              if (this.get__mBindings().size() !== 0 && this.get__mBindings().containsKey(mBindingsP.internalGetKey())) {
                this.get__mBindings().remove(mBindingsP.internalGetKey());
                var tmp$0;
                ((tmp$0 = mBindingsP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllMBindings: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getMBindings()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__mBindings_java_cache(null);
              this.get__mBindings().clear();
            },
            getDeployUnits: function () {
              return _.kotlin.toList_1(this.get__deployUnits().values());
            },
            setDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (!Kotlin.equals(this.get__deployUnits(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__deployUnits().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = deployUnitsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'deployUnits', elem), 'deployUnits');
                  }
                }
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              deployUnitsP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'deployUnits', deployUnitsP), 'deployUnits');
              var _key_ = deployUnitsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
              {
                var tmp$1 = deployUnitsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'deployUnits', el_0), 'deployUnits');
                }
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(deployUnitsP.internalGetKey())) {
                this.get__deployUnits().remove(deployUnitsP.internalGetKey());
                var tmp$0;
                ((tmp$0 = deployUnitsP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getDeployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__deployUnits_java_cache(null);
              this.get__deployUnits().clear();
            },
            getNodeNetworks: function () {
              return _.kotlin.toList_1(this.get__nodeNetworks().values());
            },
            setNodeNetworks: function (nodeNetworksP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (nodeNetworksP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__nodeNetworks_java_cache(null);
              if (!Kotlin.equals(this.get__nodeNetworks(), nodeNetworksP)) {
                this.get__nodeNetworks().clear();
                {
                  var tmp$0 = nodeNetworksP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__nodeNetworks().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = nodeNetworksP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'nodeNetworks', elem), 'nodeNetworks');
                  }
                }
              }
            },
            addNodeNetworks: function (nodeNetworksP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__nodeNetworks_java_cache(null);
              nodeNetworksP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'nodeNetworks', nodeNetworksP), 'nodeNetworks');
              var _key_ = nodeNetworksP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__nodeNetworks().put(_key_, nodeNetworksP);
            },
            addAllNodeNetworks: function (nodeNetworksP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__nodeNetworks_java_cache(null);
              {
                var tmp$0 = nodeNetworksP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__nodeNetworks().put(_key_, el);
                }
              }
              {
                var tmp$1 = nodeNetworksP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'nodeNetworks', el_0), 'nodeNetworks');
                }
              }
            },
            removeNodeNetworks: function (nodeNetworksP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__nodeNetworks_java_cache(null);
              if (this.get__nodeNetworks().size() !== 0 && this.get__nodeNetworks().containsKey(nodeNetworksP.internalGetKey())) {
                this.get__nodeNetworks().remove(nodeNetworksP.internalGetKey());
                var tmp$0;
                ((tmp$0 = nodeNetworksP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllNodeNetworks: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getNodeNetworks()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__nodeNetworks_java_cache(null);
              this.get__nodeNetworks().clear();
            },
            getGroups: function () {
              return _.kotlin.toList_1(this.get__groups().values());
            },
            setGroups: function (groupsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (groupsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__groups_java_cache(null);
              if (!Kotlin.equals(this.get__groups(), groupsP)) {
                this.get__groups().clear();
                {
                  var tmp$0 = groupsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__groups().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = groupsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'groups', elem), 'groups');
                  }
                }
              }
            },
            addGroups: function (groupsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__groups_java_cache(null);
              groupsP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'groups', groupsP), 'groups');
              var _key_ = groupsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__groups().put(_key_, groupsP);
            },
            addAllGroups: function (groupsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__groups_java_cache(null);
              {
                var tmp$0 = groupsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__groups().put(_key_, el);
                }
              }
              {
                var tmp$1 = groupsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'groups', el_0), 'groups');
                }
              }
            },
            removeGroups: function (groupsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__groups_java_cache(null);
              if (this.get__groups().size() !== 0 && this.get__groups().containsKey(groupsP.internalGetKey())) {
                this.get__groups().remove(groupsP.internalGetKey());
                var tmp$0;
                ((tmp$0 = groupsP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllGroups: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getGroups()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__groups_java_cache(null);
              this.get__groups().clear();
            },
            getAdaptationPrimitiveTypes: function () {
              return _.kotlin.toList_1(this.get__adaptationPrimitiveTypes().values());
            },
            setAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (adaptationPrimitiveTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__adaptationPrimitiveTypes_java_cache(null);
              if (!Kotlin.equals(this.get__adaptationPrimitiveTypes(), adaptationPrimitiveTypesP)) {
                this.get__adaptationPrimitiveTypes().clear();
                {
                  var tmp$0 = adaptationPrimitiveTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__adaptationPrimitiveTypes().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = adaptationPrimitiveTypesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'adaptationPrimitiveTypes', elem), 'adaptationPrimitiveTypes');
                  }
                }
              }
            },
            addAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__adaptationPrimitiveTypes_java_cache(null);
              adaptationPrimitiveTypesP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'adaptationPrimitiveTypes', adaptationPrimitiveTypesP), 'adaptationPrimitiveTypes');
              var _key_ = adaptationPrimitiveTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__adaptationPrimitiveTypes().put(_key_, adaptationPrimitiveTypesP);
            },
            addAllAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__adaptationPrimitiveTypes_java_cache(null);
              {
                var tmp$0 = adaptationPrimitiveTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__adaptationPrimitiveTypes().put(_key_, el);
                }
              }
              {
                var tmp$1 = adaptationPrimitiveTypesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'adaptationPrimitiveTypes', el_0), 'adaptationPrimitiveTypes');
                }
              }
            },
            removeAdaptationPrimitiveTypes: function (adaptationPrimitiveTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__adaptationPrimitiveTypes_java_cache(null);
              if (this.get__adaptationPrimitiveTypes().size() !== 0 && this.get__adaptationPrimitiveTypes().containsKey(adaptationPrimitiveTypesP.internalGetKey())) {
                this.get__adaptationPrimitiveTypes().remove(adaptationPrimitiveTypesP.internalGetKey());
                var tmp$0;
                ((tmp$0 = adaptationPrimitiveTypesP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllAdaptationPrimitiveTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getAdaptationPrimitiveTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__adaptationPrimitiveTypes_java_cache(null);
              this.get__adaptationPrimitiveTypes().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createContainerRoot();
              selfObjectClone.setGenerated_KMF_ID(this.getGenerated_KMF_ID());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.getNodes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$1 = this.getTypeDefinitions().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$2 = this.getRepositories().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  sub_1.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$3 = this.getDataTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_2 = tmp$3.next();
                  sub_2.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$4 = this.getLibraries().iterator();
                while (tmp$4.hasNext()) {
                  var sub_3 = tmp$4.next();
                  sub_3.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$5 = this.getHubs().iterator();
                while (tmp$5.hasNext()) {
                  var sub_4 = tmp$5.next();
                  sub_4.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$6 = this.getMBindings().iterator();
                while (tmp$6.hasNext()) {
                  var sub_5 = tmp$6.next();
                  sub_5.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$7 = this.getDeployUnits().iterator();
                while (tmp$7.hasNext()) {
                  var sub_6 = tmp$7.next();
                  sub_6.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$8 = this.getNodeNetworks().iterator();
                while (tmp$8.hasNext()) {
                  var sub_7 = tmp$8.next();
                  sub_7.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$9 = this.getGroups().iterator();
                while (tmp$9.hasNext()) {
                  var sub_8 = tmp$9.next();
                  sub_8.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$10 = this.getAdaptationPrimitiveTypes().iterator();
                while (tmp$10.hasNext()) {
                  var sub_9 = tmp$10.next();
                  sub_9.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getNodes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addNodes(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained nodes from ContainerRoot : ' + this.getNodes());
                    }
                    clonedSelfObject.addNodes(interObj);
                  }
                }
              }
              {
                var tmp$1 = this.getTypeDefinitions().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addTypeDefinitions(sub_0);
                  }
                   else {
                    var interObj_0 = addrs.get(sub_0);
                    if (interObj_0 == null) {
                      throw new Kotlin.Exception('Non contained typeDefinitions from ContainerRoot : ' + this.getTypeDefinitions());
                    }
                    clonedSelfObject.addTypeDefinitions(interObj_0);
                  }
                }
              }
              {
                var tmp$2 = this.getRepositories().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                    clonedSelfObject.addRepositories(sub_1);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_1);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained repositories from ContainerRoot : ' + this.getRepositories());
                    }
                    clonedSelfObject.addRepositories(interObj_1);
                  }
                }
              }
              {
                var tmp$3 = this.getDataTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_2 = tmp$3.next();
                  if (mutableOnly && sub_2.isRecursiveReadOnly()) {
                    clonedSelfObject.addDataTypes(sub_2);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_2);
                    if (interObj_2 == null) {
                      throw new Kotlin.Exception('Non contained dataTypes from ContainerRoot : ' + this.getDataTypes());
                    }
                    clonedSelfObject.addDataTypes(interObj_2);
                  }
                }
              }
              {
                var tmp$4 = this.getLibraries().iterator();
                while (tmp$4.hasNext()) {
                  var sub_3 = tmp$4.next();
                  if (mutableOnly && sub_3.isRecursiveReadOnly()) {
                    clonedSelfObject.addLibraries(sub_3);
                  }
                   else {
                    var interObj_3 = addrs.get(sub_3);
                    if (interObj_3 == null) {
                      throw new Kotlin.Exception('Non contained libraries from ContainerRoot : ' + this.getLibraries());
                    }
                    clonedSelfObject.addLibraries(interObj_3);
                  }
                }
              }
              {
                var tmp$5 = this.getHubs().iterator();
                while (tmp$5.hasNext()) {
                  var sub_4 = tmp$5.next();
                  if (mutableOnly && sub_4.isRecursiveReadOnly()) {
                    clonedSelfObject.addHubs(sub_4);
                  }
                   else {
                    var interObj_4 = addrs.get(sub_4);
                    if (interObj_4 == null) {
                      throw new Kotlin.Exception('Non contained hubs from ContainerRoot : ' + this.getHubs());
                    }
                    clonedSelfObject.addHubs(interObj_4);
                  }
                }
              }
              {
                var tmp$6 = this.getMBindings().iterator();
                while (tmp$6.hasNext()) {
                  var sub_5 = tmp$6.next();
                  if (mutableOnly && sub_5.isRecursiveReadOnly()) {
                    clonedSelfObject.addMBindings(sub_5);
                  }
                   else {
                    var interObj_5 = addrs.get(sub_5);
                    if (interObj_5 == null) {
                      throw new Kotlin.Exception('Non contained mBindings from ContainerRoot : ' + this.getMBindings());
                    }
                    clonedSelfObject.addMBindings(interObj_5);
                  }
                }
              }
              {
                var tmp$7 = this.getDeployUnits().iterator();
                while (tmp$7.hasNext()) {
                  var sub_6 = tmp$7.next();
                  if (mutableOnly && sub_6.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub_6);
                  }
                   else {
                    var interObj_6 = addrs.get(sub_6);
                    if (interObj_6 == null) {
                      throw new Kotlin.Exception('Non contained deployUnits from ContainerRoot : ' + this.getDeployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj_6);
                  }
                }
              }
              {
                var tmp$8 = this.getNodeNetworks().iterator();
                while (tmp$8.hasNext()) {
                  var sub_7 = tmp$8.next();
                  if (mutableOnly && sub_7.isRecursiveReadOnly()) {
                    clonedSelfObject.addNodeNetworks(sub_7);
                  }
                   else {
                    var interObj_7 = addrs.get(sub_7);
                    if (interObj_7 == null) {
                      throw new Kotlin.Exception('Non contained nodeNetworks from ContainerRoot : ' + this.getNodeNetworks());
                    }
                    clonedSelfObject.addNodeNetworks(interObj_7);
                  }
                }
              }
              {
                var tmp$9 = this.getGroups().iterator();
                while (tmp$9.hasNext()) {
                  var sub_8 = tmp$9.next();
                  if (mutableOnly && sub_8.isRecursiveReadOnly()) {
                    clonedSelfObject.addGroups(sub_8);
                  }
                   else {
                    var interObj_8 = addrs.get(sub_8);
                    if (interObj_8 == null) {
                      throw new Kotlin.Exception('Non contained groups from ContainerRoot : ' + this.getGroups());
                    }
                    clonedSelfObject.addGroups(interObj_8);
                  }
                }
              }
              {
                var tmp$10 = this.getAdaptationPrimitiveTypes().iterator();
                while (tmp$10.hasNext()) {
                  var sub_9 = tmp$10.next();
                  if (mutableOnly && sub_9.isRecursiveReadOnly()) {
                    clonedSelfObject.addAdaptationPrimitiveTypes(sub_9);
                  }
                   else {
                    var interObj_9 = addrs.get(sub_9);
                    if (interObj_9 == null) {
                      throw new Kotlin.Exception('Non contained adaptationPrimitiveTypes from ContainerRoot : ' + this.getAdaptationPrimitiveTypes());
                    }
                    clonedSelfObject.addAdaptationPrimitiveTypes(interObj_9);
                  }
                }
              }
              {
                var tmp$11 = this.getNodes().iterator();
                while (tmp$11.hasNext()) {
                  var sub_10 = tmp$11.next();
                  sub_10.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$12 = this.getTypeDefinitions().iterator();
                while (tmp$12.hasNext()) {
                  var sub_11 = tmp$12.next();
                  sub_11.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$13 = this.getRepositories().iterator();
                while (tmp$13.hasNext()) {
                  var sub_12 = tmp$13.next();
                  sub_12.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$14 = this.getDataTypes().iterator();
                while (tmp$14.hasNext()) {
                  var sub_13 = tmp$14.next();
                  sub_13.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$15 = this.getLibraries().iterator();
                while (tmp$15.hasNext()) {
                  var sub_14 = tmp$15.next();
                  sub_14.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$16 = this.getHubs().iterator();
                while (tmp$16.hasNext()) {
                  var sub_15 = tmp$16.next();
                  sub_15.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$17 = this.getMBindings().iterator();
                while (tmp$17.hasNext()) {
                  var sub_16 = tmp$17.next();
                  sub_16.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$18 = this.getDeployUnits().iterator();
                while (tmp$18.hasNext()) {
                  var sub_17 = tmp$18.next();
                  sub_17.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$19 = this.getNodeNetworks().iterator();
                while (tmp$19.hasNext()) {
                  var sub_18 = tmp$19.next();
                  sub_18.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$20 = this.getGroups().iterator();
                while (tmp$20.hasNext()) {
                  var sub_19 = tmp$20.next();
                  sub_19.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$21 = this.getAdaptationPrimitiveTypes().iterator();
                while (tmp$21.hasNext()) {
                  var sub_20 = tmp$21.next();
                  sub_20.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGenerated_KMF_ID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_nodes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addNodes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllNodes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeNodes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllNodes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__nodes().size() !== 0 && this.get__nodes().containsKey(value)) {
                    var obj = this.get__nodes().get(value);
                    this.get__nodes().put(obj.internalGetKey(), obj);
                    this.get__nodes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinitions()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addTypeDefinitions(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllTypeDefinitions(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeTypeDefinitions(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllTypeDefinitions();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__typeDefinitions().size() !== 0 && this.get__typeDefinitions().containsKey(value)) {
                    var obj_0 = this.get__typeDefinitions().get(value);
                    this.get__typeDefinitions().put(obj_0.internalGetKey(), obj_0);
                    this.get__typeDefinitions().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_repositories()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addRepositories(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllRepositories(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeRepositories(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRepositories();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__repositories().size() !== 0 && this.get__repositories().containsKey(value)) {
                    var obj_1 = this.get__repositories().get(value);
                    this.get__repositories().put(obj_1.internalGetKey(), obj_1);
                    this.get__repositories().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dataTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDataTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDataTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDataTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDataTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__dataTypes().size() !== 0 && this.get__dataTypes().containsKey(value)) {
                    var obj_2 = this.get__dataTypes().get(value);
                    this.get__dataTypes().put(obj_2.internalGetKey(), obj_2);
                    this.get__dataTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_libraries()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addLibraries(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllLibraries(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeLibraries(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllLibraries();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__libraries().size() !== 0 && this.get__libraries().containsKey(value)) {
                    var obj_3 = this.get__libraries().get(value);
                    this.get__libraries().put(obj_3.internalGetKey(), obj_3);
                    this.get__libraries().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_hubs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addHubs(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllHubs(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeHubs(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllHubs();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__hubs().size() !== 0 && this.get__hubs().containsKey(value)) {
                    var obj_4 = this.get__hubs().get(value);
                    this.get__hubs().put(obj_4.internalGetKey(), obj_4);
                    this.get__hubs().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_mBindings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addMBindings(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllMBindings(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeMBindings(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllMBindings();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__mBindings().size() !== 0 && this.get__mBindings().containsKey(value)) {
                    var obj_5 = this.get__mBindings().get(value);
                    this.get__mBindings().put(obj_5.internalGetKey(), obj_5);
                    this.get__mBindings().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj_6 = this.get__deployUnits().get(value);
                    this.get__deployUnits().put(obj_6.internalGetKey(), obj_6);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_nodeNetworks()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addNodeNetworks(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllNodeNetworks(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeNodeNetworks(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllNodeNetworks();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__nodeNetworks().size() !== 0 && this.get__nodeNetworks().containsKey(value)) {
                    var obj_7 = this.get__nodeNetworks().get(value);
                    this.get__nodeNetworks().put(obj_7.internalGetKey(), obj_7);
                    this.get__nodeNetworks().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_groups()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addGroups(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllGroups(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeGroups(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllGroups();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__groups().size() !== 0 && this.get__groups().containsKey(value)) {
                    var obj_8 = this.get__groups().get(value);
                    this.get__groups().put(obj_8.internalGetKey(), obj_8);
                    this.get__groups().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addAdaptationPrimitiveTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllAdaptationPrimitiveTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeAdaptationPrimitiveTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllAdaptationPrimitiveTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__adaptationPrimitiveTypes().size() !== 0 && this.get__adaptationPrimitiveTypes().containsKey(value)) {
                    var obj_9 = this.get__adaptationPrimitiveTypes().get(value);
                    this.get__adaptationPrimitiveTypes().put(obj_9.internalGetKey(), obj_9);
                    this.get__adaptationPrimitiveTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getGenerated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findNodesByID: function (key) {
              return this.get__nodes().get(key);
            },
            findTypeDefinitionsByID: function (key) {
              return this.get__typeDefinitions().get(key);
            },
            findRepositoriesByID: function (key) {
              return this.get__repositories().get(key);
            },
            findDataTypesByID: function (key) {
              return this.get__dataTypes().get(key);
            },
            findLibrariesByID: function (key) {
              return this.get__libraries().get(key);
            },
            findHubsByID: function (key) {
              return this.get__hubs().get(key);
            },
            findMBindingsByID: function (key) {
              return this.get__mBindings().get(key);
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findNodeNetworksByID: function (key) {
              return this.get__nodeNetworks().get(key);
            },
            findGroupsByID: function (key) {
              return this.get__groups().get(key);
            },
            findAdaptationPrimitiveTypesByID: function (key) {
              return this.get__adaptationPrimitiveTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_nodes()) {
                var objFound = this.findNodesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinitions()) {
                var objFound_0 = this.findTypeDefinitionsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_repositories()) {
                var objFound_1 = this.findRepositoriesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_1 != null) {
                  tmp$0 = objFound_1.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_1;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dataTypes()) {
                var objFound_2 = this.findDataTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_2 != null) {
                  tmp$0 = objFound_2.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_2;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_libraries()) {
                var objFound_3 = this.findLibrariesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_3 != null) {
                  tmp$0 = objFound_3.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_3;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_hubs()) {
                var objFound_4 = this.findHubsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_4 != null) {
                  tmp$0 = objFound_4.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_4;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_mBindings()) {
                var objFound_5 = this.findMBindingsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_5 != null) {
                  throw new Kotlin.Exception('KMFQL : rejected sucessor' + relationName + ' from ContainerRoot');
                }
                 else {
                  tmp$0 = objFound_5;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound_6 = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_6 != null) {
                  tmp$0 = objFound_6.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_6;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_nodeNetworks()) {
                var objFound_7 = this.findNodeNetworksByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_7 != null) {
                  tmp$0 = objFound_7.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_7;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_groups()) {
                var objFound_8 = this.findGroupsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_8 != null) {
                  tmp$0 = objFound_8.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_8;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_adaptationPrimitiveTypes()) {
                var objFound_9 = this.findAdaptationPrimitiveTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_9 != null) {
                  throw new Kotlin.Exception('KMFQL : rejected sucessor' + relationName + ' from ContainerRoot');
                }
                 else {
                  tmp$0 = objFound_9;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getNodes().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findNodesByID(subElement.getName());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              {
                var tmp$1 = this.getTypeDefinitions().iterator();
                while (tmp$1.hasNext()) {
                  var subElement_0 = tmp$1.next();
                  var foundedElement_0 = similarObjCasted.findTypeDefinitionsByID(subElement_0.getName());
                  if (foundedElement_0 == null || !Kotlin.equals(foundedElement_0, subElement_0)) {
                    return false;
                  }
                }
              }
              {
                var tmp$2 = this.getRepositories().iterator();
                while (tmp$2.hasNext()) {
                  var subElement_1 = tmp$2.next();
                  var foundedElement_1 = similarObjCasted.findRepositoriesByID(subElement_1.getUrl());
                  if (foundedElement_1 == null || !Kotlin.equals(foundedElement_1, subElement_1)) {
                    return false;
                  }
                }
              }
              {
                var tmp$3 = this.getDataTypes().iterator();
                while (tmp$3.hasNext()) {
                  var subElement_2 = tmp$3.next();
                  var foundedElement_2 = similarObjCasted.findDataTypesByID(subElement_2.getName());
                  if (foundedElement_2 == null || !Kotlin.equals(foundedElement_2, subElement_2)) {
                    return false;
                  }
                }
              }
              {
                var tmp$4 = this.getLibraries().iterator();
                while (tmp$4.hasNext()) {
                  var subElement_3 = tmp$4.next();
                  var foundedElement_3 = similarObjCasted.findLibrariesByID(subElement_3.getName());
                  if (foundedElement_3 == null || !Kotlin.equals(foundedElement_3, subElement_3)) {
                    return false;
                  }
                }
              }
              {
                var tmp$5 = this.getHubs().iterator();
                while (tmp$5.hasNext()) {
                  var subElement_4 = tmp$5.next();
                  var foundedElement_4 = similarObjCasted.findHubsByID(subElement_4.getName());
                  if (foundedElement_4 == null || !Kotlin.equals(foundedElement_4, subElement_4)) {
                    return false;
                  }
                }
              }
              {
                var tmp$6 = this.getMBindings().iterator();
                while (tmp$6.hasNext()) {
                  var subElement_5 = tmp$6.next();
                  var foundedElement_5 = similarObjCasted.findMBindingsByID(subElement_5.getGenerated_KMF_ID());
                  if (foundedElement_5 == null || !Kotlin.equals(foundedElement_5, subElement_5)) {
                    return false;
                  }
                }
              }
              {
                var tmp$7 = this.getDeployUnits().iterator();
                while (tmp$7.hasNext()) {
                  var subElement_6 = tmp$7.next();
                  var foundedElement_6 = similarObjCasted.findDeployUnitsByID(subElement_6.getGenerated_KMF_ID());
                  if (foundedElement_6 == null || !Kotlin.equals(foundedElement_6, subElement_6)) {
                    return false;
                  }
                }
              }
              {
                var tmp$8 = this.getNodeNetworks().iterator();
                while (tmp$8.hasNext()) {
                  var subElement_7 = tmp$8.next();
                  var foundedElement_7 = similarObjCasted.findNodeNetworksByID(subElement_7.getGenerated_KMF_ID());
                  if (foundedElement_7 == null || !Kotlin.equals(foundedElement_7, subElement_7)) {
                    return false;
                  }
                }
              }
              {
                var tmp$9 = this.getGroups().iterator();
                while (tmp$9.hasNext()) {
                  var subElement_8 = tmp$9.next();
                  var foundedElement_8 = similarObjCasted.findGroupsByID(subElement_8.getName());
                  if (foundedElement_8 == null || !Kotlin.equals(foundedElement_8, subElement_8)) {
                    return false;
                  }
                }
              }
              {
                var tmp$10 = this.getAdaptationPrimitiveTypes().iterator();
                while (tmp$10.hasNext()) {
                  var subElement_9 = tmp$10.next();
                  var foundedElement_9 = similarObjCasted.findAdaptationPrimitiveTypesByID(subElement_9.getName());
                  if (foundedElement_9 == null || !Kotlin.equals(foundedElement_9, subElement_9)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ContainerRoot) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ContainerRootImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getGenerated_KMF_ID(), similarObjCasted.getGenerated_KMF_ID())) {
                return false;
              }
              if (this.getNodes().size() !== similarObjCasted.getNodes().size()) {
                return false;
              }
              if (this.getTypeDefinitions().size() !== similarObjCasted.getTypeDefinitions().size()) {
                return false;
              }
              if (this.getRepositories().size() !== similarObjCasted.getRepositories().size()) {
                return false;
              }
              if (this.getDataTypes().size() !== similarObjCasted.getDataTypes().size()) {
                return false;
              }
              if (this.getLibraries().size() !== similarObjCasted.getLibraries().size()) {
                return false;
              }
              if (this.getHubs().size() !== similarObjCasted.getHubs().size()) {
                return false;
              }
              if (this.getMBindings().size() !== similarObjCasted.getMBindings().size()) {
                return false;
              }
              if (this.getDeployUnits().size() !== similarObjCasted.getDeployUnits().size()) {
                return false;
              }
              if (this.getNodeNetworks().size() !== similarObjCasted.getNodeNetworks().size()) {
                return false;
              }
              if (this.getGroups().size() !== similarObjCasted.getGroups().size()) {
                return false;
              }
              if (this.getAdaptationPrimitiveTypes().size() !== similarObjCasted.getAdaptationPrimitiveTypes().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(11);
              result.addAll(this.get__nodes().values());
              result.addAll(this.get__typeDefinitions().values());
              result.addAll(this.get__repositories().values());
              result.addAll(this.get__dataTypes().values());
              result.addAll(this.get__libraries().values());
              result.addAll(this.get__hubs().values());
              result.addAll(this.get__mBindings().values());
              result.addAll(this.get__deployUnits().values());
              result.addAll(this.get__nodeNetworks().values());
              result.addAll(this.get__groups().values());
              result.addAll(this.get__adaptationPrimitiveTypes().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.ContainerRoot';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ContainerRoot) || Kotlin.isType(similarObj, _.org.kevoree.impl.ContainerRootImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getGenerated_KMF_ID();
              var tmp$0;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getGenerated_KMF_ID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
              return traces;
            }
          }),
          InstanceImpl: Kotlin.createClass(classes.c8, classes.cu, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_metaData = '';
              this.$_started = true;
              this.$_typeDefinition = null;
              this.$_dictionary = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__metaData: function () {
              return this.$_metaData;
            },
            set__metaData: function (tmp$0) {
              this.$_metaData = tmp$0;
            },
            get__started: function () {
              return this.$_started;
            },
            set__started: function (tmp$0) {
              this.$_started = tmp$0;
            },
            get__typeDefinition: function () {
              return this.$_typeDefinition;
            },
            set__typeDefinition: function (tmp$0) {
              this.$_typeDefinition = tmp$0;
            },
            get__dictionary: function () {
              return this.$_dictionary;
            },
            set__dictionary: function (tmp$0) {
              this.$_dictionary = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              var subsubsubsubtypeDefinition = this.getTypeDefinition();
              if (subsubsubsubtypeDefinition != null) {
                subsubsubsubtypeDefinition.setRecursiveReadOnly();
              }
              var subsubsubsubdictionary = this.getDictionary();
              if (subsubsubsubdictionary != null) {
                subsubsubsubdictionary.setRecursiveReadOnly();
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__dictionary()) != null ? tmp$0.delete() : null;
              this.set__typeDefinition(null);
              this.set__dictionary(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getMetaData: function () {
              return this.get__metaData();
            },
            setMetaData: function (metaDataP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__metaData(metaDataP);
            },
            getStarted: function () {
              return this.get__started();
            },
            setStarted: function (startedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__started(startedP);
            },
            getTypeDefinition: function () {
              return this.get__typeDefinition();
            },
            setTypeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__typeDefinition(), typeDefinitionP)) {
                this.set__typeDefinition(typeDefinitionP);
              }
            },
            getDictionary: function () {
              return this.get__dictionary();
            },
            setDictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionary(), dictionaryP)) {
                if (this.get__dictionary() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionary()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  dictionaryP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionary', null), 'dictionary');
                }
                this.set__dictionary(dictionaryP);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createInstance();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setMetaData(this.getMetaData());
              selfObjectClone.setStarted(this.getStarted());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionary = this.getDictionary();
              if (subsubsubsubdictionary != null) {
                subsubsubsubdictionary.getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (this.getTypeDefinition() != null) {
                var tmp$0;
                if (mutableOnly && ((tmp$0 = this.getTypeDefinition()) != null ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$1;
                  clonedSelfObject.setTypeDefinition((tmp$1 = this.getTypeDefinition()) != null ? tmp$1 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.getTypeDefinition());
                  if (interObj == null) {
                    throw new Kotlin.Exception('Non contained typeDefinition from Instance : ' + this.getTypeDefinition());
                  }
                  clonedSelfObject.setTypeDefinition(interObj);
                }
              }
              if (this.getDictionary() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.getDictionary()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.setDictionary((tmp$3 = this.getDictionary()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionary());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionary from Instance : ' + this.getDictionary());
                  }
                  clonedSelfObject.setDictionary(interObj_0);
                }
              }
              var subsubsubdictionary = this.getDictionary();
              if (subsubsubdictionary != null) {
                subsubsubdictionary.resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setMetaData(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_started()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStarted(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setTypeDefinition(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setTypeDefinition(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setTypeDefinition(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionary(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionary(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionary(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Instance) || !Kotlin.isType(similarObj, _.org.kevoree.impl.InstanceImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getMetaData(), similarObjCasted.getMetaData())) {
                return false;
              }
              if (!Kotlin.equals(this.getStarted(), similarObjCasted.getStarted())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionary(), similarObjCasted.getDictionary())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              if (this.get__dictionary() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionary()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Instance';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Instance) || Kotlin.isType(similarObj, _.org.kevoree.impl.InstanceImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$10, tmp$11;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getMetaData();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getMetaData() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStarted();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getStarted() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_started(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_started(), null, attVal2.toString(), null));
                }
              }
              attVal = null;
              attVal = (tmp$9 = this.getTypeDefinition()) != null ? tmp$9.path() : null;
              attVal2 = null;
              attVal2 = (tmp$11 = (tmp$10 = similarObjCasted) != null ? tmp$10.getTypeDefinition() : null) != null ? tmp$11.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$12;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                }
              }
              return traces;
            }
          }),
          ComponentTypeImpl: Kotlin.createClass(classes.c8, classes.cs, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_factoryBean = '';
              this.$_bean = '';
              this.$_abstract = false;
              this.$_startMethod = '';
              this.$_stopMethod = '';
              this.$_updateMethod = '';
              this.$_deployUnits_java_cache = null;
              this.$_deployUnits = new Kotlin.ComplexHashMap(0);
              this.$_dictionaryType = null;
              this.$_superTypes_java_cache = null;
              this.$_superTypes = new Kotlin.ComplexHashMap(0);
              this.$_required_java_cache = null;
              this.$_required = new Kotlin.ComplexHashMap(0);
              this.$_integrationPatterns_java_cache = null;
              this.$_integrationPatterns = new Kotlin.ComplexHashMap(0);
              this.$_extraFonctionalProperties = null;
              this.$_provided_java_cache = null;
              this.$_provided = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__factoryBean: function () {
              return this.$_factoryBean;
            },
            set__factoryBean: function (tmp$0) {
              this.$_factoryBean = tmp$0;
            },
            get__bean: function () {
              return this.$_bean;
            },
            set__bean: function (tmp$0) {
              this.$_bean = tmp$0;
            },
            get__abstract: function () {
              return this.$_abstract;
            },
            set__abstract: function (tmp$0) {
              this.$_abstract = tmp$0;
            },
            get__startMethod: function () {
              return this.$_startMethod;
            },
            set__startMethod: function (tmp$0) {
              this.$_startMethod = tmp$0;
            },
            get__stopMethod: function () {
              return this.$_stopMethod;
            },
            set__stopMethod: function (tmp$0) {
              this.$_stopMethod = tmp$0;
            },
            get__updateMethod: function () {
              return this.$_updateMethod;
            },
            set__updateMethod: function (tmp$0) {
              this.$_updateMethod = tmp$0;
            },
            get__deployUnits_java_cache: function () {
              return this.$_deployUnits_java_cache;
            },
            set__deployUnits_java_cache: function (tmp$0) {
              this.$_deployUnits_java_cache = tmp$0;
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get__dictionaryType: function () {
              return this.$_dictionaryType;
            },
            set__dictionaryType: function (tmp$0) {
              this.$_dictionaryType = tmp$0;
            },
            get__superTypes_java_cache: function () {
              return this.$_superTypes_java_cache;
            },
            set__superTypes_java_cache: function (tmp$0) {
              this.$_superTypes_java_cache = tmp$0;
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get__required_java_cache: function () {
              return this.$_required_java_cache;
            },
            set__required_java_cache: function (tmp$0) {
              this.$_required_java_cache = tmp$0;
            },
            get__required: function () {
              return this.$_required;
            },
            get__integrationPatterns_java_cache: function () {
              return this.$_integrationPatterns_java_cache;
            },
            set__integrationPatterns_java_cache: function (tmp$0) {
              this.$_integrationPatterns_java_cache = tmp$0;
            },
            get__integrationPatterns: function () {
              return this.$_integrationPatterns;
            },
            get__extraFonctionalProperties: function () {
              return this.$_extraFonctionalProperties;
            },
            set__extraFonctionalProperties: function (tmp$0) {
              this.$_extraFonctionalProperties = tmp$0;
            },
            get__provided_java_cache: function () {
              return this.$_provided_java_cache;
            },
            set__provided_java_cache: function (tmp$0) {
              this.$_provided_java_cache = tmp$0;
            },
            get__provided: function () {
              return this.$_provided;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.setRecursiveReadOnly();
              }
              {
                var tmp$1 = this.getSuperTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              {
                var tmp$2 = this.getRequired().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  sub_1.setRecursiveReadOnly();
                }
              }
              {
                var tmp$3 = this.getIntegrationPatterns().iterator();
                while (tmp$3.hasNext()) {
                  var sub_2 = tmp$3.next();
                  sub_2.setRecursiveReadOnly();
                }
              }
              var subsubsubsubextraFonctionalProperties = this.getExtraFonctionalProperties();
              if (subsubsubsubextraFonctionalProperties != null) {
                subsubsubsubextraFonctionalProperties.setRecursiveReadOnly();
              }
              {
                var tmp$4 = this.getProvided().iterator();
                while (tmp$4.hasNext()) {
                  var sub_3 = tmp$4.next();
                  sub_3.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0, tmp$3, tmp$5, tmp$6, tmp$7;
              (tmp$0 = this.get__dictionaryType()) != null ? tmp$0.delete() : null;
              {
                var tmp$1 = _.kotlin.iterator(this.get__required());
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              {
                var tmp$2 = _.kotlin.iterator(this.get__integrationPatterns());
                while (tmp$2.hasNext()) {
                  var el_0 = tmp$2.next();
                  _.kotlin.get_value(el_0).delete();
                }
              }
              (tmp$3 = this.get__extraFonctionalProperties()) != null ? tmp$3.delete() : null;
              {
                var tmp$4 = _.kotlin.iterator(this.get__provided());
                while (tmp$4.hasNext()) {
                  var el_1 = tmp$4.next();
                  _.kotlin.get_value(el_1).delete();
                }
              }
              (tmp$5 = this.get__required()) != null ? tmp$5.clear() : null;
              this.set__required_java_cache(null);
              (tmp$6 = this.get__integrationPatterns()) != null ? tmp$6.clear() : null;
              this.set__integrationPatterns_java_cache(null);
              this.set__extraFonctionalProperties(null);
              (tmp$7 = this.get__provided()) != null ? tmp$7.clear() : null;
              this.set__provided_java_cache(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getFactoryBean: function () {
              return this.get__factoryBean();
            },
            setFactoryBean: function (factoryBeanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__factoryBean(factoryBeanP);
            },
            getBean: function () {
              return this.get__bean();
            },
            setBean: function (beanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__bean(beanP);
            },
            getAbstract: function () {
              return this.get__abstract();
            },
            setAbstract: function (abstractP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__abstract(abstractP);
            },
            getStartMethod: function () {
              return this.get__startMethod();
            },
            setStartMethod: function (startMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__startMethod(startMethodP);
            },
            getStopMethod: function () {
              return this.get__stopMethod();
            },
            setStopMethod: function (stopMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__stopMethod(stopMethodP);
            },
            getUpdateMethod: function () {
              return this.get__updateMethod();
            },
            setUpdateMethod: function (updateMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__updateMethod(updateMethodP);
            },
            getDeployUnits: function () {
              return _.kotlin.toList_1(this.get__deployUnits().values());
            },
            setDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (!Kotlin.equals(this.get__deployUnits(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__deployUnits().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              var _key_ = deployUnitsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(deployUnitsP.internalGetKey())) {
                this.get__deployUnits().remove(deployUnitsP.internalGetKey());
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getDeployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__deployUnits_java_cache(null);
              this.get__deployUnits().clear();
            },
            getDictionaryType: function () {
              return this.get__dictionaryType();
            },
            setDictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionaryType(), dictionaryTypeP)) {
                if (this.get__dictionaryType() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  dictionaryTypeP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.set__dictionaryType(dictionaryTypeP);
              }
            },
            getSuperTypes: function () {
              return _.kotlin.toList_1(this.get__superTypes().values());
            },
            setSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (!Kotlin.equals(this.get__superTypes(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__superTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              var _key_ = superTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(superTypesP.internalGetKey())) {
                this.get__superTypes().remove(superTypesP.internalGetKey());
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getSuperTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__superTypes_java_cache(null);
              this.get__superTypes().clear();
            },
            getRequired: function () {
              return _.kotlin.toList_1(this.get__required().values());
            },
            setRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (requiredP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__required_java_cache(null);
              if (!Kotlin.equals(this.get__required(), requiredP)) {
                this.get__required().clear();
                {
                  var tmp$0 = requiredP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__required().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = requiredP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', elem), 'required');
                  }
                }
              }
            },
            addRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__required_java_cache(null);
              requiredP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', requiredP), 'required');
              var _key_ = requiredP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__required().put(_key_, requiredP);
            },
            addAllRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__required_java_cache(null);
              {
                var tmp$0 = requiredP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__required().put(_key_, el);
                }
              }
              {
                var tmp$1 = requiredP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', el_0), 'required');
                }
              }
            },
            removeRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__required_java_cache(null);
              if (this.get__required().size() !== 0 && this.get__required().containsKey(requiredP.internalGetKey())) {
                this.get__required().remove(requiredP.internalGetKey());
                var tmp$0;
                ((tmp$0 = requiredP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllRequired: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getRequired()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__required_java_cache(null);
              this.get__required().clear();
            },
            getIntegrationPatterns: function () {
              return _.kotlin.toList_1(this.get__integrationPatterns().values());
            },
            setIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (integrationPatternsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__integrationPatterns_java_cache(null);
              if (!Kotlin.equals(this.get__integrationPatterns(), integrationPatternsP)) {
                this.get__integrationPatterns().clear();
                {
                  var tmp$0 = integrationPatternsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__integrationPatterns().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = integrationPatternsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'integrationPatterns', elem), 'integrationPatterns');
                  }
                }
              }
            },
            addIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__integrationPatterns_java_cache(null);
              integrationPatternsP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'integrationPatterns', integrationPatternsP), 'integrationPatterns');
              var _key_ = integrationPatternsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__integrationPatterns().put(_key_, integrationPatternsP);
            },
            addAllIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__integrationPatterns_java_cache(null);
              {
                var tmp$0 = integrationPatternsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__integrationPatterns().put(_key_, el);
                }
              }
              {
                var tmp$1 = integrationPatternsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'integrationPatterns', el_0), 'integrationPatterns');
                }
              }
            },
            removeIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__integrationPatterns_java_cache(null);
              if (this.get__integrationPatterns().size() !== 0 && this.get__integrationPatterns().containsKey(integrationPatternsP.internalGetKey())) {
                this.get__integrationPatterns().remove(integrationPatternsP.internalGetKey());
                var tmp$0;
                ((tmp$0 = integrationPatternsP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllIntegrationPatterns: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getIntegrationPatterns()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__integrationPatterns_java_cache(null);
              this.get__integrationPatterns().clear();
            },
            getExtraFonctionalProperties: function () {
              return this.get__extraFonctionalProperties();
            },
            setExtraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__extraFonctionalProperties(), extraFonctionalPropertiesP)) {
                if (this.get__extraFonctionalProperties() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__extraFonctionalProperties()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (extraFonctionalPropertiesP != null) {
                  extraFonctionalPropertiesP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'extraFonctionalProperties', null), 'extraFonctionalProperties');
                }
                this.set__extraFonctionalProperties(extraFonctionalPropertiesP);
              }
            },
            getProvided: function () {
              return _.kotlin.toList_1(this.get__provided().values());
            },
            setProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (providedP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__provided_java_cache(null);
              if (!Kotlin.equals(this.get__provided(), providedP)) {
                this.get__provided().clear();
                {
                  var tmp$0 = providedP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__provided().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = providedP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', elem), 'provided');
                  }
                }
              }
            },
            addProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__provided_java_cache(null);
              providedP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', providedP), 'provided');
              var _key_ = providedP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__provided().put(_key_, providedP);
            },
            addAllProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__provided_java_cache(null);
              {
                var tmp$0 = providedP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__provided().put(_key_, el);
                }
              }
              {
                var tmp$1 = providedP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', el_0), 'provided');
                }
              }
            },
            removeProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__provided_java_cache(null);
              if (this.get__provided().size() !== 0 && this.get__provided().containsKey(providedP.internalGetKey())) {
                this.get__provided().remove(providedP.internalGetKey());
                var tmp$0;
                ((tmp$0 = providedP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllProvided: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getProvided()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__provided_java_cache(null);
              this.get__provided().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createComponentType();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setFactoryBean(this.getFactoryBean());
              selfObjectClone.setBean(this.getBean());
              selfObjectClone.setAbstract(this.getAbstract());
              selfObjectClone.setStartMethod(this.getStartMethod());
              selfObjectClone.setStopMethod(this.getStopMethod());
              selfObjectClone.setUpdateMethod(this.getUpdateMethod());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$0 = this.getRequired().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$1 = this.getIntegrationPatterns().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              var subsubsubsubextraFonctionalProperties = this.getExtraFonctionalProperties();
              if (subsubsubsubextraFonctionalProperties != null) {
                subsubsubsubextraFonctionalProperties.getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$2 = this.getProvided().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  sub_1.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained deployUnits from ComponentType : ' + this.getDeployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj);
                  }
                }
              }
              if (this.getDictionaryType() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getDictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionaryType());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionaryType from ComponentType : ' + this.getDictionaryType());
                  }
                  clonedSelfObject.setDictionaryType(interObj_0);
                }
              }
              {
                var tmp$3 = this.getSuperTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained superTypes from ComponentType : ' + this.getSuperTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1);
                  }
                }
              }
              {
                var tmp$4 = this.getRequired().iterator();
                while (tmp$4.hasNext()) {
                  var sub_1 = tmp$4.next();
                  if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                    clonedSelfObject.addRequired(sub_1);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_1);
                    if (interObj_2 == null) {
                      throw new Kotlin.Exception('Non contained required from ComponentType : ' + this.getRequired());
                    }
                    clonedSelfObject.addRequired(interObj_2);
                  }
                }
              }
              {
                var tmp$5 = this.getIntegrationPatterns().iterator();
                while (tmp$5.hasNext()) {
                  var sub_2 = tmp$5.next();
                  if (mutableOnly && sub_2.isRecursiveReadOnly()) {
                    clonedSelfObject.addIntegrationPatterns(sub_2);
                  }
                   else {
                    var interObj_3 = addrs.get(sub_2);
                    if (interObj_3 == null) {
                      throw new Kotlin.Exception('Non contained integrationPatterns from ComponentType : ' + this.getIntegrationPatterns());
                    }
                    clonedSelfObject.addIntegrationPatterns(interObj_3);
                  }
                }
              }
              if (this.getExtraFonctionalProperties() != null) {
                var tmp$6;
                if (mutableOnly && ((tmp$6 = this.getExtraFonctionalProperties()) != null ? tmp$6 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$7;
                  clonedSelfObject.setExtraFonctionalProperties((tmp$7 = this.getExtraFonctionalProperties()) != null ? tmp$7 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_4 = addrs.get(this.getExtraFonctionalProperties());
                  if (interObj_4 == null) {
                    throw new Kotlin.Exception('Non contained extraFonctionalProperties from ComponentType : ' + this.getExtraFonctionalProperties());
                  }
                  clonedSelfObject.setExtraFonctionalProperties(interObj_4);
                }
              }
              {
                var tmp$8 = this.getProvided().iterator();
                while (tmp$8.hasNext()) {
                  var sub_3 = tmp$8.next();
                  if (mutableOnly && sub_3.isRecursiveReadOnly()) {
                    clonedSelfObject.addProvided(sub_3);
                  }
                   else {
                    var interObj_5 = addrs.get(sub_3);
                    if (interObj_5 == null) {
                      throw new Kotlin.Exception('Non contained provided from ComponentType : ' + this.getProvided());
                    }
                    clonedSelfObject.addProvided(interObj_5);
                  }
                }
              }
              var subsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubdictionaryType != null) {
                subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$9 = this.getRequired().iterator();
                while (tmp$9.hasNext()) {
                  var sub_4 = tmp$9.next();
                  sub_4.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$10 = this.getIntegrationPatterns().iterator();
                while (tmp$10.hasNext()) {
                  var sub_5 = tmp$10.next();
                  sub_5.resolve(addrs, readOnly, mutableOnly);
                }
              }
              var subsubsubextraFonctionalProperties = this.getExtraFonctionalProperties();
              if (subsubsubextraFonctionalProperties != null) {
                subsubsubextraFonctionalProperties.resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$11 = this.getProvided().iterator();
                while (tmp$11.hasNext()) {
                  var sub_6 = tmp$11.next();
                  sub_6.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setFactoryBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setAbstract(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStartMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStopMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setUpdateMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    this.get__deployUnits().put(obj.internalGetKey(), obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionaryType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    this.get__superTypes().put(obj_0.internalGetKey(), obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_required()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addRequired(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllRequired(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeRequired(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRequired();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__required().size() !== 0 && this.get__required().containsKey(value)) {
                    var obj_1 = this.get__required().get(value);
                    this.get__required().put(obj_1.internalGetKey(), obj_1);
                    this.get__required().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_integrationPatterns()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addIntegrationPatterns(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllIntegrationPatterns(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeIntegrationPatterns(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllIntegrationPatterns();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__integrationPatterns().size() !== 0 && this.get__integrationPatterns().containsKey(value)) {
                    var obj_2 = this.get__integrationPatterns().get(value);
                    this.get__integrationPatterns().put(obj_2.internalGetKey(), obj_2);
                    this.get__integrationPatterns().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setExtraFonctionalProperties(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setExtraFonctionalProperties(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setExtraFonctionalProperties(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addProvided(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllProvided(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeProvided(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllProvided();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__provided().size() !== 0 && this.get__provided().containsKey(value)) {
                    var obj_3 = this.get__provided().get(value);
                    this.get__provided().put(obj_3.internalGetKey(), obj_3);
                    this.get__provided().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findRequiredByID: function (key) {
              return this.get__required().get(key);
            },
            findIntegrationPatternsByID: function (key) {
              return this.get__integrationPatterns().get(key);
            },
            findProvidedByID: function (key) {
              return this.get__provided().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getDictionaryType();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_required()) {
                var objFound_1 = this.findRequiredByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_1 != null) {
                  tmp$0 = objFound_1.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_1;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_integrationPatterns()) {
                var objFound_2 = this.findIntegrationPatternsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_2 != null) {
                  tmp$0 = objFound_2.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_2;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.getExtraFonctionalProperties();
                  var tmp$2;
                  tmp$0 = (tmp$2 = obj_0) != null ? tmp$2.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getExtraFonctionalProperties();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                var objFound_3 = this.findProvidedByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_3 != null) {
                  tmp$0 = objFound_3.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_3;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getRequired().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findRequiredByID(subElement.getName());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              {
                var tmp$1 = this.getIntegrationPatterns().iterator();
                while (tmp$1.hasNext()) {
                  var subElement_0 = tmp$1.next();
                  var foundedElement_0 = similarObjCasted.findIntegrationPatternsByID(subElement_0.getName());
                  if (foundedElement_0 == null || !Kotlin.equals(foundedElement_0, subElement_0)) {
                    return false;
                  }
                }
              }
              {
                var tmp$2 = this.getProvided().iterator();
                while (tmp$2.hasNext()) {
                  var subElement_1 = tmp$2.next();
                  var foundedElement_1 = similarObjCasted.findProvidedByID(subElement_1.getName());
                  if (foundedElement_1 == null || !Kotlin.equals(foundedElement_1, subElement_1)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ComponentType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ComponentTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getAbstract(), similarObjCasted.getAbstract())) {
                return false;
              }
              if (!Kotlin.equals(this.getStartMethod(), similarObjCasted.getStartMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getStopMethod(), similarObjCasted.getStopMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getUpdateMethod(), similarObjCasted.getUpdateMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                return false;
              }
              if (this.getRequired().size() !== similarObjCasted.getRequired().size()) {
                return false;
              }
              if (this.getIntegrationPatterns().size() !== similarObjCasted.getIntegrationPatterns().size()) {
                return false;
              }
              if (!Kotlin.equals(this.getExtraFonctionalProperties(), similarObjCasted.getExtraFonctionalProperties())) {
                return false;
              }
              if (this.getProvided().size() !== similarObjCasted.getProvided().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(5);
              if (this.get__dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__required().values());
              result.addAll(this.get__integrationPatterns().values());
              if (this.get__extraFonctionalProperties() != null) {
                var tmp$1;
                result.add((tmp$1 = this.get__extraFonctionalProperties()) != null ? tmp$1 : Kotlin.throwNPE());
              }
              result.addAll(this.get__provided().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.ComponentType';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ComponentType) || Kotlin.isType(similarObj, _.org.kevoree.impl.ComponentTypeImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$12, tmp$15, tmp$18, tmp$28, tmp$38;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getFactoryBean();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getFactoryBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getBean();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getAbstract();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getAbstract() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStartMethod();
              attVal2 = (tmp$12 = similarObjCasted) != null ? tmp$12.getStartMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$14;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStopMethod();
              attVal2 = (tmp$15 = similarObjCasted) != null ? tmp$15.getStopMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$16;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = this.path()) != null ? tmp$16 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$17;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getUpdateMethod();
              attVal2 = (tmp$18 = similarObjCasted) != null ? tmp$18.getUpdateMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$19;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$19 = this.path()) != null ? tmp$19 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$20;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$20 = this.path()) != null ? tmp$20 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$21 = this.getDeployUnits().iterator();
                while (tmp$21.hasNext()) {
                  var elem = tmp$21.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$22;
                    ((tmp$22 = hashLoop) != null ? tmp$22 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$23;
                {
                  var tmp$24 = ((tmp$23 = similarObjCasted) != null ? tmp$23 : Kotlin.throwNPE()).getDeployUnits().iterator();
                  while (tmp$24.hasNext()) {
                    var elem_0 = tmp$24.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$25;
                      if (((tmp$25 = hashLoop) != null ? tmp$25 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$26;
                          ((tmp$26 = hashResult) != null ? tmp$26 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$27;
                          ((tmp$27 = hashResult) != null ? tmp$27 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$28 = hashResult) != null ? tmp$28 : Kotlin.throwNPE()) !== 0) {
                var tmp$29, tmp$30;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$29 = this.path()) != null ? tmp$29 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), _.kotlin.toList_1((tmp$30 = hashResult) != null ? tmp$30 : Kotlin.throwNPE()), null));
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$31 = this.getSuperTypes().iterator();
                while (tmp$31.hasNext()) {
                  var elem_1 = tmp$31.next();
                  var elemPath_1 = elem_1.path();
                  if (elemPath_1 != null) {
                    var tmp$32;
                    ((tmp$32 = hashLoop) != null ? tmp$32 : Kotlin.throwNPE()).add(elemPath_1);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$33;
                {
                  var tmp$34 = ((tmp$33 = similarObjCasted) != null ? tmp$33 : Kotlin.throwNPE()).getSuperTypes().iterator();
                  while (tmp$34.hasNext()) {
                    var elem_2 = tmp$34.next();
                    var elemPath_2 = elem_2.path();
                    if (elemPath_2 != null) {
                      var tmp$35;
                      if (((tmp$35 = hashLoop) != null ? tmp$35 : Kotlin.throwNPE()).contains(elemPath_2)) {
                        if (inter) {
                          var tmp$36;
                          ((tmp$36 = hashResult) != null ? tmp$36 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$37;
                          ((tmp$37 = hashResult) != null ? tmp$37 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$38 = hashResult) != null ? tmp$38 : Kotlin.throwNPE()) !== 0) {
                var tmp$39, tmp$40;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$39 = this.path()) != null ? tmp$39 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), _.kotlin.toList_1((tmp$40 = hashResult) != null ? tmp$40 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          AdaptationPrimitiveTypeImpl: Kotlin.createClass(classes.c8, classes.c14, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              this.setInternalReadOnly();
            },
            delete: function () {
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createAdaptationPrimitiveType();
              selfObjectClone.setName(this.getName());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.AdaptationPrimitiveType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.AdaptationPrimitiveType';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.AdaptationPrimitiveType) || Kotlin.isType(similarObj, _.org.kevoree.impl.AdaptationPrimitiveTypeImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              return traces;
            }
          }),
          NamedElementImpl: Kotlin.createClass(classes.c8, classes.c2, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              this.setInternalReadOnly();
            },
            delete: function () {
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createNamedElement();
              selfObjectClone.setName(this.getName());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.NamedElement) || !Kotlin.isType(similarObj, _.org.kevoree.impl.NamedElementImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.NamedElement';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.NamedElement) || Kotlin.isType(similarObj, _.org.kevoree.impl.NamedElementImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              return traces;
            }
          }),
          PortImpl: Kotlin.createClass(classes.c8, classes.cw, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_generated_KMF_ID = '';
              this.$_bindings_java_cache = null;
              this.$_bindings = new Kotlin.ComplexHashMap(0);
              this.$_portTypeRef = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__generated_KMF_ID: function () {
              return this.$_generated_KMF_ID;
            },
            set__generated_KMF_ID: function (tmp$0) {
              this.$_generated_KMF_ID = tmp$0;
            },
            get__bindings_java_cache: function () {
              return this.$_bindings_java_cache;
            },
            set__bindings_java_cache: function (tmp$0) {
              this.$_bindings_java_cache = tmp$0;
            },
            get__bindings: function () {
              return this.$_bindings;
            },
            get__portTypeRef: function () {
              return this.$_portTypeRef;
            },
            set__portTypeRef: function (tmp$0) {
              this.$_portTypeRef = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getBindings().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubportTypeRef = this.getPortTypeRef();
              if (subsubsubsubportTypeRef != null) {
                subsubsubsubportTypeRef.setRecursiveReadOnly();
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__bindings()) != null ? tmp$0.clear() : null;
              this.set__bindings_java_cache(null);
              this.set__portTypeRef(null);
            },
            getGenerated_KMF_ID: function () {
              return this.get__generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (generated_KMF_IDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__generated_KMF_ID(generated_KMF_IDP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getBindings: function () {
              return _.kotlin.toList_1(this.get__bindings().values());
            },
            setBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (bindingsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              if (!Kotlin.equals(this.get__bindings(), bindingsP)) {
                this.get__bindings().clear();
                {
                  var tmp$0 = bindingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__bindings().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = bindingsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.noOpposite_setPort(this);
                  }
                }
              }
            },
            addBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              var _key_ = bindingsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__bindings().put(_key_, bindingsP);
              bindingsP.noOpposite_setPort(this);
            },
            addAllBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              {
                var tmp$0 = bindingsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__bindings().put(_key_, el);
                }
              }
              {
                var tmp$1 = bindingsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.noOpposite_setPort(this);
                }
              }
            },
            noOpposite_addBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              var _key_ = bindingsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__bindings().put(_key_, bindingsP);
            },
            noOpposite_addAllBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              {
                var tmp$0 = bindingsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__bindings().put(_key_, el);
                }
              }
            },
            removeBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey(bindingsP.internalGetKey())) {
                this.get__bindings().remove(bindingsP.internalGetKey());
                bindingsP.noOpposite_setPort(null);
              }
            },
            removeAllBindings: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getBindings()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.noOpposite_setPort(null);
                }
              }
              this.set__bindings_java_cache(null);
              this.get__bindings().clear();
            },
            noOpposite_removeBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey(bindingsP.internalGetKey())) {
                this.get__bindings().remove(bindingsP.internalGetKey());
              }
            },
            noOpposite_removeAllBindings: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getBindings()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__bindings_java_cache(null);
              this.get__bindings().clear();
            },
            getPortTypeRef: function () {
              return this.get__portTypeRef();
            },
            setPortTypeRef: function (portTypeRefP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__portTypeRef(), portTypeRefP)) {
                this.set__portTypeRef(portTypeRefP);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createPort();
              selfObjectClone.setGenerated_KMF_ID(this.getGenerated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getBindings().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.noOpposite_addBindings(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained bindings from Port : ' + this.getBindings());
                    }
                    clonedSelfObject.noOpposite_addBindings(interObj);
                  }
                }
              }
              if (this.getPortTypeRef() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getPortTypeRef()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setPortTypeRef((tmp$2 = this.getPortTypeRef()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getPortTypeRef());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained portTypeRef from Port : ' + this.getPortTypeRef());
                  }
                  clonedSelfObject.setPortTypeRef(interObj_0);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGenerated_KMF_ID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_bindings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addBindings(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllBindings(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeBindings(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllBindings();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey(value)) {
                    var obj = this.get__bindings().get(value);
                    this.get__bindings().put(obj.internalGetKey(), obj);
                    this.get__bindings().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_portTypeRef()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setPortTypeRef(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setPortTypeRef(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setPortTypeRef(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getGenerated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findBindingsByID: function (key) {
              return this.get__bindings().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_bindings()) {
                var objFound = this.findBindingsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  throw new Kotlin.Exception('KMFQL : rejected sucessor' + relationName + ' from Port');
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_portTypeRef()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getPortTypeRef();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getPortTypeRef();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Port) || !Kotlin.isType(similarObj, _.org.kevoree.impl.PortImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getGenerated_KMF_ID(), similarObjCasted.getGenerated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Port';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Port) || Kotlin.isType(similarObj, _.org.kevoree.impl.PortImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getGenerated_KMF_ID();
              var tmp$0, tmp$10, tmp$13, tmp$14, tmp$15;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getGenerated_KMF_ID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$3 = this.getBindings().iterator();
                while (tmp$3.hasNext()) {
                  var elem = tmp$3.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$4;
                    ((tmp$4 = hashLoop) != null ? tmp$4 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$5;
                {
                  var tmp$6 = ((tmp$5 = similarObjCasted) != null ? tmp$5 : Kotlin.throwNPE()).getBindings().iterator();
                  while (tmp$6.hasNext()) {
                    var elem_0 = tmp$6.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$7;
                      if (((tmp$7 = hashLoop) != null ? tmp$7 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$8;
                          ((tmp$8 = hashResult) != null ? tmp$8 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$9;
                          ((tmp$9 = hashResult) != null ? tmp$9 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$10 = hashResult) != null ? tmp$10 : Kotlin.throwNPE()) !== 0) {
                var tmp$11, tmp$12;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_bindings(), _.kotlin.toList_1((tmp$12 = hashResult) != null ? tmp$12 : Kotlin.throwNPE()), null));
              }
              attVal = null;
              attVal = (tmp$13 = this.getPortTypeRef()) != null ? tmp$13.path() : null;
              attVal2 = null;
              attVal2 = (tmp$15 = (tmp$14 = similarObjCasted) != null ? tmp$14.getPortTypeRef() : null) != null ? tmp$15.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$16;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = this.path()) != null ? tmp$16 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_portTypeRef(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$17;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_portTypeRef(), attVal2String, null, null));
                }
              }
              return traces;
            }
          }),
          WireImpl: Kotlin.createClass(classes.c8, classes.c16, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_generated_KMF_ID = '';
              this.$_ports_java_cache = null;
              this.$_ports = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__generated_KMF_ID: function () {
              return this.$_generated_KMF_ID;
            },
            set__generated_KMF_ID: function (tmp$0) {
              this.$_generated_KMF_ID = tmp$0;
            },
            get__ports_java_cache: function () {
              return this.$_ports_java_cache;
            },
            set__ports_java_cache: function (tmp$0) {
              this.$_ports_java_cache = tmp$0;
            },
            get__ports: function () {
              return this.$_ports;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getPorts().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__ports()) != null ? tmp$0.clear() : null;
              this.set__ports_java_cache(null);
            },
            getGenerated_KMF_ID: function () {
              return this.get__generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (generated_KMF_IDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__generated_KMF_ID(generated_KMF_IDP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getPorts: function () {
              return _.kotlin.toList_1(this.get__ports().values());
            },
            setPorts: function (portsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (portsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__ports_java_cache(null);
              if (!Kotlin.equals(this.get__ports(), portsP)) {
                this.get__ports().clear();
                {
                  var tmp$0 = portsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__ports().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addPorts: function (portsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__ports_java_cache(null);
              var _key_ = portsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__ports().put(_key_, portsP);
            },
            addAllPorts: function (portsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__ports_java_cache(null);
              {
                var tmp$0 = portsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__ports().put(_key_, el);
                }
              }
            },
            removePorts: function (portsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__ports_java_cache(null);
              if (_.kotlin.get_size(this.get__ports()) === 2 && this.get__ports().containsKey(portsP.internalGetKey())) {
                throw new Kotlin.UnsupportedOperationException('The list of portsP must contain at least 2 element. Can not remove sizeof(portsP)=' + _.kotlin.get_size(this.get__ports()));
              }
               else {
                this.get__ports().remove(portsP.internalGetKey());
              }
            },
            removeAllPorts: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getPorts()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__ports_java_cache(null);
              this.get__ports().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createWire();
              selfObjectClone.setGenerated_KMF_ID(this.getGenerated_KMF_ID());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getPorts().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addPorts(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained ports from Wire : ' + this.getPorts());
                    }
                    clonedSelfObject.addPorts(interObj);
                  }
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGenerated_KMF_ID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_ports()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addPorts(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllPorts(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removePorts(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllPorts();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__ports().size() !== 0 && this.get__ports().containsKey(value)) {
                    var obj = this.get__ports().get(value);
                    this.get__ports().put(obj.internalGetKey(), obj);
                    this.get__ports().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getGenerated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findPortsByID: function (key) {
              return this.get__ports().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_ports();
              var optionalDetected = firstSepIndex !== 5;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, _.js.get_size(query));
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0, tmp$1;
              tmp$0 = query;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = _.js.get_size(relationName);
              }
              var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_ports()) {
                var objFound = this.findPortsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Wire) || !Kotlin.isType(similarObj, _.org.kevoree.impl.WireImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getGenerated_KMF_ID(), similarObjCasted.getGenerated_KMF_ID())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Wire';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Wire) || Kotlin.isType(similarObj, _.org.kevoree.impl.WireImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getGenerated_KMF_ID();
              var tmp$0, tmp$10;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getGenerated_KMF_ID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$3 = this.getPorts().iterator();
                while (tmp$3.hasNext()) {
                  var elem = tmp$3.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$4;
                    ((tmp$4 = hashLoop) != null ? tmp$4 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$5;
                {
                  var tmp$6 = ((tmp$5 = similarObjCasted) != null ? tmp$5 : Kotlin.throwNPE()).getPorts().iterator();
                  while (tmp$6.hasNext()) {
                    var elem_0 = tmp$6.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$7;
                      if (((tmp$7 = hashLoop) != null ? tmp$7 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$8;
                          ((tmp$8 = hashResult) != null ? tmp$8 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$9;
                          ((tmp$9 = hashResult) != null ? tmp$9 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$10 = hashResult) != null ? tmp$10 : Kotlin.throwNPE()) !== 0) {
                var tmp$11, tmp$12;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_ports(), _.kotlin.toList_1((tmp$12 = hashResult) != null ? tmp$12 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          DictionaryTypeImpl: Kotlin.createClass(classes.c8, classes.ca, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_generated_KMF_ID = '';
              this.$_attributes_java_cache = null;
              this.$_attributes = new Kotlin.ComplexHashMap(0);
              this.$_defaultValues_java_cache = null;
              this.$_defaultValues = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__generated_KMF_ID: function () {
              return this.$_generated_KMF_ID;
            },
            set__generated_KMF_ID: function (tmp$0) {
              this.$_generated_KMF_ID = tmp$0;
            },
            get__attributes_java_cache: function () {
              return this.$_attributes_java_cache;
            },
            set__attributes_java_cache: function (tmp$0) {
              this.$_attributes_java_cache = tmp$0;
            },
            get__attributes: function () {
              return this.$_attributes;
            },
            get__defaultValues_java_cache: function () {
              return this.$_defaultValues_java_cache;
            },
            set__defaultValues_java_cache: function (tmp$0) {
              this.$_defaultValues_java_cache = tmp$0;
            },
            get__defaultValues: function () {
              return this.$_defaultValues;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getAttributes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              {
                var tmp$1 = this.getDefaultValues().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              {
                var tmp$0 = _.kotlin.iterator(this.get__attributes());
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              {
                var tmp$1 = _.kotlin.iterator(this.get__defaultValues());
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  _.kotlin.get_value(el_0).delete();
                }
              }
              var tmp$2, tmp$3;
              (tmp$2 = this.get__attributes()) != null ? tmp$2.clear() : null;
              this.set__attributes_java_cache(null);
              (tmp$3 = this.get__defaultValues()) != null ? tmp$3.clear() : null;
              this.set__defaultValues_java_cache(null);
            },
            getGenerated_KMF_ID: function () {
              return this.get__generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (generated_KMF_IDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__generated_KMF_ID(generated_KMF_IDP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getAttributes: function () {
              return _.kotlin.toList_1(this.get__attributes().values());
            },
            setAttributes: function (attributesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (attributesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__attributes_java_cache(null);
              if (!Kotlin.equals(this.get__attributes(), attributesP)) {
                this.get__attributes().clear();
                {
                  var tmp$0 = attributesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__attributes().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = attributesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'attributes', elem), 'attributes');
                  }
                }
              }
            },
            addAttributes: function (attributesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__attributes_java_cache(null);
              attributesP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'attributes', attributesP), 'attributes');
              var _key_ = attributesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__attributes().put(_key_, attributesP);
            },
            addAllAttributes: function (attributesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__attributes_java_cache(null);
              {
                var tmp$0 = attributesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__attributes().put(_key_, el);
                }
              }
              {
                var tmp$1 = attributesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'attributes', el_0), 'attributes');
                }
              }
            },
            removeAttributes: function (attributesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__attributes_java_cache(null);
              if (this.get__attributes().size() !== 0 && this.get__attributes().containsKey(attributesP.internalGetKey())) {
                this.get__attributes().remove(attributesP.internalGetKey());
                var tmp$0;
                ((tmp$0 = attributesP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllAttributes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getAttributes()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__attributes_java_cache(null);
              this.get__attributes().clear();
            },
            getDefaultValues: function () {
              return _.kotlin.toList_1(this.get__defaultValues().values());
            },
            setDefaultValues: function (defaultValuesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (defaultValuesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__defaultValues_java_cache(null);
              if (!Kotlin.equals(this.get__defaultValues(), defaultValuesP)) {
                this.get__defaultValues().clear();
                {
                  var tmp$0 = defaultValuesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__defaultValues().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = defaultValuesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'defaultValues', elem), 'defaultValues');
                  }
                }
              }
            },
            addDefaultValues: function (defaultValuesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__defaultValues_java_cache(null);
              defaultValuesP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'defaultValues', defaultValuesP), 'defaultValues');
              var _key_ = defaultValuesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__defaultValues().put(_key_, defaultValuesP);
            },
            addAllDefaultValues: function (defaultValuesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__defaultValues_java_cache(null);
              {
                var tmp$0 = defaultValuesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__defaultValues().put(_key_, el);
                }
              }
              {
                var tmp$1 = defaultValuesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'defaultValues', el_0), 'defaultValues');
                }
              }
            },
            removeDefaultValues: function (defaultValuesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__defaultValues_java_cache(null);
              if (this.get__defaultValues().size() !== 0 && this.get__defaultValues().containsKey(defaultValuesP.internalGetKey())) {
                this.get__defaultValues().remove(defaultValuesP.internalGetKey());
                var tmp$0;
                ((tmp$0 = defaultValuesP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllDefaultValues: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getDefaultValues()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__defaultValues_java_cache(null);
              this.get__defaultValues().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createDictionaryType();
              selfObjectClone.setGenerated_KMF_ID(this.getGenerated_KMF_ID());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.getAttributes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$1 = this.getDefaultValues().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getAttributes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addAttributes(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained attributes from DictionaryType : ' + this.getAttributes());
                    }
                    clonedSelfObject.addAttributes(interObj);
                  }
                }
              }
              {
                var tmp$1 = this.getDefaultValues().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addDefaultValues(sub_0);
                  }
                   else {
                    var interObj_0 = addrs.get(sub_0);
                    if (interObj_0 == null) {
                      throw new Kotlin.Exception('Non contained defaultValues from DictionaryType : ' + this.getDefaultValues());
                    }
                    clonedSelfObject.addDefaultValues(interObj_0);
                  }
                }
              }
              {
                var tmp$2 = this.getAttributes().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  sub_1.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$3 = this.getDefaultValues().iterator();
                while (tmp$3.hasNext()) {
                  var sub_2 = tmp$3.next();
                  sub_2.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGenerated_KMF_ID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_attributes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addAttributes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllAttributes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeAttributes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllAttributes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__attributes().size() !== 0 && this.get__attributes().containsKey(value)) {
                    var obj = this.get__attributes().get(value);
                    this.get__attributes().put(obj.internalGetKey(), obj);
                    this.get__attributes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_defaultValues()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDefaultValues(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDefaultValues(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDefaultValues(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDefaultValues();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__defaultValues().size() !== 0 && this.get__defaultValues().containsKey(value)) {
                    var obj_0 = this.get__defaultValues().get(value);
                    this.get__defaultValues().put(obj_0.internalGetKey(), obj_0);
                    this.get__defaultValues().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getGenerated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findAttributesByID: function (key) {
              return this.get__attributes().get(key);
            },
            findDefaultValuesByID: function (key) {
              return this.get__defaultValues().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_attributes()) {
                var objFound = this.findAttributesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  throw new Kotlin.Exception('KMFQL : rejected sucessor' + relationName + ' from DictionaryType');
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_defaultValues()) {
                var objFound_0 = this.findDefaultValuesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  throw new Kotlin.Exception('KMFQL : rejected sucessor' + relationName + ' from DictionaryType');
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getAttributes().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findAttributesByID(subElement.getName());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              {
                var tmp$1 = this.getDefaultValues().iterator();
                while (tmp$1.hasNext()) {
                  var subElement_0 = tmp$1.next();
                  var foundedElement_0 = similarObjCasted.findDefaultValuesByID(subElement_0.getGenerated_KMF_ID());
                  if (foundedElement_0 == null || !Kotlin.equals(foundedElement_0, subElement_0)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.DictionaryType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getGenerated_KMF_ID(), similarObjCasted.getGenerated_KMF_ID())) {
                return false;
              }
              if (this.getAttributes().size() !== similarObjCasted.getAttributes().size()) {
                return false;
              }
              if (this.getDefaultValues().size() !== similarObjCasted.getDefaultValues().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(2);
              result.addAll(this.get__attributes().values());
              result.addAll(this.get__defaultValues().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.DictionaryType';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.DictionaryType) || Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryTypeImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getGenerated_KMF_ID();
              var tmp$0;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getGenerated_KMF_ID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
              return traces;
            }
          }),
          NamespaceImpl: Kotlin.createClass(classes.c8, classes.c1b, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_childs_java_cache = null;
              this.$_childs = new Kotlin.ComplexHashMap(0);
              this.$_parent = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__childs_java_cache: function () {
              return this.$_childs_java_cache;
            },
            set__childs_java_cache: function (tmp$0) {
              this.$_childs_java_cache = tmp$0;
            },
            get__childs: function () {
              return this.$_childs;
            },
            get__parent: function () {
              return this.$_parent;
            },
            set__parent: function (tmp$0) {
              this.$_parent = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getChilds().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubparent = this.getParent();
              if (subsubsubsubparent != null) {
                subsubsubsubparent.setRecursiveReadOnly();
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              {
                var tmp$0 = _.kotlin.iterator(this.get__childs());
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              var tmp$1;
              (tmp$1 = this.get__childs()) != null ? tmp$1.clear() : null;
              this.set__childs_java_cache(null);
              this.set__parent(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getChilds: function () {
              return _.kotlin.toList_1(this.get__childs().values());
            },
            setChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (childsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__childs_java_cache(null);
              if (!Kotlin.equals(this.get__childs(), childsP)) {
                this.get__childs().clear();
                {
                  var tmp$0 = childsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__childs().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = childsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'childs', elem), 'childs');
                  }
                }
              }
            },
            addChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__childs_java_cache(null);
              childsP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'childs', childsP), 'childs');
              var _key_ = childsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__childs().put(_key_, childsP);
            },
            addAllChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__childs_java_cache(null);
              {
                var tmp$0 = childsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__childs().put(_key_, el);
                }
              }
              {
                var tmp$1 = childsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'childs', el_0), 'childs');
                }
              }
            },
            removeChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__childs_java_cache(null);
              if (this.get__childs().size() !== 0 && this.get__childs().containsKey(childsP.internalGetKey())) {
                this.get__childs().remove(childsP.internalGetKey());
                var tmp$0;
                ((tmp$0 = childsP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllChilds: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getChilds()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__childs_java_cache(null);
              this.get__childs().clear();
            },
            getParent: function () {
              return this.get__parent();
            },
            setParent: function (parentP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__parent(), parentP)) {
                this.set__parent(parentP);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createNamespace();
              selfObjectClone.setName(this.getName());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.getChilds().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getChilds().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addChilds(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained childs from Namespace : ' + this.getChilds());
                    }
                    clonedSelfObject.addChilds(interObj);
                  }
                }
              }
              if (this.getParent() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getParent()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setParent((tmp$2 = this.getParent()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getParent());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained parent from Namespace : ' + this.getParent());
                  }
                  clonedSelfObject.setParent(interObj_0);
                }
              }
              {
                var tmp$3 = this.getChilds().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  sub_0.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_childs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addChilds(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllChilds(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeChilds(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllChilds();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__childs().size() !== 0 && this.get__childs().containsKey(value)) {
                    var obj = this.get__childs().get(value);
                    this.get__childs().put(obj.internalGetKey(), obj);
                    this.get__childs().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_parent()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setParent(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setParent(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setParent(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findChildsByID: function (key) {
              return this.get__childs().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_childs()) {
                var objFound = this.findChildsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_parent()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getParent();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getParent();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getChilds().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findChildsByID(subElement.getName());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Namespace) || !Kotlin.isType(similarObj, _.org.kevoree.impl.NamespaceImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (this.getChilds().size() !== similarObjCasted.getChilds().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              result.addAll(this.get__childs().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Namespace';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Namespace) || Kotlin.isType(similarObj, _.org.kevoree.impl.NamespaceImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$4, tmp$5;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = null;
              attVal = (tmp$3 = this.getParent()) != null ? tmp$3.path() : null;
              attVal2 = null;
              attVal2 = (tmp$5 = (tmp$4 = similarObjCasted) != null ? tmp$4.getParent() : null) != null ? tmp$5.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$6;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$6 = this.path()) != null ? tmp$6 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_parent(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_parent(), attVal2String, null, null));
                }
              }
              return traces;
            }
          }),
          CompositeTypeImpl: Kotlin.createClass(classes.c8, classes.cr, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_factoryBean = '';
              this.$_bean = '';
              this.$_abstract = false;
              this.$_startMethod = '';
              this.$_stopMethod = '';
              this.$_updateMethod = '';
              this.$_deployUnits_java_cache = null;
              this.$_deployUnits = new Kotlin.ComplexHashMap(0);
              this.$_dictionaryType = null;
              this.$_superTypes_java_cache = null;
              this.$_superTypes = new Kotlin.ComplexHashMap(0);
              this.$_required_java_cache = null;
              this.$_required = new Kotlin.ComplexHashMap(0);
              this.$_integrationPatterns_java_cache = null;
              this.$_integrationPatterns = new Kotlin.ComplexHashMap(0);
              this.$_extraFonctionalProperties = null;
              this.$_provided_java_cache = null;
              this.$_provided = new Kotlin.ComplexHashMap(0);
              this.$_childs_java_cache = null;
              this.$_childs = new Kotlin.ComplexHashMap(0);
              this.$_wires_java_cache = null;
              this.$_wires = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__factoryBean: function () {
              return this.$_factoryBean;
            },
            set__factoryBean: function (tmp$0) {
              this.$_factoryBean = tmp$0;
            },
            get__bean: function () {
              return this.$_bean;
            },
            set__bean: function (tmp$0) {
              this.$_bean = tmp$0;
            },
            get__abstract: function () {
              return this.$_abstract;
            },
            set__abstract: function (tmp$0) {
              this.$_abstract = tmp$0;
            },
            get__startMethod: function () {
              return this.$_startMethod;
            },
            set__startMethod: function (tmp$0) {
              this.$_startMethod = tmp$0;
            },
            get__stopMethod: function () {
              return this.$_stopMethod;
            },
            set__stopMethod: function (tmp$0) {
              this.$_stopMethod = tmp$0;
            },
            get__updateMethod: function () {
              return this.$_updateMethod;
            },
            set__updateMethod: function (tmp$0) {
              this.$_updateMethod = tmp$0;
            },
            get__deployUnits_java_cache: function () {
              return this.$_deployUnits_java_cache;
            },
            set__deployUnits_java_cache: function (tmp$0) {
              this.$_deployUnits_java_cache = tmp$0;
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get__dictionaryType: function () {
              return this.$_dictionaryType;
            },
            set__dictionaryType: function (tmp$0) {
              this.$_dictionaryType = tmp$0;
            },
            get__superTypes_java_cache: function () {
              return this.$_superTypes_java_cache;
            },
            set__superTypes_java_cache: function (tmp$0) {
              this.$_superTypes_java_cache = tmp$0;
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get__required_java_cache: function () {
              return this.$_required_java_cache;
            },
            set__required_java_cache: function (tmp$0) {
              this.$_required_java_cache = tmp$0;
            },
            get__required: function () {
              return this.$_required;
            },
            get__integrationPatterns_java_cache: function () {
              return this.$_integrationPatterns_java_cache;
            },
            set__integrationPatterns_java_cache: function (tmp$0) {
              this.$_integrationPatterns_java_cache = tmp$0;
            },
            get__integrationPatterns: function () {
              return this.$_integrationPatterns;
            },
            get__extraFonctionalProperties: function () {
              return this.$_extraFonctionalProperties;
            },
            set__extraFonctionalProperties: function (tmp$0) {
              this.$_extraFonctionalProperties = tmp$0;
            },
            get__provided_java_cache: function () {
              return this.$_provided_java_cache;
            },
            set__provided_java_cache: function (tmp$0) {
              this.$_provided_java_cache = tmp$0;
            },
            get__provided: function () {
              return this.$_provided;
            },
            get__childs_java_cache: function () {
              return this.$_childs_java_cache;
            },
            set__childs_java_cache: function (tmp$0) {
              this.$_childs_java_cache = tmp$0;
            },
            get__childs: function () {
              return this.$_childs;
            },
            get__wires_java_cache: function () {
              return this.$_wires_java_cache;
            },
            set__wires_java_cache: function (tmp$0) {
              this.$_wires_java_cache = tmp$0;
            },
            get__wires: function () {
              return this.$_wires;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.setRecursiveReadOnly();
              }
              {
                var tmp$1 = this.getSuperTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              {
                var tmp$2 = this.getRequired().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  sub_1.setRecursiveReadOnly();
                }
              }
              {
                var tmp$3 = this.getIntegrationPatterns().iterator();
                while (tmp$3.hasNext()) {
                  var sub_2 = tmp$3.next();
                  sub_2.setRecursiveReadOnly();
                }
              }
              var subsubsubsubextraFonctionalProperties = this.getExtraFonctionalProperties();
              if (subsubsubsubextraFonctionalProperties != null) {
                subsubsubsubextraFonctionalProperties.setRecursiveReadOnly();
              }
              {
                var tmp$4 = this.getProvided().iterator();
                while (tmp$4.hasNext()) {
                  var sub_3 = tmp$4.next();
                  sub_3.setRecursiveReadOnly();
                }
              }
              {
                var tmp$5 = this.getChilds().iterator();
                while (tmp$5.hasNext()) {
                  var sub_4 = tmp$5.next();
                  sub_4.setRecursiveReadOnly();
                }
              }
              {
                var tmp$6 = this.getWires().iterator();
                while (tmp$6.hasNext()) {
                  var sub_5 = tmp$6.next();
                  sub_5.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0, tmp$3, tmp$6, tmp$7;
              (tmp$0 = this.get__dictionaryType()) != null ? tmp$0.delete() : null;
              {
                var tmp$1 = _.kotlin.iterator(this.get__required());
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              {
                var tmp$2 = _.kotlin.iterator(this.get__integrationPatterns());
                while (tmp$2.hasNext()) {
                  var el_0 = tmp$2.next();
                  _.kotlin.get_value(el_0).delete();
                }
              }
              (tmp$3 = this.get__extraFonctionalProperties()) != null ? tmp$3.delete() : null;
              {
                var tmp$4 = _.kotlin.iterator(this.get__provided());
                while (tmp$4.hasNext()) {
                  var el_1 = tmp$4.next();
                  _.kotlin.get_value(el_1).delete();
                }
              }
              {
                var tmp$5 = _.kotlin.iterator(this.get__wires());
                while (tmp$5.hasNext()) {
                  var el_2 = tmp$5.next();
                  _.kotlin.get_value(el_2).delete();
                }
              }
              (tmp$6 = this.get__childs()) != null ? tmp$6.clear() : null;
              this.set__childs_java_cache(null);
              (tmp$7 = this.get__wires()) != null ? tmp$7.clear() : null;
              this.set__wires_java_cache(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getFactoryBean: function () {
              return this.get__factoryBean();
            },
            setFactoryBean: function (factoryBeanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__factoryBean(factoryBeanP);
            },
            getBean: function () {
              return this.get__bean();
            },
            setBean: function (beanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__bean(beanP);
            },
            getAbstract: function () {
              return this.get__abstract();
            },
            setAbstract: function (abstractP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__abstract(abstractP);
            },
            getStartMethod: function () {
              return this.get__startMethod();
            },
            setStartMethod: function (startMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__startMethod(startMethodP);
            },
            getStopMethod: function () {
              return this.get__stopMethod();
            },
            setStopMethod: function (stopMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__stopMethod(stopMethodP);
            },
            getUpdateMethod: function () {
              return this.get__updateMethod();
            },
            setUpdateMethod: function (updateMethodP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__updateMethod(updateMethodP);
            },
            getDeployUnits: function () {
              return _.kotlin.toList_1(this.get__deployUnits().values());
            },
            setDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (!Kotlin.equals(this.get__deployUnits(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__deployUnits().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              var _key_ = deployUnitsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(deployUnitsP.internalGetKey())) {
                this.get__deployUnits().remove(deployUnitsP.internalGetKey());
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getDeployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__deployUnits_java_cache(null);
              this.get__deployUnits().clear();
            },
            getDictionaryType: function () {
              return this.get__dictionaryType();
            },
            setDictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionaryType(), dictionaryTypeP)) {
                if (this.get__dictionaryType() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  dictionaryTypeP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.set__dictionaryType(dictionaryTypeP);
              }
            },
            getSuperTypes: function () {
              return _.kotlin.toList_1(this.get__superTypes().values());
            },
            setSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (!Kotlin.equals(this.get__superTypes(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__superTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              var _key_ = superTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(superTypesP.internalGetKey())) {
                this.get__superTypes().remove(superTypesP.internalGetKey());
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getSuperTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__superTypes_java_cache(null);
              this.get__superTypes().clear();
            },
            getRequired: function () {
              return _.kotlin.toList_1(this.get__required().values());
            },
            setRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (requiredP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__required_java_cache(null);
              if (!Kotlin.equals(this.get__required(), requiredP)) {
                this.get__required().clear();
                {
                  var tmp$0 = requiredP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__required().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = requiredP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', elem), 'required');
                  }
                }
              }
            },
            addRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__required_java_cache(null);
              requiredP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', requiredP), 'required');
              var _key_ = requiredP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__required().put(_key_, requiredP);
            },
            addAllRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__required_java_cache(null);
              {
                var tmp$0 = requiredP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__required().put(_key_, el);
                }
              }
              {
                var tmp$1 = requiredP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'required', el_0), 'required');
                }
              }
            },
            removeRequired: function (requiredP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__required_java_cache(null);
              if (this.get__required().size() !== 0 && this.get__required().containsKey(requiredP.internalGetKey())) {
                this.get__required().remove(requiredP.internalGetKey());
                var tmp$0;
                ((tmp$0 = requiredP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllRequired: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getRequired()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__required_java_cache(null);
              this.get__required().clear();
            },
            getIntegrationPatterns: function () {
              return _.kotlin.toList_1(this.get__integrationPatterns().values());
            },
            setIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (integrationPatternsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__integrationPatterns_java_cache(null);
              if (!Kotlin.equals(this.get__integrationPatterns(), integrationPatternsP)) {
                this.get__integrationPatterns().clear();
                {
                  var tmp$0 = integrationPatternsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__integrationPatterns().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = integrationPatternsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'integrationPatterns', elem), 'integrationPatterns');
                  }
                }
              }
            },
            addIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__integrationPatterns_java_cache(null);
              integrationPatternsP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'integrationPatterns', integrationPatternsP), 'integrationPatterns');
              var _key_ = integrationPatternsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__integrationPatterns().put(_key_, integrationPatternsP);
            },
            addAllIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__integrationPatterns_java_cache(null);
              {
                var tmp$0 = integrationPatternsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__integrationPatterns().put(_key_, el);
                }
              }
              {
                var tmp$1 = integrationPatternsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'integrationPatterns', el_0), 'integrationPatterns');
                }
              }
            },
            removeIntegrationPatterns: function (integrationPatternsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__integrationPatterns_java_cache(null);
              if (this.get__integrationPatterns().size() !== 0 && this.get__integrationPatterns().containsKey(integrationPatternsP.internalGetKey())) {
                this.get__integrationPatterns().remove(integrationPatternsP.internalGetKey());
                var tmp$0;
                ((tmp$0 = integrationPatternsP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllIntegrationPatterns: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getIntegrationPatterns()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__integrationPatterns_java_cache(null);
              this.get__integrationPatterns().clear();
            },
            getExtraFonctionalProperties: function () {
              return this.get__extraFonctionalProperties();
            },
            setExtraFonctionalProperties: function (extraFonctionalPropertiesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__extraFonctionalProperties(), extraFonctionalPropertiesP)) {
                if (this.get__extraFonctionalProperties() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__extraFonctionalProperties()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (extraFonctionalPropertiesP != null) {
                  extraFonctionalPropertiesP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'extraFonctionalProperties', null), 'extraFonctionalProperties');
                }
                this.set__extraFonctionalProperties(extraFonctionalPropertiesP);
              }
            },
            getProvided: function () {
              return _.kotlin.toList_1(this.get__provided().values());
            },
            setProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (providedP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__provided_java_cache(null);
              if (!Kotlin.equals(this.get__provided(), providedP)) {
                this.get__provided().clear();
                {
                  var tmp$0 = providedP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__provided().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = providedP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', elem), 'provided');
                  }
                }
              }
            },
            addProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__provided_java_cache(null);
              providedP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', providedP), 'provided');
              var _key_ = providedP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__provided().put(_key_, providedP);
            },
            addAllProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__provided_java_cache(null);
              {
                var tmp$0 = providedP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__provided().put(_key_, el);
                }
              }
              {
                var tmp$1 = providedP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'provided', el_0), 'provided');
                }
              }
            },
            removeProvided: function (providedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__provided_java_cache(null);
              if (this.get__provided().size() !== 0 && this.get__provided().containsKey(providedP.internalGetKey())) {
                this.get__provided().remove(providedP.internalGetKey());
                var tmp$0;
                ((tmp$0 = providedP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllProvided: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getProvided()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__provided_java_cache(null);
              this.get__provided().clear();
            },
            getChilds: function () {
              return _.kotlin.toList_1(this.get__childs().values());
            },
            setChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (childsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__childs_java_cache(null);
              if (!Kotlin.equals(this.get__childs(), childsP)) {
                this.get__childs().clear();
                {
                  var tmp$0 = childsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__childs().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__childs_java_cache(null);
              var _key_ = childsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__childs().put(_key_, childsP);
            },
            addAllChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__childs_java_cache(null);
              {
                var tmp$0 = childsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__childs().put(_key_, el);
                }
              }
            },
            removeChilds: function (childsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__childs_java_cache(null);
              if (this.get__childs().size() !== 0 && this.get__childs().containsKey(childsP.internalGetKey())) {
                this.get__childs().remove(childsP.internalGetKey());
              }
            },
            removeAllChilds: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getChilds()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__childs_java_cache(null);
              this.get__childs().clear();
            },
            getWires: function () {
              return _.kotlin.toList_1(this.get__wires().values());
            },
            setWires: function (wiresP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (wiresP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__wires_java_cache(null);
              if (!Kotlin.equals(this.get__wires(), wiresP)) {
                this.get__wires().clear();
                {
                  var tmp$0 = wiresP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__wires().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = wiresP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'wires', elem), 'wires');
                  }
                }
              }
            },
            addWires: function (wiresP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__wires_java_cache(null);
              wiresP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'wires', wiresP), 'wires');
              var _key_ = wiresP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__wires().put(_key_, wiresP);
            },
            addAllWires: function (wiresP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__wires_java_cache(null);
              {
                var tmp$0 = wiresP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__wires().put(_key_, el);
                }
              }
              {
                var tmp$1 = wiresP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'wires', el_0), 'wires');
                }
              }
            },
            removeWires: function (wiresP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__wires_java_cache(null);
              if (this.get__wires().size() !== 0 && this.get__wires().containsKey(wiresP.internalGetKey())) {
                this.get__wires().remove(wiresP.internalGetKey());
                var tmp$0;
                ((tmp$0 = wiresP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllWires: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getWires()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__wires_java_cache(null);
              this.get__wires().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createCompositeType();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setFactoryBean(this.getFactoryBean());
              selfObjectClone.setBean(this.getBean());
              selfObjectClone.setAbstract(this.getAbstract());
              selfObjectClone.setStartMethod(this.getStartMethod());
              selfObjectClone.setStopMethod(this.getStopMethod());
              selfObjectClone.setUpdateMethod(this.getUpdateMethod());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$0 = this.getRequired().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$1 = this.getIntegrationPatterns().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              var subsubsubsubextraFonctionalProperties = this.getExtraFonctionalProperties();
              if (subsubsubsubextraFonctionalProperties != null) {
                subsubsubsubextraFonctionalProperties.getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$2 = this.getProvided().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  sub_1.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
              {
                var tmp$3 = this.getWires().iterator();
                while (tmp$3.hasNext()) {
                  var sub_2 = tmp$3.next();
                  sub_2.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained deployUnits from CompositeType : ' + this.getDeployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj);
                  }
                }
              }
              if (this.getDictionaryType() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getDictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionaryType());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionaryType from CompositeType : ' + this.getDictionaryType());
                  }
                  clonedSelfObject.setDictionaryType(interObj_0);
                }
              }
              {
                var tmp$3 = this.getSuperTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained superTypes from CompositeType : ' + this.getSuperTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1);
                  }
                }
              }
              {
                var tmp$4 = this.getRequired().iterator();
                while (tmp$4.hasNext()) {
                  var sub_1 = tmp$4.next();
                  if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                    clonedSelfObject.addRequired(sub_1);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_1);
                    if (interObj_2 == null) {
                      throw new Kotlin.Exception('Non contained required from CompositeType : ' + this.getRequired());
                    }
                    clonedSelfObject.addRequired(interObj_2);
                  }
                }
              }
              {
                var tmp$5 = this.getIntegrationPatterns().iterator();
                while (tmp$5.hasNext()) {
                  var sub_2 = tmp$5.next();
                  if (mutableOnly && sub_2.isRecursiveReadOnly()) {
                    clonedSelfObject.addIntegrationPatterns(sub_2);
                  }
                   else {
                    var interObj_3 = addrs.get(sub_2);
                    if (interObj_3 == null) {
                      throw new Kotlin.Exception('Non contained integrationPatterns from CompositeType : ' + this.getIntegrationPatterns());
                    }
                    clonedSelfObject.addIntegrationPatterns(interObj_3);
                  }
                }
              }
              if (this.getExtraFonctionalProperties() != null) {
                var tmp$6;
                if (mutableOnly && ((tmp$6 = this.getExtraFonctionalProperties()) != null ? tmp$6 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$7;
                  clonedSelfObject.setExtraFonctionalProperties((tmp$7 = this.getExtraFonctionalProperties()) != null ? tmp$7 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_4 = addrs.get(this.getExtraFonctionalProperties());
                  if (interObj_4 == null) {
                    throw new Kotlin.Exception('Non contained extraFonctionalProperties from CompositeType : ' + this.getExtraFonctionalProperties());
                  }
                  clonedSelfObject.setExtraFonctionalProperties(interObj_4);
                }
              }
              {
                var tmp$8 = this.getProvided().iterator();
                while (tmp$8.hasNext()) {
                  var sub_3 = tmp$8.next();
                  if (mutableOnly && sub_3.isRecursiveReadOnly()) {
                    clonedSelfObject.addProvided(sub_3);
                  }
                   else {
                    var interObj_5 = addrs.get(sub_3);
                    if (interObj_5 == null) {
                      throw new Kotlin.Exception('Non contained provided from CompositeType : ' + this.getProvided());
                    }
                    clonedSelfObject.addProvided(interObj_5);
                  }
                }
              }
              {
                var tmp$9 = this.getChilds().iterator();
                while (tmp$9.hasNext()) {
                  var sub_4 = tmp$9.next();
                  if (mutableOnly && sub_4.isRecursiveReadOnly()) {
                    clonedSelfObject.addChilds(sub_4);
                  }
                   else {
                    var interObj_6 = addrs.get(sub_4);
                    if (interObj_6 == null) {
                      throw new Kotlin.Exception('Non contained childs from CompositeType : ' + this.getChilds());
                    }
                    clonedSelfObject.addChilds(interObj_6);
                  }
                }
              }
              {
                var tmp$10 = this.getWires().iterator();
                while (tmp$10.hasNext()) {
                  var sub_5 = tmp$10.next();
                  if (mutableOnly && sub_5.isRecursiveReadOnly()) {
                    clonedSelfObject.addWires(sub_5);
                  }
                   else {
                    var interObj_7 = addrs.get(sub_5);
                    if (interObj_7 == null) {
                      throw new Kotlin.Exception('Non contained wires from CompositeType : ' + this.getWires());
                    }
                    clonedSelfObject.addWires(interObj_7);
                  }
                }
              }
              var subsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubdictionaryType != null) {
                subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$11 = this.getRequired().iterator();
                while (tmp$11.hasNext()) {
                  var sub_6 = tmp$11.next();
                  sub_6.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$12 = this.getIntegrationPatterns().iterator();
                while (tmp$12.hasNext()) {
                  var sub_7 = tmp$12.next();
                  sub_7.resolve(addrs, readOnly, mutableOnly);
                }
              }
              var subsubsubextraFonctionalProperties = this.getExtraFonctionalProperties();
              if (subsubsubextraFonctionalProperties != null) {
                subsubsubextraFonctionalProperties.resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$13 = this.getProvided().iterator();
                while (tmp$13.hasNext()) {
                  var sub_8 = tmp$13.next();
                  sub_8.resolve(addrs, readOnly, mutableOnly);
                }
              }
              {
                var tmp$14 = this.getWires().iterator();
                while (tmp$14.hasNext()) {
                  var sub_9 = tmp$14.next();
                  sub_9.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setFactoryBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setAbstract(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_startMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStartMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_stopMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStopMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_updateMethod()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setUpdateMethod(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    this.get__deployUnits().put(obj.internalGetKey(), obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionaryType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    this.get__superTypes().put(obj_0.internalGetKey(), obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_required()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addRequired(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllRequired(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeRequired(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllRequired();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__required().size() !== 0 && this.get__required().containsKey(value)) {
                    var obj_1 = this.get__required().get(value);
                    this.get__required().put(obj_1.internalGetKey(), obj_1);
                    this.get__required().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_integrationPatterns()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addIntegrationPatterns(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllIntegrationPatterns(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeIntegrationPatterns(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllIntegrationPatterns();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__integrationPatterns().size() !== 0 && this.get__integrationPatterns().containsKey(value)) {
                    var obj_2 = this.get__integrationPatterns().get(value);
                    this.get__integrationPatterns().put(obj_2.internalGetKey(), obj_2);
                    this.get__integrationPatterns().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setExtraFonctionalProperties(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setExtraFonctionalProperties(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setExtraFonctionalProperties(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addProvided(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllProvided(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeProvided(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllProvided();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__provided().size() !== 0 && this.get__provided().containsKey(value)) {
                    var obj_3 = this.get__provided().get(value);
                    this.get__provided().put(obj_3.internalGetKey(), obj_3);
                    this.get__provided().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_childs()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addChilds(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllChilds(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeChilds(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllChilds();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__childs().size() !== 0 && this.get__childs().containsKey(value)) {
                    var obj_4 = this.get__childs().get(value);
                    this.get__childs().put(obj_4.internalGetKey(), obj_4);
                    this.get__childs().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_wires()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addWires(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllWires(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeWires(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllWires();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__wires().size() !== 0 && this.get__wires().containsKey(value)) {
                    var obj_5 = this.get__wires().get(value);
                    this.get__wires().put(obj_5.internalGetKey(), obj_5);
                    this.get__wires().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findRequiredByID: function (key) {
              return this.get__required().get(key);
            },
            findIntegrationPatternsByID: function (key) {
              return this.get__integrationPatterns().get(key);
            },
            findProvidedByID: function (key) {
              return this.get__provided().get(key);
            },
            findChildsByID: function (key) {
              return this.get__childs().get(key);
            },
            findWiresByID: function (key) {
              return this.get__wires().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getDictionaryType();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_required()) {
                var objFound_1 = this.findRequiredByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_1 != null) {
                  tmp$0 = objFound_1.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_1;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_integrationPatterns()) {
                var objFound_2 = this.findIntegrationPatternsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_2 != null) {
                  tmp$0 = objFound_2.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_2;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_extraFonctionalProperties()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.getExtraFonctionalProperties();
                  var tmp$2;
                  tmp$0 = (tmp$2 = obj_0) != null ? tmp$2.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getExtraFonctionalProperties();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_provided()) {
                var objFound_3 = this.findProvidedByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_3 != null) {
                  tmp$0 = objFound_3.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_3;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_childs()) {
                var objFound_4 = this.findChildsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_4 != null) {
                  tmp$0 = objFound_4.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_4;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_wires()) {
                var objFound_5 = this.findWiresByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_5 != null) {
                  tmp$0 = objFound_5.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_5;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getRequired().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findRequiredByID(subElement.getName());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              {
                var tmp$1 = this.getIntegrationPatterns().iterator();
                while (tmp$1.hasNext()) {
                  var subElement_0 = tmp$1.next();
                  var foundedElement_0 = similarObjCasted.findIntegrationPatternsByID(subElement_0.getName());
                  if (foundedElement_0 == null || !Kotlin.equals(foundedElement_0, subElement_0)) {
                    return false;
                  }
                }
              }
              {
                var tmp$2 = this.getProvided().iterator();
                while (tmp$2.hasNext()) {
                  var subElement_1 = tmp$2.next();
                  var foundedElement_1 = similarObjCasted.findProvidedByID(subElement_1.getName());
                  if (foundedElement_1 == null || !Kotlin.equals(foundedElement_1, subElement_1)) {
                    return false;
                  }
                }
              }
              {
                var tmp$3 = this.getWires().iterator();
                while (tmp$3.hasNext()) {
                  var subElement_2 = tmp$3.next();
                  var foundedElement_2 = similarObjCasted.findWiresByID(subElement_2.getGenerated_KMF_ID());
                  if (foundedElement_2 == null || !Kotlin.equals(foundedElement_2, subElement_2)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.CompositeType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.CompositeTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getAbstract(), similarObjCasted.getAbstract())) {
                return false;
              }
              if (!Kotlin.equals(this.getStartMethod(), similarObjCasted.getStartMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getStopMethod(), similarObjCasted.getStopMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getUpdateMethod(), similarObjCasted.getUpdateMethod())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                return false;
              }
              if (this.getRequired().size() !== similarObjCasted.getRequired().size()) {
                return false;
              }
              if (this.getIntegrationPatterns().size() !== similarObjCasted.getIntegrationPatterns().size()) {
                return false;
              }
              if (!Kotlin.equals(this.getExtraFonctionalProperties(), similarObjCasted.getExtraFonctionalProperties())) {
                return false;
              }
              if (this.getProvided().size() !== similarObjCasted.getProvided().size()) {
                return false;
              }
              if (this.getWires().size() !== similarObjCasted.getWires().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(6);
              if (this.get__dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__required().values());
              result.addAll(this.get__integrationPatterns().values());
              if (this.get__extraFonctionalProperties() != null) {
                var tmp$1;
                result.add((tmp$1 = this.get__extraFonctionalProperties()) != null ? tmp$1 : Kotlin.throwNPE());
              }
              result.addAll(this.get__provided().values());
              result.addAll(this.get__wires().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.CompositeType';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.CompositeType) || Kotlin.isType(similarObj, _.org.kevoree.impl.CompositeTypeImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$12, tmp$15, tmp$18, tmp$28, tmp$38, tmp$48;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getFactoryBean();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getFactoryBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getBean();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getAbstract();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getAbstract() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStartMethod();
              attVal2 = (tmp$12 = similarObjCasted) != null ? tmp$12.getStartMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$14;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_startMethod(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStopMethod();
              attVal2 = (tmp$15 = similarObjCasted) != null ? tmp$15.getStopMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$16;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = this.path()) != null ? tmp$16 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$17;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_stopMethod(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getUpdateMethod();
              attVal2 = (tmp$18 = similarObjCasted) != null ? tmp$18.getUpdateMethod() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$19;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$19 = this.path()) != null ? tmp$19 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$20;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$20 = this.path()) != null ? tmp$20 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_updateMethod(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$21 = this.getDeployUnits().iterator();
                while (tmp$21.hasNext()) {
                  var elem = tmp$21.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$22;
                    ((tmp$22 = hashLoop) != null ? tmp$22 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$23;
                {
                  var tmp$24 = ((tmp$23 = similarObjCasted) != null ? tmp$23 : Kotlin.throwNPE()).getDeployUnits().iterator();
                  while (tmp$24.hasNext()) {
                    var elem_0 = tmp$24.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$25;
                      if (((tmp$25 = hashLoop) != null ? tmp$25 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$26;
                          ((tmp$26 = hashResult) != null ? tmp$26 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$27;
                          ((tmp$27 = hashResult) != null ? tmp$27 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$28 = hashResult) != null ? tmp$28 : Kotlin.throwNPE()) !== 0) {
                var tmp$29, tmp$30;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$29 = this.path()) != null ? tmp$29 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), _.kotlin.toList_1((tmp$30 = hashResult) != null ? tmp$30 : Kotlin.throwNPE()), null));
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$31 = this.getSuperTypes().iterator();
                while (tmp$31.hasNext()) {
                  var elem_1 = tmp$31.next();
                  var elemPath_1 = elem_1.path();
                  if (elemPath_1 != null) {
                    var tmp$32;
                    ((tmp$32 = hashLoop) != null ? tmp$32 : Kotlin.throwNPE()).add(elemPath_1);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$33;
                {
                  var tmp$34 = ((tmp$33 = similarObjCasted) != null ? tmp$33 : Kotlin.throwNPE()).getSuperTypes().iterator();
                  while (tmp$34.hasNext()) {
                    var elem_2 = tmp$34.next();
                    var elemPath_2 = elem_2.path();
                    if (elemPath_2 != null) {
                      var tmp$35;
                      if (((tmp$35 = hashLoop) != null ? tmp$35 : Kotlin.throwNPE()).contains(elemPath_2)) {
                        if (inter) {
                          var tmp$36;
                          ((tmp$36 = hashResult) != null ? tmp$36 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$37;
                          ((tmp$37 = hashResult) != null ? tmp$37 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$38 = hashResult) != null ? tmp$38 : Kotlin.throwNPE()) !== 0) {
                var tmp$39, tmp$40;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$39 = this.path()) != null ? tmp$39 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), _.kotlin.toList_1((tmp$40 = hashResult) != null ? tmp$40 : Kotlin.throwNPE()), null));
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$41 = this.getChilds().iterator();
                while (tmp$41.hasNext()) {
                  var elem_3 = tmp$41.next();
                  var elemPath_3 = elem_3.path();
                  if (elemPath_3 != null) {
                    var tmp$42;
                    ((tmp$42 = hashLoop) != null ? tmp$42 : Kotlin.throwNPE()).add(elemPath_3);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$43;
                {
                  var tmp$44 = ((tmp$43 = similarObjCasted) != null ? tmp$43 : Kotlin.throwNPE()).getChilds().iterator();
                  while (tmp$44.hasNext()) {
                    var elem_4 = tmp$44.next();
                    var elemPath_4 = elem_4.path();
                    if (elemPath_4 != null) {
                      var tmp$45;
                      if (((tmp$45 = hashLoop) != null ? tmp$45 : Kotlin.throwNPE()).contains(elemPath_4)) {
                        if (inter) {
                          var tmp$46;
                          ((tmp$46 = hashResult) != null ? tmp$46 : Kotlin.throwNPE()).add(elemPath_4);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$47;
                          ((tmp$47 = hashResult) != null ? tmp$47 : Kotlin.throwNPE()).add(elemPath_4);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$48 = hashResult) != null ? tmp$48 : Kotlin.throwNPE()) !== 0) {
                var tmp$49, tmp$50;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$49 = this.path()) != null ? tmp$49 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_childs(), _.kotlin.toList_1((tmp$50 = hashResult) != null ? tmp$50 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          PortTypeRefImpl: Kotlin.createClass(classes.c8, classes.c4, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_optional = false;
              this.$_noDependency = false;
              this.$_ref = null;
              this.$_mappings_java_cache = null;
              this.$_mappings = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__optional: function () {
              return this.$_optional;
            },
            set__optional: function (tmp$0) {
              this.$_optional = tmp$0;
            },
            get__noDependency: function () {
              return this.$_noDependency;
            },
            set__noDependency: function (tmp$0) {
              this.$_noDependency = tmp$0;
            },
            get__ref: function () {
              return this.$_ref;
            },
            set__ref: function (tmp$0) {
              this.$_ref = tmp$0;
            },
            get__mappings_java_cache: function () {
              return this.$_mappings_java_cache;
            },
            set__mappings_java_cache: function (tmp$0) {
              this.$_mappings_java_cache = tmp$0;
            },
            get__mappings: function () {
              return this.$_mappings;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              var subsubsubsubref = this.getRef();
              if (subsubsubsubref != null) {
                subsubsubsubref.setRecursiveReadOnly();
              }
              {
                var tmp$0 = this.getMappings().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              {
                var tmp$0 = _.kotlin.iterator(this.get__mappings());
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              this.set__ref(null);
              var tmp$1;
              (tmp$1 = this.get__mappings()) != null ? tmp$1.clear() : null;
              this.set__mappings_java_cache(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getOptional: function () {
              return this.get__optional();
            },
            setOptional: function (optionalP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__optional(optionalP);
            },
            getNoDependency: function () {
              return this.get__noDependency();
            },
            setNoDependency: function (noDependencyP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__noDependency(noDependencyP);
            },
            getRef: function () {
              return this.get__ref();
            },
            setRef: function (refP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__ref(), refP)) {
                this.set__ref(refP);
              }
            },
            getMappings: function () {
              return _.kotlin.toList_1(this.get__mappings().values());
            },
            setMappings: function (mappingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (mappingsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__mappings_java_cache(null);
              if (!Kotlin.equals(this.get__mappings(), mappingsP)) {
                this.get__mappings().clear();
                {
                  var tmp$0 = mappingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__mappings().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = mappingsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'mappings', elem), 'mappings');
                  }
                }
              }
            },
            addMappings: function (mappingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__mappings_java_cache(null);
              mappingsP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'mappings', mappingsP), 'mappings');
              var _key_ = mappingsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__mappings().put(_key_, mappingsP);
            },
            addAllMappings: function (mappingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__mappings_java_cache(null);
              {
                var tmp$0 = mappingsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__mappings().put(_key_, el);
                }
              }
              {
                var tmp$1 = mappingsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'mappings', el_0), 'mappings');
                }
              }
            },
            removeMappings: function (mappingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__mappings_java_cache(null);
              if (this.get__mappings().size() !== 0 && this.get__mappings().containsKey(mappingsP.internalGetKey())) {
                this.get__mappings().remove(mappingsP.internalGetKey());
                var tmp$0;
                ((tmp$0 = mappingsP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllMappings: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getMappings()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__mappings_java_cache(null);
              this.get__mappings().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createPortTypeRef();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setOptional(this.getOptional());
              selfObjectClone.setNoDependency(this.getNoDependency());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.getMappings().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (this.getRef() != null) {
                var tmp$0;
                if (mutableOnly && ((tmp$0 = this.getRef()) != null ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$1;
                  clonedSelfObject.setRef((tmp$1 = this.getRef()) != null ? tmp$1 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.getRef());
                  if (interObj == null) {
                    throw new Kotlin.Exception('Non contained ref from PortTypeRef : ' + this.getRef());
                  }
                  clonedSelfObject.setRef(interObj);
                }
              }
              {
                var tmp$2 = this.getMappings().iterator();
                while (tmp$2.hasNext()) {
                  var sub = tmp$2.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addMappings(sub);
                  }
                   else {
                    var interObj_0 = addrs.get(sub);
                    if (interObj_0 == null) {
                      throw new Kotlin.Exception('Non contained mappings from PortTypeRef : ' + this.getMappings());
                    }
                    clonedSelfObject.addMappings(interObj_0);
                  }
                }
              }
              {
                var tmp$3 = this.getMappings().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  sub_0.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_optional()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setOptional(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_noDependency()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setNoDependency(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_ref()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setRef(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setRef(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setRef(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_mappings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addMappings(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllMappings(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeMappings(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllMappings();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__mappings().size() !== 0 && this.get__mappings().containsKey(value)) {
                    var obj = this.get__mappings().get(value);
                    this.get__mappings().put(obj.internalGetKey(), obj);
                    this.get__mappings().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findMappingsByID: function (key) {
              return this.get__mappings().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_ref()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getRef();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getRef();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_mappings()) {
                var objFound = this.findMappingsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  throw new Kotlin.Exception('KMFQL : rejected sucessor' + relationName + ' from PortTypeRef');
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getMappings().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findMappingsByID(subElement.getGenerated_KMF_ID());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.PortTypeRef) || !Kotlin.isType(similarObj, _.org.kevoree.impl.PortTypeRefImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getOptional(), similarObjCasted.getOptional())) {
                return false;
              }
              if (!Kotlin.equals(this.getNoDependency(), similarObjCasted.getNoDependency())) {
                return false;
              }
              if (this.getMappings().size() !== similarObjCasted.getMappings().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              result.addAll(this.get__mappings().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.PortTypeRef';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.PortTypeRef) || Kotlin.isType(similarObj, _.org.kevoree.impl.PortTypeRefImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$10, tmp$11;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getOptional();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getOptional() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_optional(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_optional(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getNoDependency();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getNoDependency() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_noDependency(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_noDependency(), null, attVal2.toString(), null));
                }
              }
              attVal = null;
              attVal = (tmp$9 = this.getRef()) != null ? tmp$9.path() : null;
              attVal2 = null;
              attVal2 = (tmp$11 = (tmp$10 = similarObjCasted) != null ? tmp$10.getRef() : null) != null ? tmp$11.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$12;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_ref(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_ref(), attVal2String, null, null));
                }
              }
              return traces;
            }
          }),
          DictionaryImpl: Kotlin.createClass(classes.c8, classes.c5, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_generated_KMF_ID = '';
              this.$_values_java_cache = null;
              this.$_values = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__generated_KMF_ID: function () {
              return this.$_generated_KMF_ID;
            },
            set__generated_KMF_ID: function (tmp$0) {
              this.$_generated_KMF_ID = tmp$0;
            },
            get__values_java_cache: function () {
              return this.$_values_java_cache;
            },
            set__values_java_cache: function (tmp$0) {
              this.$_values_java_cache = tmp$0;
            },
            get__values: function () {
              return this.$_values;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getValues().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              {
                var tmp$0 = _.kotlin.iterator(this.get__values());
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              var tmp$1;
              (tmp$1 = this.get__values()) != null ? tmp$1.clear() : null;
              this.set__values_java_cache(null);
            },
            getGenerated_KMF_ID: function () {
              return this.get__generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (generated_KMF_IDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__generated_KMF_ID(generated_KMF_IDP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getValues: function () {
              return _.kotlin.toList_1(this.get__values().values());
            },
            setValues: function (valuesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (valuesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__values_java_cache(null);
              if (!Kotlin.equals(this.get__values(), valuesP)) {
                this.get__values().clear();
                {
                  var tmp$0 = valuesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__values().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = valuesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'values', elem), 'values');
                  }
                }
              }
            },
            addValues: function (valuesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__values_java_cache(null);
              valuesP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'values', valuesP), 'values');
              var _key_ = valuesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__values().put(_key_, valuesP);
            },
            addAllValues: function (valuesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__values_java_cache(null);
              {
                var tmp$0 = valuesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__values().put(_key_, el);
                }
              }
              {
                var tmp$1 = valuesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'values', el_0), 'values');
                }
              }
            },
            removeValues: function (valuesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__values_java_cache(null);
              if (this.get__values().size() !== 0 && this.get__values().containsKey(valuesP.internalGetKey())) {
                this.get__values().remove(valuesP.internalGetKey());
                var tmp$0;
                ((tmp$0 = valuesP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllValues: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getValues()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__values_java_cache(null);
              this.get__values().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createDictionary();
              selfObjectClone.setGenerated_KMF_ID(this.getGenerated_KMF_ID());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.getValues().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getValues().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addValues(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained values from Dictionary : ' + this.getValues());
                    }
                    clonedSelfObject.addValues(interObj);
                  }
                }
              }
              {
                var tmp$1 = this.getValues().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGenerated_KMF_ID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_values()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addValues(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllValues(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeValues(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllValues();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__values().size() !== 0 && this.get__values().containsKey(value)) {
                    var obj = this.get__values().get(value);
                    this.get__values().put(obj.internalGetKey(), obj);
                    this.get__values().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getGenerated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findValuesByID: function (key) {
              return this.get__values().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_values();
              var optionalDetected = firstSepIndex !== 6;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, _.js.get_size(query));
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0, tmp$1;
              tmp$0 = query;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = _.js.get_size(relationName);
              }
              var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_values()) {
                var objFound = this.findValuesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  throw new Kotlin.Exception('KMFQL : rejected sucessor' + relationName + ' from Dictionary');
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getValues().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findValuesByID(subElement.getGenerated_KMF_ID());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Dictionary) || !Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getGenerated_KMF_ID(), similarObjCasted.getGenerated_KMF_ID())) {
                return false;
              }
              if (this.getValues().size() !== similarObjCasted.getValues().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              result.addAll(this.get__values().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Dictionary';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Dictionary) || Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getGenerated_KMF_ID();
              var tmp$0;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getGenerated_KMF_ID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
              return traces;
            }
          }),
          TypeLibraryImpl: Kotlin.createClass(classes.c8, classes.c11, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_subTypes_java_cache = null;
              this.$_subTypes = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__subTypes_java_cache: function () {
              return this.$_subTypes_java_cache;
            },
            set__subTypes_java_cache: function (tmp$0) {
              this.$_subTypes_java_cache = tmp$0;
            },
            get__subTypes: function () {
              return this.$_subTypes;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getSubTypes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__subTypes()) != null ? tmp$0.clear() : null;
              this.set__subTypes_java_cache(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getSubTypes: function () {
              return _.kotlin.toList_1(this.get__subTypes().values());
            },
            setSubTypes: function (subTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (subTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__subTypes_java_cache(null);
              if (!Kotlin.equals(this.get__subTypes(), subTypesP)) {
                this.get__subTypes().clear();
                {
                  var tmp$0 = subTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__subTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addSubTypes: function (subTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__subTypes_java_cache(null);
              var _key_ = subTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__subTypes().put(_key_, subTypesP);
            },
            addAllSubTypes: function (subTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__subTypes_java_cache(null);
              {
                var tmp$0 = subTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__subTypes().put(_key_, el);
                }
              }
            },
            removeSubTypes: function (subTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__subTypes_java_cache(null);
              if (this.get__subTypes().size() !== 0 && this.get__subTypes().containsKey(subTypesP.internalGetKey())) {
                this.get__subTypes().remove(subTypesP.internalGetKey());
              }
            },
            removeAllSubTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getSubTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__subTypes_java_cache(null);
              this.get__subTypes().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createTypeLibrary();
              selfObjectClone.setName(this.getName());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getSubTypes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addSubTypes(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained subTypes from TypeLibrary : ' + this.getSubTypes());
                    }
                    clonedSelfObject.addSubTypes(interObj);
                  }
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_subTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSubTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSubTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSubTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSubTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__subTypes().size() !== 0 && this.get__subTypes().containsKey(value)) {
                    var obj = this.get__subTypes().get(value);
                    this.get__subTypes().put(obj.internalGetKey(), obj);
                    this.get__subTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findSubTypesByID: function (key) {
              return this.get__subTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_subTypes();
              var optionalDetected = firstSepIndex !== 8;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, _.js.get_size(query));
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0, tmp$1;
              tmp$0 = query;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = _.js.get_size(relationName);
              }
              var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_subTypes()) {
                var objFound = this.findSubTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.TypeLibrary) || !Kotlin.isType(similarObj, _.org.kevoree.impl.TypeLibraryImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.TypeLibrary';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.TypeLibrary) || Kotlin.isType(similarObj, _.org.kevoree.impl.TypeLibraryImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$10;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$3 = this.getSubTypes().iterator();
                while (tmp$3.hasNext()) {
                  var elem = tmp$3.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$4;
                    ((tmp$4 = hashLoop) != null ? tmp$4 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$5;
                {
                  var tmp$6 = ((tmp$5 = similarObjCasted) != null ? tmp$5 : Kotlin.throwNPE()).getSubTypes().iterator();
                  while (tmp$6.hasNext()) {
                    var elem_0 = tmp$6.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$7;
                      if (((tmp$7 = hashLoop) != null ? tmp$7 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$8;
                          ((tmp$8 = hashResult) != null ? tmp$8 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$9;
                          ((tmp$9 = hashResult) != null ? tmp$9 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$10 = hashResult) != null ? tmp$10 : Kotlin.throwNPE()) !== 0) {
                var tmp$11, tmp$12;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_subTypes(), _.kotlin.toList_1((tmp$12 = hashResult) != null ? tmp$12 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          NodeLinkImpl: Kotlin.createClass(classes.c8, classes.c12, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_networkType = '';
              this.$_estimatedRate = 0;
              this.$_lastCheck = '';
              this.$_zoneID = '';
              this.$_generated_KMF_ID = '';
              this.$_networkProperties_java_cache = null;
              this.$_networkProperties = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__networkType: function () {
              return this.$_networkType;
            },
            set__networkType: function (tmp$0) {
              this.$_networkType = tmp$0;
            },
            get__estimatedRate: function () {
              return this.$_estimatedRate;
            },
            set__estimatedRate: function (tmp$0) {
              this.$_estimatedRate = tmp$0;
            },
            get__lastCheck: function () {
              return this.$_lastCheck;
            },
            set__lastCheck: function (tmp$0) {
              this.$_lastCheck = tmp$0;
            },
            get__zoneID: function () {
              return this.$_zoneID;
            },
            set__zoneID: function (tmp$0) {
              this.$_zoneID = tmp$0;
            },
            get__generated_KMF_ID: function () {
              return this.$_generated_KMF_ID;
            },
            set__generated_KMF_ID: function (tmp$0) {
              this.$_generated_KMF_ID = tmp$0;
            },
            get__networkProperties_java_cache: function () {
              return this.$_networkProperties_java_cache;
            },
            set__networkProperties_java_cache: function (tmp$0) {
              this.$_networkProperties_java_cache = tmp$0;
            },
            get__networkProperties: function () {
              return this.$_networkProperties;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getNetworkProperties().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              {
                var tmp$0 = _.kotlin.iterator(this.get__networkProperties());
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              var tmp$1;
              (tmp$1 = this.get__networkProperties()) != null ? tmp$1.clear() : null;
              this.set__networkProperties_java_cache(null);
            },
            getNetworkType: function () {
              return this.get__networkType();
            },
            setNetworkType: function (networkTypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__networkType(networkTypeP);
            },
            getEstimatedRate: function () {
              return this.get__estimatedRate();
            },
            setEstimatedRate: function (estimatedRateP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__estimatedRate(estimatedRateP);
            },
            getLastCheck: function () {
              return this.get__lastCheck();
            },
            setLastCheck: function (lastCheckP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__lastCheck(lastCheckP);
            },
            getZoneID: function () {
              return this.get__zoneID();
            },
            setZoneID: function (zoneIDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__zoneID(zoneIDP);
            },
            getGenerated_KMF_ID: function () {
              return this.get__generated_KMF_ID();
            },
            setGenerated_KMF_ID: function (generated_KMF_IDP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__generated_KMF_ID(generated_KMF_IDP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getNetworkProperties: function () {
              return _.kotlin.toList_1(this.get__networkProperties().values());
            },
            setNetworkProperties: function (networkPropertiesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (networkPropertiesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__networkProperties_java_cache(null);
              if (!Kotlin.equals(this.get__networkProperties(), networkPropertiesP)) {
                this.get__networkProperties().clear();
                {
                  var tmp$0 = networkPropertiesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__networkProperties().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = networkPropertiesP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'networkProperties', elem), 'networkProperties');
                  }
                }
              }
            },
            addNetworkProperties: function (networkPropertiesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__networkProperties_java_cache(null);
              networkPropertiesP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'networkProperties', networkPropertiesP), 'networkProperties');
              var _key_ = networkPropertiesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__networkProperties().put(_key_, networkPropertiesP);
            },
            addAllNetworkProperties: function (networkPropertiesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__networkProperties_java_cache(null);
              {
                var tmp$0 = networkPropertiesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__networkProperties().put(_key_, el);
                }
              }
              {
                var tmp$1 = networkPropertiesP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'networkProperties', el_0), 'networkProperties');
                }
              }
            },
            removeNetworkProperties: function (networkPropertiesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__networkProperties_java_cache(null);
              if (this.get__networkProperties().size() !== 0 && this.get__networkProperties().containsKey(networkPropertiesP.internalGetKey())) {
                this.get__networkProperties().remove(networkPropertiesP.internalGetKey());
                var tmp$0;
                ((tmp$0 = networkPropertiesP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllNetworkProperties: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getNetworkProperties()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__networkProperties_java_cache(null);
              this.get__networkProperties().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createNodeLink();
              selfObjectClone.setNetworkType(this.getNetworkType());
              selfObjectClone.setEstimatedRate(this.getEstimatedRate());
              selfObjectClone.setLastCheck(this.getLastCheck());
              selfObjectClone.setZoneID(this.getZoneID());
              selfObjectClone.setGenerated_KMF_ID(this.getGenerated_KMF_ID());
              subResult.put(this, selfObjectClone);
              {
                var tmp$0 = this.getNetworkProperties().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getNetworkProperties().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addNetworkProperties(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained networkProperties from NodeLink : ' + this.getNetworkProperties());
                    }
                    clonedSelfObject.addNetworkProperties(interObj);
                  }
                }
              }
              {
                var tmp$1 = this.getNetworkProperties().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_networkType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setNetworkType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_estimatedRate()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setEstimatedRate(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_lastCheck()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setLastCheck(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_zoneID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setZoneID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_generated_KMF_ID()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setGenerated_KMF_ID(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_networkProperties()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addNetworkProperties(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllNetworkProperties(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeNetworkProperties(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllNetworkProperties();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__networkProperties().size() !== 0 && this.get__networkProperties().containsKey(value)) {
                    var obj = this.get__networkProperties().get(value);
                    this.get__networkProperties().put(obj.internalGetKey(), obj);
                    this.get__networkProperties().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getGenerated_KMF_ID();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findNetworkPropertiesByID: function (key) {
              return this.get__networkProperties().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_networkProperties();
              var optionalDetected = firstSepIndex !== 17;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, _.js.get_size(query));
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0, tmp$1;
              tmp$0 = query;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = _.js.get_size(relationName);
              }
              var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_networkProperties()) {
                var objFound = this.findNetworkPropertiesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  throw new Kotlin.Exception('KMFQL : rejected sucessor' + relationName + ' from NodeLink');
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getNetworkProperties().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findNetworkPropertiesByID(subElement.getName());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.NodeLink) || !Kotlin.isType(similarObj, _.org.kevoree.impl.NodeLinkImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getNetworkType(), similarObjCasted.getNetworkType())) {
                return false;
              }
              if (this.getEstimatedRate() !== similarObjCasted.getEstimatedRate()) {
                return false;
              }
              if (!Kotlin.equals(this.getLastCheck(), similarObjCasted.getLastCheck())) {
                return false;
              }
              if (!Kotlin.equals(this.getZoneID(), similarObjCasted.getZoneID())) {
                return false;
              }
              if (!Kotlin.equals(this.getGenerated_KMF_ID(), similarObjCasted.getGenerated_KMF_ID())) {
                return false;
              }
              if (this.getNetworkProperties().size() !== similarObjCasted.getNetworkProperties().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              result.addAll(this.get__networkProperties().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.NodeLink';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.NodeLink) || Kotlin.isType(similarObj, _.org.kevoree.impl.NodeLinkImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getNetworkType();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$12;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getNetworkType() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_networkType(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_networkType(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getEstimatedRate();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getEstimatedRate() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_estimatedRate(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_estimatedRate(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getLastCheck();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getLastCheck() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lastCheck(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lastCheck(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getZoneID();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getZoneID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_zoneID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_zoneID(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getGenerated_KMF_ID();
              attVal2 = (tmp$12 = similarObjCasted) != null ? tmp$12.getGenerated_KMF_ID() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$14;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_generated_KMF_ID(), null, attVal2.toString(), null));
                }
              }
              return traces;
            }
          }),
          DictionaryAttributeImpl: Kotlin.createClass(classes.c8, classes.cq, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_optional = false;
              this.$_state = false;
              this.$_datatype = '';
              this.$_fragmentDependant = false;
              this.$_genericTypes_java_cache = null;
              this.$_genericTypes = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__optional: function () {
              return this.$_optional;
            },
            set__optional: function (tmp$0) {
              this.$_optional = tmp$0;
            },
            get__state: function () {
              return this.$_state;
            },
            set__state: function (tmp$0) {
              this.$_state = tmp$0;
            },
            get__datatype: function () {
              return this.$_datatype;
            },
            set__datatype: function (tmp$0) {
              this.$_datatype = tmp$0;
            },
            get__fragmentDependant: function () {
              return this.$_fragmentDependant;
            },
            set__fragmentDependant: function (tmp$0) {
              this.$_fragmentDependant = tmp$0;
            },
            get__genericTypes_java_cache: function () {
              return this.$_genericTypes_java_cache;
            },
            set__genericTypes_java_cache: function (tmp$0) {
              this.$_genericTypes_java_cache = tmp$0;
            },
            get__genericTypes: function () {
              return this.$_genericTypes;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getGenericTypes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getOptional: function () {
              return this.get__optional();
            },
            setOptional: function (optionalP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__optional(optionalP);
            },
            getState: function () {
              return this.get__state();
            },
            setState: function (stateP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__state(stateP);
            },
            getDatatype: function () {
              return this.get__datatype();
            },
            setDatatype: function (datatypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__datatype(datatypeP);
            },
            getFragmentDependant: function () {
              return this.get__fragmentDependant();
            },
            setFragmentDependant: function (fragmentDependantP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__fragmentDependant(fragmentDependantP);
            },
            getGenericTypes: function () {
              return _.kotlin.toList_1(this.get__genericTypes().values());
            },
            setGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (genericTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__genericTypes_java_cache(null);
              if (!Kotlin.equals(this.get__genericTypes(), genericTypesP)) {
                this.get__genericTypes().clear();
                {
                  var tmp$0 = genericTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__genericTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__genericTypes_java_cache(null);
              var _key_ = genericTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__genericTypes().put(_key_, genericTypesP);
            },
            addAllGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__genericTypes_java_cache(null);
              {
                var tmp$0 = genericTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__genericTypes().put(_key_, el);
                }
              }
            },
            removeGenericTypes: function (genericTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__genericTypes_java_cache(null);
              if (this.get__genericTypes().size() !== 0 && this.get__genericTypes().containsKey(genericTypesP.internalGetKey())) {
                this.get__genericTypes().remove(genericTypesP.internalGetKey());
              }
            },
            removeAllGenericTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getGenericTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__genericTypes_java_cache(null);
              this.get__genericTypes().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createDictionaryAttribute();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setOptional(this.getOptional());
              selfObjectClone.setState(this.getState());
              selfObjectClone.setDatatype(this.getDatatype());
              selfObjectClone.setFragmentDependant(this.getFragmentDependant());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getGenericTypes().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addGenericTypes(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained genericTypes from DictionaryAttribute : ' + this.getGenericTypes());
                    }
                    clonedSelfObject.addGenericTypes(interObj);
                  }
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_optional()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setOptional(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_state()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setState(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_datatype()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDatatype(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_fragmentDependant()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setFragmentDependant(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_genericTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addGenericTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllGenericTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeGenericTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllGenericTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__genericTypes().size() !== 0 && this.get__genericTypes().containsKey(value)) {
                    var obj = this.get__genericTypes().get(value);
                    this.get__genericTypes().put(obj.internalGetKey(), obj);
                    this.get__genericTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findGenericTypesByID: function (key) {
              return this.get__genericTypes().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_genericTypes();
              var optionalDetected = firstSepIndex !== 12;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, _.js.get_size(query));
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0, tmp$1;
              tmp$0 = query;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = _.js.get_size(relationName);
              }
              var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_genericTypes()) {
                var objFound = this.findGenericTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.DictionaryAttribute) || !Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryAttributeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getOptional(), similarObjCasted.getOptional())) {
                return false;
              }
              if (!Kotlin.equals(this.getState(), similarObjCasted.getState())) {
                return false;
              }
              if (!Kotlin.equals(this.getDatatype(), similarObjCasted.getDatatype())) {
                return false;
              }
              if (!Kotlin.equals(this.getFragmentDependant(), similarObjCasted.getFragmentDependant())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.DictionaryAttribute';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.DictionaryAttribute) || Kotlin.isType(similarObj, _.org.kevoree.impl.DictionaryAttributeImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$12, tmp$22;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getOptional();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getOptional() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_optional(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_optional(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getState();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getState() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_state(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_state(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getDatatype();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getDatatype() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_datatype(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_datatype(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getFragmentDependant();
              attVal2 = (tmp$12 = similarObjCasted) != null ? tmp$12.getFragmentDependant() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_fragmentDependant(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$14;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_fragmentDependant(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$15 = this.getGenericTypes().iterator();
                while (tmp$15.hasNext()) {
                  var elem = tmp$15.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$16;
                    ((tmp$16 = hashLoop) != null ? tmp$16 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$17;
                {
                  var tmp$18 = ((tmp$17 = similarObjCasted) != null ? tmp$17 : Kotlin.throwNPE()).getGenericTypes().iterator();
                  while (tmp$18.hasNext()) {
                    var elem_0 = tmp$18.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$19;
                      if (((tmp$19 = hashLoop) != null ? tmp$19 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$20;
                          ((tmp$20 = hashResult) != null ? tmp$20 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$21;
                          ((tmp$21 = hashResult) != null ? tmp$21 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$22 = hashResult) != null ? tmp$22 : Kotlin.throwNPE()) !== 0) {
                var tmp$23, tmp$24;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$23 = this.path()) != null ? tmp$23 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_genericTypes(), _.kotlin.toList_1((tmp$24 = hashResult) != null ? tmp$24 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          ChannelImpl: Kotlin.createClass(classes.c8, classes.c19, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_metaData = '';
              this.$_started = true;
              this.$_typeDefinition = null;
              this.$_dictionary = null;
              this.$_bindings_java_cache = null;
              this.$_bindings = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__metaData: function () {
              return this.$_metaData;
            },
            set__metaData: function (tmp$0) {
              this.$_metaData = tmp$0;
            },
            get__started: function () {
              return this.$_started;
            },
            set__started: function (tmp$0) {
              this.$_started = tmp$0;
            },
            get__typeDefinition: function () {
              return this.$_typeDefinition;
            },
            set__typeDefinition: function (tmp$0) {
              this.$_typeDefinition = tmp$0;
            },
            get__dictionary: function () {
              return this.$_dictionary;
            },
            set__dictionary: function (tmp$0) {
              this.$_dictionary = tmp$0;
            },
            get__bindings_java_cache: function () {
              return this.$_bindings_java_cache;
            },
            set__bindings_java_cache: function (tmp$0) {
              this.$_bindings_java_cache = tmp$0;
            },
            get__bindings: function () {
              return this.$_bindings;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              var subsubsubsubtypeDefinition = this.getTypeDefinition();
              if (subsubsubsubtypeDefinition != null) {
                subsubsubsubtypeDefinition.setRecursiveReadOnly();
              }
              var subsubsubsubdictionary = this.getDictionary();
              if (subsubsubsubdictionary != null) {
                subsubsubsubdictionary.setRecursiveReadOnly();
              }
              {
                var tmp$0 = this.getBindings().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0, tmp$1;
              (tmp$0 = this.get__dictionary()) != null ? tmp$0.delete() : null;
              (tmp$1 = this.get__bindings()) != null ? tmp$1.clear() : null;
              this.set__bindings_java_cache(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getMetaData: function () {
              return this.get__metaData();
            },
            setMetaData: function (metaDataP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__metaData(metaDataP);
            },
            getStarted: function () {
              return this.get__started();
            },
            setStarted: function (startedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__started(startedP);
            },
            getTypeDefinition: function () {
              return this.get__typeDefinition();
            },
            setTypeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__typeDefinition(), typeDefinitionP)) {
                this.set__typeDefinition(typeDefinitionP);
              }
            },
            getDictionary: function () {
              return this.get__dictionary();
            },
            setDictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionary(), dictionaryP)) {
                if (this.get__dictionary() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionary()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  dictionaryP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionary', null), 'dictionary');
                }
                this.set__dictionary(dictionaryP);
              }
            },
            getBindings: function () {
              return _.kotlin.toList_1(this.get__bindings().values());
            },
            setBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (bindingsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              if (!Kotlin.equals(this.get__bindings(), bindingsP)) {
                this.get__bindings().clear();
                {
                  var tmp$0 = bindingsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__bindings().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = bindingsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.noOpposite_setHub(this);
                  }
                }
              }
            },
            addBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              var _key_ = bindingsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__bindings().put(_key_, bindingsP);
              bindingsP.noOpposite_setHub(this);
            },
            addAllBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              {
                var tmp$0 = bindingsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__bindings().put(_key_, el);
                }
              }
              {
                var tmp$1 = bindingsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.noOpposite_setHub(this);
                }
              }
            },
            noOpposite_addBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              var _key_ = bindingsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__bindings().put(_key_, bindingsP);
            },
            noOpposite_addAllBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              {
                var tmp$0 = bindingsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__bindings().put(_key_, el);
                }
              }
            },
            removeBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey(bindingsP.internalGetKey())) {
                this.get__bindings().remove(bindingsP.internalGetKey());
                bindingsP.noOpposite_setHub(null);
              }
            },
            removeAllBindings: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getBindings()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.noOpposite_setHub(null);
                }
              }
              this.set__bindings_java_cache(null);
              this.get__bindings().clear();
            },
            noOpposite_removeBindings: function (bindingsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__bindings_java_cache(null);
              if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey(bindingsP.internalGetKey())) {
                this.get__bindings().remove(bindingsP.internalGetKey());
              }
            },
            noOpposite_removeAllBindings: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getBindings()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__bindings_java_cache(null);
              this.get__bindings().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createChannel();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setMetaData(this.getMetaData());
              selfObjectClone.setStarted(this.getStarted());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionary = this.getDictionary();
              if (subsubsubsubdictionary != null) {
                subsubsubsubdictionary.getClonelazy(subResult, _factories, mutableOnly);
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (this.getTypeDefinition() != null) {
                var tmp$0;
                if (mutableOnly && ((tmp$0 = this.getTypeDefinition()) != null ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$1;
                  clonedSelfObject.setTypeDefinition((tmp$1 = this.getTypeDefinition()) != null ? tmp$1 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.getTypeDefinition());
                  if (interObj == null) {
                    throw new Kotlin.Exception('Non contained typeDefinition from Channel : ' + this.getTypeDefinition());
                  }
                  clonedSelfObject.setTypeDefinition(interObj);
                }
              }
              if (this.getDictionary() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.getDictionary()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.setDictionary((tmp$3 = this.getDictionary()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionary());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionary from Channel : ' + this.getDictionary());
                  }
                  clonedSelfObject.setDictionary(interObj_0);
                }
              }
              {
                var tmp$4 = this.getBindings().iterator();
                while (tmp$4.hasNext()) {
                  var sub = tmp$4.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.noOpposite_addBindings(sub);
                  }
                   else {
                    var interObj_1 = addrs.get(sub);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained bindings from Channel : ' + this.getBindings());
                    }
                    clonedSelfObject.noOpposite_addBindings(interObj_1);
                  }
                }
              }
              var subsubsubdictionary = this.getDictionary();
              if (subsubsubdictionary != null) {
                subsubsubdictionary.resolve(addrs, readOnly, mutableOnly);
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setMetaData(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_started()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStarted(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setTypeDefinition(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setTypeDefinition(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setTypeDefinition(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionary(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionary(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionary(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_bindings()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addBindings(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllBindings(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeBindings(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllBindings();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__bindings().size() !== 0 && this.get__bindings().containsKey(value)) {
                    var obj = this.get__bindings().get(value);
                    this.get__bindings().put(obj.internalGetKey(), obj);
                    this.get__bindings().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findBindingsByID: function (key) {
              return this.get__bindings().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getTypeDefinition();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getTypeDefinition();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.getDictionary();
                  var tmp$2;
                  tmp$0 = (tmp$2 = obj_0) != null ? tmp$2.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionary();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_bindings()) {
                var objFound = this.findBindingsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  throw new Kotlin.Exception('KMFQL : rejected sucessor' + relationName + ' from Channel');
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Channel) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ChannelImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getMetaData(), similarObjCasted.getMetaData())) {
                return false;
              }
              if (!Kotlin.equals(this.getStarted(), similarObjCasted.getStarted())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionary(), similarObjCasted.getDictionary())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(1);
              if (this.get__dictionary() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionary()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Channel';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Channel) || Kotlin.isType(similarObj, _.org.kevoree.impl.ChannelImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$10, tmp$11, tmp$21;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getMetaData();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getMetaData() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStarted();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getStarted() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_started(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_started(), null, attVal2.toString(), null));
                }
              }
              attVal = null;
              attVal = (tmp$9 = this.getTypeDefinition()) != null ? tmp$9.path() : null;
              attVal2 = null;
              attVal2 = (tmp$11 = (tmp$10 = similarObjCasted) != null ? tmp$10.getTypeDefinition() : null) != null ? tmp$11.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$12;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$14 = this.getBindings().iterator();
                while (tmp$14.hasNext()) {
                  var elem = tmp$14.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$15;
                    ((tmp$15 = hashLoop) != null ? tmp$15 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$16;
                {
                  var tmp$17 = ((tmp$16 = similarObjCasted) != null ? tmp$16 : Kotlin.throwNPE()).getBindings().iterator();
                  while (tmp$17.hasNext()) {
                    var elem_0 = tmp$17.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$18;
                      if (((tmp$18 = hashLoop) != null ? tmp$18 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$19;
                          ((tmp$19 = hashResult) != null ? tmp$19 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$20;
                          ((tmp$20 = hashResult) != null ? tmp$20 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$21 = hashResult) != null ? tmp$21 : Kotlin.throwNPE()) !== 0) {
                var tmp$22, tmp$23;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$22 = this.path()) != null ? tmp$22 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_bindings(), _.kotlin.toList_1((tmp$23 = hashResult) != null ? tmp$23 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          ContainerNodeImpl: Kotlin.createClass(classes.c8, classes.c1, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_metaData = '';
              this.$_started = true;
              this.$_typeDefinition = null;
              this.$_dictionary = null;
              this.$_components_java_cache = null;
              this.$_components = new Kotlin.ComplexHashMap(0);
              this.$_hosts_java_cache = null;
              this.$_hosts = new Kotlin.ComplexHashMap(0);
              this.$_host = null;
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__metaData: function () {
              return this.$_metaData;
            },
            set__metaData: function (tmp$0) {
              this.$_metaData = tmp$0;
            },
            get__started: function () {
              return this.$_started;
            },
            set__started: function (tmp$0) {
              this.$_started = tmp$0;
            },
            get__typeDefinition: function () {
              return this.$_typeDefinition;
            },
            set__typeDefinition: function (tmp$0) {
              this.$_typeDefinition = tmp$0;
            },
            get__dictionary: function () {
              return this.$_dictionary;
            },
            set__dictionary: function (tmp$0) {
              this.$_dictionary = tmp$0;
            },
            get__components_java_cache: function () {
              return this.$_components_java_cache;
            },
            set__components_java_cache: function (tmp$0) {
              this.$_components_java_cache = tmp$0;
            },
            get__components: function () {
              return this.$_components;
            },
            get__hosts_java_cache: function () {
              return this.$_hosts_java_cache;
            },
            set__hosts_java_cache: function (tmp$0) {
              this.$_hosts_java_cache = tmp$0;
            },
            get__hosts: function () {
              return this.$_hosts;
            },
            get__host: function () {
              return this.$_host;
            },
            set__host: function (tmp$0) {
              this.$_host = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              var subsubsubsubtypeDefinition = this.getTypeDefinition();
              if (subsubsubsubtypeDefinition != null) {
                subsubsubsubtypeDefinition.setRecursiveReadOnly();
              }
              var subsubsubsubdictionary = this.getDictionary();
              if (subsubsubsubdictionary != null) {
                subsubsubsubdictionary.setRecursiveReadOnly();
              }
              {
                var tmp$0 = this.getComponents().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              {
                var tmp$1 = this.getHosts().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              var subsubsubsubhost = this.getHost();
              if (subsubsubsubhost != null) {
                subsubsubsubhost.setRecursiveReadOnly();
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0, tmp$2, tmp$3;
              (tmp$0 = this.get__dictionary()) != null ? tmp$0.delete() : null;
              {
                var tmp$1 = _.kotlin.iterator(this.get__components());
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              (tmp$2 = this.get__components()) != null ? tmp$2.clear() : null;
              this.set__components_java_cache(null);
              (tmp$3 = this.get__hosts()) != null ? tmp$3.clear() : null;
              this.set__hosts_java_cache(null);
              this.set__host(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getMetaData: function () {
              return this.get__metaData();
            },
            setMetaData: function (metaDataP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__metaData(metaDataP);
            },
            getStarted: function () {
              return this.get__started();
            },
            setStarted: function (startedP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__started(startedP);
            },
            getTypeDefinition: function () {
              return this.get__typeDefinition();
            },
            setTypeDefinition: function (typeDefinitionP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__typeDefinition(), typeDefinitionP)) {
                this.set__typeDefinition(typeDefinitionP);
              }
            },
            getDictionary: function () {
              return this.get__dictionary();
            },
            setDictionary: function (dictionaryP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionary(), dictionaryP)) {
                if (this.get__dictionary() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionary()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryP != null) {
                  dictionaryP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionary', null), 'dictionary');
                }
                this.set__dictionary(dictionaryP);
              }
            },
            getComponents: function () {
              return _.kotlin.toList_1(this.get__components().values());
            },
            setComponents: function (componentsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (componentsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__components_java_cache(null);
              if (!Kotlin.equals(this.get__components(), componentsP)) {
                this.get__components().clear();
                {
                  var tmp$0 = componentsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__components().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = componentsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'components', elem), 'components');
                  }
                }
              }
            },
            addComponents: function (componentsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__components_java_cache(null);
              componentsP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'components', componentsP), 'components');
              var _key_ = componentsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__components().put(_key_, componentsP);
            },
            addAllComponents: function (componentsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__components_java_cache(null);
              {
                var tmp$0 = componentsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__components().put(_key_, el);
                }
              }
              {
                var tmp$1 = componentsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'components', el_0), 'components');
                }
              }
            },
            removeComponents: function (componentsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__components_java_cache(null);
              if (this.get__components().size() !== 0 && this.get__components().containsKey(componentsP.internalGetKey())) {
                this.get__components().remove(componentsP.internalGetKey());
                var tmp$0;
                ((tmp$0 = componentsP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllComponents: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getComponents()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__components_java_cache(null);
              this.get__components().clear();
            },
            getHosts: function () {
              return _.kotlin.toList_1(this.get__hosts().values());
            },
            setHosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (hostsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__hosts_java_cache(null);
              if (!Kotlin.equals(this.get__hosts(), hostsP)) {
                this.get__hosts().clear();
                {
                  var tmp$0 = hostsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__hosts().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = hostsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.noOpposite_setHost(this);
                  }
                }
              }
            },
            addHosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__hosts_java_cache(null);
              var _key_ = hostsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__hosts().put(_key_, hostsP);
              hostsP.noOpposite_setHost(this);
            },
            addAllHosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__hosts_java_cache(null);
              {
                var tmp$0 = hostsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__hosts().put(_key_, el);
                }
              }
              {
                var tmp$1 = hostsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.noOpposite_setHost(this);
                }
              }
            },
            noOpposite_addHosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__hosts_java_cache(null);
              var _key_ = hostsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__hosts().put(_key_, hostsP);
            },
            noOpposite_addAllHosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__hosts_java_cache(null);
              {
                var tmp$0 = hostsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__hosts().put(_key_, el);
                }
              }
            },
            removeHosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__hosts_java_cache(null);
              if (this.get__hosts().size() !== 0 && this.get__hosts().containsKey(hostsP.internalGetKey())) {
                this.get__hosts().remove(hostsP.internalGetKey());
                hostsP.noOpposite_setHost(null);
              }
            },
            removeAllHosts: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getHosts()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.noOpposite_setHost(null);
                }
              }
              this.set__hosts_java_cache(null);
              this.get__hosts().clear();
            },
            noOpposite_removeHosts: function (hostsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__hosts_java_cache(null);
              if (this.get__hosts().size() !== 0 && this.get__hosts().containsKey(hostsP.internalGetKey())) {
                this.get__hosts().remove(hostsP.internalGetKey());
              }
            },
            noOpposite_removeAllHosts: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getHosts()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__hosts_java_cache(null);
              this.get__hosts().clear();
            },
            getHost: function () {
              return this.get__host();
            },
            noOpposite_setHost: function (hostP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__host(), hostP)) {
                this.set__host(hostP);
              }
            },
            setHost: function (hostP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__host(), hostP)) {
                if (this.get__host() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__host()) != null ? tmp$0 : Kotlin.throwNPE()).noOpposite_removeHosts(this);
                }
                if (hostP != null) {
                  hostP.noOpposite_addHosts(this);
                }
                this.set__host(hostP);
              }
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createContainerNode();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setMetaData(this.getMetaData());
              selfObjectClone.setStarted(this.getStarted());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionary = this.getDictionary();
              if (subsubsubsubdictionary != null) {
                subsubsubsubdictionary.getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$0 = this.getComponents().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (this.getTypeDefinition() != null) {
                var tmp$0;
                if (mutableOnly && ((tmp$0 = this.getTypeDefinition()) != null ? tmp$0 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$1;
                  clonedSelfObject.setTypeDefinition((tmp$1 = this.getTypeDefinition()) != null ? tmp$1 : Kotlin.throwNPE());
                }
                 else {
                  var interObj = addrs.get(this.getTypeDefinition());
                  if (interObj == null) {
                    throw new Kotlin.Exception('Non contained typeDefinition from ContainerNode : ' + this.getTypeDefinition());
                  }
                  clonedSelfObject.setTypeDefinition(interObj);
                }
              }
              if (this.getDictionary() != null) {
                var tmp$2;
                if (mutableOnly && ((tmp$2 = this.getDictionary()) != null ? tmp$2 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$3;
                  clonedSelfObject.setDictionary((tmp$3 = this.getDictionary()) != null ? tmp$3 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionary());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionary from ContainerNode : ' + this.getDictionary());
                  }
                  clonedSelfObject.setDictionary(interObj_0);
                }
              }
              {
                var tmp$4 = this.getComponents().iterator();
                while (tmp$4.hasNext()) {
                  var sub = tmp$4.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addComponents(sub);
                  }
                   else {
                    var interObj_1 = addrs.get(sub);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained components from ContainerNode : ' + this.getComponents());
                    }
                    clonedSelfObject.addComponents(interObj_1);
                  }
                }
              }
              {
                var tmp$5 = this.getHosts().iterator();
                while (tmp$5.hasNext()) {
                  var sub_0 = tmp$5.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.noOpposite_addHosts(sub_0);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_0);
                    if (interObj_2 == null) {
                      throw new Kotlin.Exception('Non contained hosts from ContainerNode : ' + this.getHosts());
                    }
                    clonedSelfObject.noOpposite_addHosts(interObj_2);
                  }
                }
              }
              if (this.getHost() != null) {
                var tmp$6;
                if (mutableOnly && ((tmp$6 = this.getHost()) != null ? tmp$6 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$7;
                  clonedSelfObject.noOpposite_setHost((tmp$7 = this.getHost()) != null ? tmp$7 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_3 = addrs.get(this.getHost());
                  if (interObj_3 == null) {
                    throw new Kotlin.Exception('Non contained host from ContainerNode : ' + this.getHost());
                  }
                  clonedSelfObject.noOpposite_setHost(interObj_3);
                }
              }
              var subsubsubdictionary = this.getDictionary();
              if (subsubsubdictionary != null) {
                subsubsubdictionary.resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$8 = this.getComponents().iterator();
                while (tmp$8.hasNext()) {
                  var sub_1 = tmp$8.next();
                  sub_1.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_metaData()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setMetaData(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_started()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setStarted(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setTypeDefinition(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setTypeDefinition(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setTypeDefinition(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionary(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionary(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionary(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_components()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addComponents(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllComponents(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeComponents(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllComponents();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__components().size() !== 0 && this.get__components().containsKey(value)) {
                    var obj = this.get__components().get(value);
                    this.get__components().put(obj.internalGetKey(), obj);
                    this.get__components().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_hosts()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addHosts(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllHosts(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeHosts(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllHosts();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__hosts().size() !== 0 && this.get__hosts().containsKey(value)) {
                    var obj_0 = this.get__hosts().get(value);
                    this.get__hosts().put(obj_0.internalGetKey(), obj_0);
                    this.get__hosts().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_host()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setHost(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setHost(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setHost(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findComponentsByID: function (key) {
              return this.get__components().get(key);
            },
            findHostsByID: function (key) {
              return this.get__hosts().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_typeDefinition()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getTypeDefinition();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getTypeDefinition();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionary()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_0 = this.getDictionary();
                  var tmp$2;
                  tmp$0 = (tmp$2 = obj_0) != null ? tmp$2.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionary();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_components()) {
                var objFound = this.findComponentsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_hosts()) {
                var objFound_0 = this.findHostsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_host()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj_1 = this.getHost();
                  var tmp$3;
                  tmp$0 = (tmp$3 = obj_1) != null ? tmp$3.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getHost();
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getComponents().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findComponentsByID(subElement.getName());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ContainerNode) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ContainerNodeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getMetaData(), similarObjCasted.getMetaData())) {
                return false;
              }
              if (!Kotlin.equals(this.getStarted(), similarObjCasted.getStarted())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionary(), similarObjCasted.getDictionary())) {
                return false;
              }
              if (this.getComponents().size() !== similarObjCasted.getComponents().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(2);
              if (this.get__dictionary() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionary()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__components().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.ContainerNode';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ContainerNode) || Kotlin.isType(similarObj, _.org.kevoree.impl.ContainerNodeImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$10, tmp$11, tmp$21, tmp$24, tmp$25, tmp$26;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getMetaData();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getMetaData() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_metaData(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getStarted();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getStarted() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_started(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_started(), null, attVal2.toString(), null));
                }
              }
              attVal = null;
              attVal = (tmp$9 = this.getTypeDefinition()) != null ? tmp$9.path() : null;
              attVal2 = null;
              attVal2 = (tmp$11 = (tmp$10 = similarObjCasted) != null ? tmp$10.getTypeDefinition() : null) != null ? tmp$11.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$12;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$12 = this.path()) != null ? tmp$12 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_typeDefinition(), attVal2String, null, null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$14 = this.getHosts().iterator();
                while (tmp$14.hasNext()) {
                  var elem = tmp$14.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$15;
                    ((tmp$15 = hashLoop) != null ? tmp$15 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$16;
                {
                  var tmp$17 = ((tmp$16 = similarObjCasted) != null ? tmp$16 : Kotlin.throwNPE()).getHosts().iterator();
                  while (tmp$17.hasNext()) {
                    var elem_0 = tmp$17.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$18;
                      if (((tmp$18 = hashLoop) != null ? tmp$18 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$19;
                          ((tmp$19 = hashResult) != null ? tmp$19 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$20;
                          ((tmp$20 = hashResult) != null ? tmp$20 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$21 = hashResult) != null ? tmp$21 : Kotlin.throwNPE()) !== 0) {
                var tmp$22, tmp$23;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$22 = this.path()) != null ? tmp$22 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_hosts(), _.kotlin.toList_1((tmp$23 = hashResult) != null ? tmp$23 : Kotlin.throwNPE()), null));
              }
              attVal = null;
              attVal = (tmp$24 = this.getHost()) != null ? tmp$24.path() : null;
              attVal2 = null;
              attVal2 = (tmp$26 = (tmp$25 = similarObjCasted) != null ? tmp$25.getHost() : null) != null ? tmp$26.path() : null;
              if (attVal2 != null) {
                attVal2String = attVal2.toString();
              }
               else {
                attVal2String = null;
              }
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$27;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$27 = this.path()) != null ? tmp$27 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_host(), attVal2String, null, null));
                }
              }
               else {
                if (inter) {
                  var tmp$28;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$28 = this.path()) != null ? tmp$28 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_host(), attVal2String, null, null));
                }
              }
              return traces;
            }
          }),
          RepositoryImpl: Kotlin.createClass(classes.c8, classes.c15, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_url = '';
              this.$_units_java_cache = null;
              this.$_units = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__url: function () {
              return this.$_url;
            },
            set__url: function (tmp$0) {
              this.$_url = tmp$0;
            },
            get__units_java_cache: function () {
              return this.$_units_java_cache;
            },
            set__units_java_cache: function (tmp$0) {
              this.$_units_java_cache = tmp$0;
            },
            get__units: function () {
              return this.$_units;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0;
              (tmp$0 = this.get__units()) != null ? tmp$0.clear() : null;
              this.set__units_java_cache(null);
            },
            getUrl: function () {
              return this.get__url();
            },
            setUrl: function (urlP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__url(urlP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getUnits: function () {
              return _.kotlin.toList_1(this.get__units().values());
            },
            setUnits: function (unitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (unitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__units_java_cache(null);
              if (!Kotlin.equals(this.get__units(), unitsP)) {
                this.get__units().clear();
                {
                  var tmp$0 = unitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__units().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addUnits: function (unitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__units_java_cache(null);
              var _key_ = unitsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__units().put(_key_, unitsP);
            },
            addAllUnits: function (unitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__units_java_cache(null);
              {
                var tmp$0 = unitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__units().put(_key_, el);
                }
              }
            },
            removeUnits: function (unitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__units_java_cache(null);
              if (this.get__units().size() !== 0 && this.get__units().containsKey(unitsP.internalGetKey())) {
                this.get__units().remove(unitsP.internalGetKey());
              }
            },
            removeAllUnits: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__units_java_cache(null);
              this.get__units().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createRepository();
              selfObjectClone.setUrl(this.getUrl());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained units from Repository : ' + this.getUnits());
                    }
                    clonedSelfObject.addUnits(interObj);
                  }
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_url()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setUrl(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_units()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__units().size() !== 0 && this.get__units().containsKey(value)) {
                    var obj = this.get__units().get(value);
                    this.get__units().put(obj.internalGetKey(), obj);
                    this.get__units().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getUrl();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findUnitsByID: function (key) {
              return this.get__units().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = _.org.kevoree.util.Constants.get_Ref_units();
              var optionalDetected = firstSepIndex !== 5;
              if (optionalDetected) {
                extraReadChar = extraReadChar - 2;
              }
              if (_.js.indexOf(query, '{') === 0) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                if (optionalDetected) {
                  if (_.js.indexOf(query, '/') !== -1) {
                    queryID = query.substring(0, _.js.indexOf(query, '/'));
                  }
                   else {
                    queryID = query.substring(0, _.js.get_size(query));
                  }
                }
                 else {
                  queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
                }
              }
              var tmp$0, tmp$1;
              tmp$0 = query;
              if (optionalDetected) {
                tmp$1 = 0;
              }
               else {
                tmp$1 = _.js.get_size(relationName);
              }
              var subquery = tmp$0.substring(tmp$1 + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$2;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_units()) {
                var objFound = this.findUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$2 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$2 = objFound;
                }
              }
               else {
                tmp$2 = null;
              }
              return tmp$2;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.Repository) || !Kotlin.isType(similarObj, _.org.kevoree.impl.RepositoryImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getUrl(), similarObjCasted.getUrl())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.Repository';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.Repository) || Kotlin.isType(similarObj, _.org.kevoree.impl.RepositoryImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getUrl();
              var tmp$0, tmp$10;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getUrl() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_url(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_url(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$3 = this.getUnits().iterator();
                while (tmp$3.hasNext()) {
                  var elem = tmp$3.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$4;
                    ((tmp$4 = hashLoop) != null ? tmp$4 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$5;
                {
                  var tmp$6 = ((tmp$5 = similarObjCasted) != null ? tmp$5 : Kotlin.throwNPE()).getUnits().iterator();
                  while (tmp$6.hasNext()) {
                    var elem_0 = tmp$6.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$7;
                      if (((tmp$7 = hashLoop) != null ? tmp$7 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$8;
                          ((tmp$8 = hashResult) != null ? tmp$8 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$9;
                          ((tmp$9 = hashResult) != null ? tmp$9 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$10 = hashResult) != null ? tmp$10 : Kotlin.throwNPE()) !== 0) {
                var tmp$11, tmp$12;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_units(), _.kotlin.toList_1((tmp$12 = hashResult) != null ? tmp$12 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          }),
          NetworkPropertyImpl: Kotlin.createClass(classes.c8, classes.c1d, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_value = '';
              this.$_lastCheck = '';
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__value: function () {
              return this.$_value;
            },
            set__value: function (tmp$0) {
              this.$_value = tmp$0;
            },
            get__lastCheck: function () {
              return this.$_lastCheck;
            },
            set__lastCheck: function (tmp$0) {
              this.$_lastCheck = tmp$0;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              this.setInternalReadOnly();
            },
            delete: function () {
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getValue: function () {
              return this.get__value();
            },
            setValue: function (valueP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__value(valueP);
            },
            getLastCheck: function () {
              return this.get__lastCheck();
            },
            setLastCheck: function (lastCheckP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__lastCheck(lastCheckP);
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createNetworkProperty();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setValue(this.getValue());
              selfObjectClone.setLastCheck(this.getLastCheck());
              subResult.put(this, selfObjectClone);
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_value()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setValue(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_lastCheck()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setLastCheck(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findByPath: function (query) {
              return null;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.NetworkProperty) || !Kotlin.isType(similarObj, _.org.kevoree.impl.NetworkPropertyImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getValue(), similarObjCasted.getValue())) {
                return false;
              }
              if (!Kotlin.equals(this.getLastCheck(), similarObjCasted.getLastCheck())) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(0);
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.NetworkProperty';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.NetworkProperty) || Kotlin.isType(similarObj, _.org.kevoree.impl.NetworkPropertyImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getValue();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getValue() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_value(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_value(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getLastCheck();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getLastCheck() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lastCheck(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_lastCheck(), null, attVal2.toString(), null));
                }
              }
              return traces;
            }
          }),
          ServicePortTypeImpl: Kotlin.createClass(classes.c8, classes.c17, {
            initialize: function () {
              this.$internal_eContainer = null;
              this.$internal_containmentRefName = null;
              this.$internal_unsetCmd = null;
              this.$internal_readOnlyElem = false;
              this.$internal_recursive_readOnlyElem = false;
              this.$_name = '';
              this.$_factoryBean = '';
              this.$_bean = '';
              this.$_abstract = false;
              this.$_synchrone = false;
              this.$_interface = '';
              this.$_deployUnits_java_cache = null;
              this.$_deployUnits = new Kotlin.ComplexHashMap(0);
              this.$_dictionaryType = null;
              this.$_superTypes_java_cache = null;
              this.$_superTypes = new Kotlin.ComplexHashMap(0);
              this.$_operations_java_cache = null;
              this.$_operations = new Kotlin.ComplexHashMap(0);
            },
            get_internal_eContainer: function () {
              return this.$internal_eContainer;
            },
            set_internal_eContainer: function (tmp$0) {
              this.$internal_eContainer = tmp$0;
            },
            get_internal_containmentRefName: function () {
              return this.$internal_containmentRefName;
            },
            set_internal_containmentRefName: function (tmp$0) {
              this.$internal_containmentRefName = tmp$0;
            },
            get_internal_unsetCmd: function () {
              return this.$internal_unsetCmd;
            },
            set_internal_unsetCmd: function (tmp$0) {
              this.$internal_unsetCmd = tmp$0;
            },
            get_internal_readOnlyElem: function () {
              return this.$internal_readOnlyElem;
            },
            set_internal_readOnlyElem: function (tmp$0) {
              this.$internal_readOnlyElem = tmp$0;
            },
            get_internal_recursive_readOnlyElem: function () {
              return this.$internal_recursive_readOnlyElem;
            },
            set_internal_recursive_readOnlyElem: function (tmp$0) {
              this.$internal_recursive_readOnlyElem = tmp$0;
            },
            get__name: function () {
              return this.$_name;
            },
            set__name: function (tmp$0) {
              this.$_name = tmp$0;
            },
            get__factoryBean: function () {
              return this.$_factoryBean;
            },
            set__factoryBean: function (tmp$0) {
              this.$_factoryBean = tmp$0;
            },
            get__bean: function () {
              return this.$_bean;
            },
            set__bean: function (tmp$0) {
              this.$_bean = tmp$0;
            },
            get__abstract: function () {
              return this.$_abstract;
            },
            set__abstract: function (tmp$0) {
              this.$_abstract = tmp$0;
            },
            get__synchrone: function () {
              return this.$_synchrone;
            },
            set__synchrone: function (tmp$0) {
              this.$_synchrone = tmp$0;
            },
            get__interface: function () {
              return this.$_interface;
            },
            set__interface: function (tmp$0) {
              this.$_interface = tmp$0;
            },
            get__deployUnits_java_cache: function () {
              return this.$_deployUnits_java_cache;
            },
            set__deployUnits_java_cache: function (tmp$0) {
              this.$_deployUnits_java_cache = tmp$0;
            },
            get__deployUnits: function () {
              return this.$_deployUnits;
            },
            get__dictionaryType: function () {
              return this.$_dictionaryType;
            },
            set__dictionaryType: function (tmp$0) {
              this.$_dictionaryType = tmp$0;
            },
            get__superTypes_java_cache: function () {
              return this.$_superTypes_java_cache;
            },
            set__superTypes_java_cache: function (tmp$0) {
              this.$_superTypes_java_cache = tmp$0;
            },
            get__superTypes: function () {
              return this.$_superTypes;
            },
            get__operations_java_cache: function () {
              return this.$_operations_java_cache;
            },
            set__operations_java_cache: function (tmp$0) {
              this.$_operations_java_cache = tmp$0;
            },
            get__operations: function () {
              return this.$_operations;
            },
            setRecursiveReadOnly: function () {
              if (Kotlin.equals(this.get_internal_recursive_readOnlyElem(), true)) {
                return;
              }
              this.set_internal_recursive_readOnlyElem(true);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.setRecursiveReadOnly();
                }
              }
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.setRecursiveReadOnly();
              }
              {
                var tmp$1 = this.getSuperTypes().iterator();
                while (tmp$1.hasNext()) {
                  var sub_0 = tmp$1.next();
                  sub_0.setRecursiveReadOnly();
                }
              }
              {
                var tmp$2 = this.getOperations().iterator();
                while (tmp$2.hasNext()) {
                  var sub_1 = tmp$2.next();
                  sub_1.setRecursiveReadOnly();
                }
              }
              this.setInternalReadOnly();
            },
            delete: function () {
              var tmp$0, tmp$2;
              (tmp$0 = this.get__dictionaryType()) != null ? tmp$0.delete() : null;
              {
                var tmp$1 = _.kotlin.iterator(this.get__operations());
                while (tmp$1.hasNext()) {
                  var el = tmp$1.next();
                  _.kotlin.get_value(el).delete();
                }
              }
              (tmp$2 = this.get__operations()) != null ? tmp$2.clear() : null;
              this.set__operations_java_cache(null);
            },
            getName: function () {
              return this.get__name();
            },
            setName: function (nameP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              var oldId = this.internalGetKey();
              var previousParent = this.eContainer();
              var previousRefNameInParent = this.getRefInParent();
              this.set__name(nameP);
              if (previousParent != null) {
                var tmp$0;
                previousParent.reflexiveMutator(_.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX(), (tmp$0 = previousRefNameInParent) != null ? tmp$0 : Kotlin.throwNPE(), oldId);
              }
            },
            getFactoryBean: function () {
              return this.get__factoryBean();
            },
            setFactoryBean: function (factoryBeanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__factoryBean(factoryBeanP);
            },
            getBean: function () {
              return this.get__bean();
            },
            setBean: function (beanP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__bean(beanP);
            },
            getAbstract: function () {
              return this.get__abstract();
            },
            setAbstract: function (abstractP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__abstract(abstractP);
            },
            getSynchrone: function () {
              return this.get__synchrone();
            },
            setSynchrone: function (synchroneP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__synchrone(synchroneP);
            },
            getInterface: function () {
              return this.get__interface();
            },
            setInterface: function (interfaceP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var oldPath = this.path();
              this.set__interface(interfaceP);
            },
            getDeployUnits: function () {
              return _.kotlin.toList_1(this.get__deployUnits().values());
            },
            setDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (deployUnitsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (!Kotlin.equals(this.get__deployUnits(), deployUnitsP)) {
                this.get__deployUnits().clear();
                {
                  var tmp$0 = deployUnitsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__deployUnits().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              var _key_ = deployUnitsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__deployUnits().put(_key_, deployUnitsP);
            },
            addAllDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              {
                var tmp$0 = deployUnitsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__deployUnits().put(_key_, el);
                }
              }
            },
            removeDeployUnits: function (deployUnitsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__deployUnits_java_cache(null);
              if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(deployUnitsP.internalGetKey())) {
                this.get__deployUnits().remove(deployUnitsP.internalGetKey());
              }
            },
            removeAllDeployUnits: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getDeployUnits()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__deployUnits_java_cache(null);
              this.get__deployUnits().clear();
            },
            getDictionaryType: function () {
              return this.get__dictionaryType();
            },
            setDictionaryType: function (dictionaryTypeP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (!Kotlin.equals(this.get__dictionaryType(), dictionaryTypeP)) {
                if (this.get__dictionaryType() != null) {
                  var tmp$0;
                  ((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
                }
                if (dictionaryTypeP != null) {
                  dictionaryTypeP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_SET(), 'dictionaryType', null), 'dictionaryType');
                }
                this.set__dictionaryType(dictionaryTypeP);
              }
            },
            getSuperTypes: function () {
              return _.kotlin.toList_1(this.get__superTypes().values());
            },
            setSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (superTypesP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (!Kotlin.equals(this.get__superTypes(), superTypesP)) {
                this.get__superTypes().clear();
                {
                  var tmp$0 = superTypesP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__superTypes().put(el.internalGetKey(), el);
                  }
                }
              }
            },
            addSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              var _key_ = superTypesP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__superTypes().put(_key_, superTypesP);
            },
            addAllSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              {
                var tmp$0 = superTypesP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__superTypes().put(_key_, el);
                }
              }
            },
            removeSuperTypes: function (superTypesP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__superTypes_java_cache(null);
              if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(superTypesP.internalGetKey())) {
                this.get__superTypes().remove(superTypesP.internalGetKey());
              }
            },
            removeAllSuperTypes: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0;
              var temp_els = (tmp$0 = this.getSuperTypes()) != null ? tmp$0 : Kotlin.throwNPE();
              this.set__superTypes_java_cache(null);
              this.get__superTypes().clear();
            },
            getOperations: function () {
              return _.kotlin.toList_1(this.get__operations().values());
            },
            setOperations: function (operationsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              if (operationsP == null) {
                throw new Kotlin.IllegalArgumentException(_.org.kevoree.util.Constants.get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION());
              }
              this.set__operations_java_cache(null);
              if (!Kotlin.equals(this.get__operations(), operationsP)) {
                this.get__operations().clear();
                {
                  var tmp$0 = operationsP.iterator();
                  while (tmp$0.hasNext()) {
                    var el = tmp$0.next();
                    this.get__operations().put(el.internalGetKey(), el);
                  }
                }
                {
                  var tmp$1 = operationsP.iterator();
                  while (tmp$1.hasNext()) {
                    var elem = tmp$1.next();
                    elem.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'operations', elem), 'operations');
                  }
                }
              }
            },
            addOperations: function (operationsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__operations_java_cache(null);
              operationsP.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'operations', operationsP), 'operations');
              var _key_ = operationsP.internalGetKey();
              if (Kotlin.equals(_key_, '') || _key_ == null) {
                throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
              }
              this.get__operations().put(_key_, operationsP);
            },
            addAllOperations: function (operationsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__operations_java_cache(null);
              {
                var tmp$0 = operationsP.iterator();
                while (tmp$0.hasNext()) {
                  var el = tmp$0.next();
                  var _key_ = el.internalGetKey();
                  if (Kotlin.equals(_key_, '') || _key_ == null) {
                    throw new Kotlin.Exception('Key empty : set the attribute key before adding the object');
                  }
                  this.get__operations().put(_key_, el);
                }
              }
              {
                var tmp$1 = operationsP.iterator();
                while (tmp$1.hasNext()) {
                  var el_0 = tmp$1.next();
                  el_0.setEContainer(this, new _.org.kevoree.container.RemoveFromContainerCommand(this, _.org.kevoree.modeling.api.util.ActionType.get_REMOVE(), 'operations', el_0), 'operations');
                }
              }
            },
            removeOperations: function (operationsP) {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              this.set__operations_java_cache(null);
              if (this.get__operations().size() !== 0 && this.get__operations().containsKey(operationsP.internalGetKey())) {
                this.get__operations().remove(operationsP.internalGetKey());
                var tmp$0;
                ((tmp$0 = operationsP) != null ? tmp$0 : Kotlin.throwNPE()).setEContainer(null, null, null);
              }
            },
            removeAllOperations: function () {
              if (this.isReadOnly()) {
                throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_READ_ONLY_EXCEPTION());
              }
              var tmp$0, tmp$1;
              var temp_els = (tmp$0 = this.getOperations()) != null ? tmp$0 : Kotlin.throwNPE();
              {
                var tmp$2 = ((tmp$1 = temp_els) != null ? tmp$1 : Kotlin.throwNPE()).iterator();
                while (tmp$2.hasNext()) {
                  var el = tmp$2.next();
                  el.setEContainer(null, null, null);
                }
              }
              this.set__operations_java_cache(null);
              this.get__operations().clear();
            },
            getClonelazy: function (subResult, _factories, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return;
              }
              var selfObjectClone = _factories.getKevoreeFactory().createServicePortType();
              selfObjectClone.setName(this.getName());
              selfObjectClone.setFactoryBean(this.getFactoryBean());
              selfObjectClone.setBean(this.getBean());
              selfObjectClone.setAbstract(this.getAbstract());
              selfObjectClone.setSynchrone(this.getSynchrone());
              selfObjectClone.setInterface(this.getInterface());
              subResult.put(this, selfObjectClone);
              var subsubsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubsubdictionaryType != null) {
                subsubsubsubdictionaryType.getClonelazy(subResult, _factories, mutableOnly);
              }
              {
                var tmp$0 = this.getOperations().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  sub.getClonelazy(subResult, _factories, mutableOnly);
                }
              }
            },
            resolve: function (addrs, readOnly, mutableOnly) {
              if (mutableOnly && this.isRecursiveReadOnly()) {
                return this;
              }
              var clonedSelfObject = addrs.get(this);
              {
                var tmp$0 = this.getDeployUnits().iterator();
                while (tmp$0.hasNext()) {
                  var sub = tmp$0.next();
                  if (mutableOnly && sub.isRecursiveReadOnly()) {
                    clonedSelfObject.addDeployUnits(sub);
                  }
                   else {
                    var interObj = addrs.get(sub);
                    if (interObj == null) {
                      throw new Kotlin.Exception('Non contained deployUnits from ServicePortType : ' + this.getDeployUnits());
                    }
                    clonedSelfObject.addDeployUnits(interObj);
                  }
                }
              }
              if (this.getDictionaryType() != null) {
                var tmp$1;
                if (mutableOnly && ((tmp$1 = this.getDictionaryType()) != null ? tmp$1 : Kotlin.throwNPE()).isRecursiveReadOnly()) {
                  var tmp$2;
                  clonedSelfObject.setDictionaryType((tmp$2 = this.getDictionaryType()) != null ? tmp$2 : Kotlin.throwNPE());
                }
                 else {
                  var interObj_0 = addrs.get(this.getDictionaryType());
                  if (interObj_0 == null) {
                    throw new Kotlin.Exception('Non contained dictionaryType from ServicePortType : ' + this.getDictionaryType());
                  }
                  clonedSelfObject.setDictionaryType(interObj_0);
                }
              }
              {
                var tmp$3 = this.getSuperTypes().iterator();
                while (tmp$3.hasNext()) {
                  var sub_0 = tmp$3.next();
                  if (mutableOnly && sub_0.isRecursiveReadOnly()) {
                    clonedSelfObject.addSuperTypes(sub_0);
                  }
                   else {
                    var interObj_1 = addrs.get(sub_0);
                    if (interObj_1 == null) {
                      throw new Kotlin.Exception('Non contained superTypes from ServicePortType : ' + this.getSuperTypes());
                    }
                    clonedSelfObject.addSuperTypes(interObj_1);
                  }
                }
              }
              {
                var tmp$4 = this.getOperations().iterator();
                while (tmp$4.hasNext()) {
                  var sub_1 = tmp$4.next();
                  if (mutableOnly && sub_1.isRecursiveReadOnly()) {
                    clonedSelfObject.addOperations(sub_1);
                  }
                   else {
                    var interObj_2 = addrs.get(sub_1);
                    if (interObj_2 == null) {
                      throw new Kotlin.Exception('Non contained operations from ServicePortType : ' + this.getOperations());
                    }
                    clonedSelfObject.addOperations(interObj_2);
                  }
                }
              }
              var subsubsubdictionaryType = this.getDictionaryType();
              if (subsubsubdictionaryType != null) {
                subsubsubdictionaryType.resolve(addrs, readOnly, mutableOnly);
              }
              {
                var tmp$5 = this.getOperations().iterator();
                while (tmp$5.hasNext()) {
                  var sub_2 = tmp$5.next();
                  sub_2.resolve(addrs, readOnly, mutableOnly);
                }
              }
              if (readOnly) {
                clonedSelfObject.setInternalReadOnly();
              }
              return clonedSelfObject;
            },
            reflexiveMutator: function (mutationType, refName, value) {
              if (refName === _.org.kevoree.util.Constants.get_Att_name()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setName(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_factoryBean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setFactoryBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_bean()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setBean(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_abstract()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setAbstract(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_synchrone()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setSynchrone(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Att_interface()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setInterface(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeDeployUnits(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllDeployUnits();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__deployUnits().size() !== 0 && this.get__deployUnits().containsKey(value)) {
                    var obj = this.get__deployUnits().get(value);
                    this.get__deployUnits().put(obj.internalGetKey(), obj);
                    this.get__deployUnits().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  this.setDictionaryType(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.setDictionaryType(null);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.setDictionaryType(value);
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeSuperTypes(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllSuperTypes();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__superTypes().size() !== 0 && this.get__superTypes().containsKey(value)) {
                    var obj_0 = this.get__superTypes().get(value);
                    this.get__superTypes().put(obj_0.internalGetKey(), obj_0);
                    this.get__superTypes().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else if (refName === _.org.kevoree.util.Constants.get_Ref_operations()) {
                if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  this.addOperations(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  this.addAllOperations(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  this.removeOperations(value);
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  this.removeAllOperations();
                }
                 else if (mutationType === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                  if (this.get__operations().size() !== 0 && this.get__operations().containsKey(value)) {
                    var obj_1 = this.get__operations().get(value);
                    this.get__operations().put(obj_1.internalGetKey(), obj_1);
                    this.get__operations().remove(value);
                  }
                }
                 else {
                  throw new Kotlin.Exception(_.org.kevoree.util.Constants.get_UNKNOWN_MUTATION_TYPE_EXCEPTION() + mutationType);
                }
              }
               else {
                throw new Kotlin.Exception('Can reflexively ' + mutationType + ' for ' + refName + ' on ' + this);
              }
            },
            internalGetKey: function () {
              return this.getName();
            },
            path: function () {
              var container = this.eContainer();
              if (container != null) {
                var parentPath = container.path();
                if (parentPath == null) {
                  return null;
                }
                 else {
                  var tmp$0;
                  if (Kotlin.equals(parentPath, '')) {
                    tmp$0 = '';
                  }
                   else {
                    tmp$0 = parentPath + '/';
                  }
                  return tmp$0 + this.get_internal_containmentRefName() + '[' + this.internalGetKey() + ']';
                }
              }
               else {
                return '';
              }
            },
            findDeployUnitsByID: function (key) {
              return this.get__deployUnits().get(key);
            },
            findSuperTypesByID: function (key) {
              return this.get__superTypes().get(key);
            },
            findOperationsByID: function (key) {
              return this.get__operations().get(key);
            },
            findByPath: function (query) {
              var firstSepIndex = _.js.indexOf(query, '[');
              var queryID = '';
              var extraReadChar = 2;
              var relationName = query.substring(0, _.js.indexOf(query, '['));
              if (_.js.indexOf(query, '{') === firstSepIndex + 1) {
                queryID = query.substring(_.js.indexOf(query, '{') + 1, _.js.indexOf(query, '}'));
                extraReadChar = extraReadChar + 2;
              }
               else {
                queryID = query.substring(_.js.indexOf(query, '[') + 1, _.js.indexOf(query, ']'));
              }
              var subquery = query.substring(_.js.get_size(relationName) + _.js.get_size(queryID) + extraReadChar, _.js.get_size(query));
              if (_.js.indexOf(subquery, '/') !== -1) {
                subquery = subquery.substring(_.js.indexOf(subquery, '/') + 1, _.js.get_size(subquery));
              }
              var tmp$0;
              if (relationName === _.org.kevoree.util.Constants.get_Ref_deployUnits()) {
                var objFound = this.findDeployUnitsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound != null) {
                  tmp$0 = objFound.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_dictionaryType()) {
                if (!Kotlin.equals(subquery, '')) {
                  var obj = this.getDictionaryType();
                  var tmp$1;
                  tmp$0 = (tmp$1 = obj) != null ? tmp$1.findByPath(subquery) : null;
                }
                 else {
                  tmp$0 = this.getDictionaryType();
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_superTypes()) {
                var objFound_0 = this.findSuperTypesByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_0 != null) {
                  tmp$0 = objFound_0.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_0;
                }
              }
               else if (relationName === _.org.kevoree.util.Constants.get_Ref_operations()) {
                var objFound_1 = this.findOperationsByID(queryID);
                if (!Kotlin.equals(subquery, '') && objFound_1 != null) {
                  tmp$0 = objFound_1.findByPath(subquery);
                }
                 else {
                  tmp$0 = objFound_1;
                }
              }
               else {
                tmp$0 = null;
              }
              return tmp$0;
            },
            deepModelEquals: function (similarObj) {
              if (!this.modelEquals(similarObj)) {
                return false;
              }
              var similarObjCasted = similarObj;
              {
                var tmp$0 = this.getOperations().iterator();
                while (tmp$0.hasNext()) {
                  var subElement = tmp$0.next();
                  var foundedElement = similarObjCasted.findOperationsByID(subElement.getName());
                  if (foundedElement == null || !Kotlin.equals(foundedElement, subElement)) {
                    return false;
                  }
                }
              }
              return true;
            },
            modelEquals: function (similarObj) {
              if (similarObj == null || !Kotlin.isType(similarObj, _.org.kevoree.ServicePortType) || !Kotlin.isType(similarObj, _.org.kevoree.impl.ServicePortTypeImpl)) {
                return false;
              }
              var similarObjCasted = similarObj;
              if (!Kotlin.equals(this.getName(), similarObjCasted.getName())) {
                return false;
              }
              if (!Kotlin.equals(this.getFactoryBean(), similarObjCasted.getFactoryBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getBean(), similarObjCasted.getBean())) {
                return false;
              }
              if (!Kotlin.equals(this.getAbstract(), similarObjCasted.getAbstract())) {
                return false;
              }
              if (!Kotlin.equals(this.getSynchrone(), similarObjCasted.getSynchrone())) {
                return false;
              }
              if (!Kotlin.equals(this.getInterface(), similarObjCasted.getInterface())) {
                return false;
              }
              if (!Kotlin.equals(this.getDictionaryType(), similarObjCasted.getDictionaryType())) {
                return false;
              }
              if (this.getOperations().size() !== similarObjCasted.getOperations().size()) {
                return false;
              }
              return true;
            },
            containedElementsList: function () {
              var result = new Kotlin.ArrayList(2);
              if (this.get__dictionaryType() != null) {
                var tmp$0;
                result.add((tmp$0 = this.get__dictionaryType()) != null ? tmp$0 : Kotlin.throwNPE());
              }
              result.addAll(this.get__operations().values());
              return result;
            },
            metaClassName: function () {
              return 'org.kevoree.ServicePortType';
            },
            generateDiffTraces: function (similarObj, inter) {
              var similarObjCasted = null;
              if (similarObj != null && (Kotlin.isType(similarObj, _.org.kevoree.ServicePortType) || Kotlin.isType(similarObj, _.org.kevoree.impl.ServicePortTypeImpl))) {
                similarObjCasted = similarObj;
              }
              var traces = new Kotlin.ArrayList(0);
              var attVal = null;
              var attVal2 = null;
              var attVal2String = null;
              var hashLoop = null;
              var hashResult = null;
              attVal = this.getName();
              var tmp$0, tmp$3, tmp$6, tmp$9, tmp$12, tmp$15, tmp$25, tmp$35;
              attVal2 = (tmp$0 = similarObjCasted) != null ? tmp$0.getName() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$1;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$1 = this.path()) != null ? tmp$1 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$2;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$2 = this.path()) != null ? tmp$2 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_name(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getFactoryBean();
              attVal2 = (tmp$3 = similarObjCasted) != null ? tmp$3.getFactoryBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$4;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$4 = this.path()) != null ? tmp$4 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$5;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$5 = this.path()) != null ? tmp$5 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_factoryBean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getBean();
              attVal2 = (tmp$6 = similarObjCasted) != null ? tmp$6.getBean() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$7;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$7 = this.path()) != null ? tmp$7 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$8;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$8 = this.path()) != null ? tmp$8 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_bean(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getAbstract();
              attVal2 = (tmp$9 = similarObjCasted) != null ? tmp$9.getAbstract() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$10;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$10 = this.path()) != null ? tmp$10 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$11;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$11 = this.path()) != null ? tmp$11 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_abstract(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getSynchrone();
              attVal2 = (tmp$12 = similarObjCasted) != null ? tmp$12.getSynchrone() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$13;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$13 = this.path()) != null ? tmp$13 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_synchrone(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$14;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$14 = this.path()) != null ? tmp$14 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_synchrone(), null, attVal2.toString(), null));
                }
              }
              attVal = this.getInterface();
              attVal2 = (tmp$15 = similarObjCasted) != null ? tmp$15.getInterface() : null;
              if (!Kotlin.equals(attVal, attVal2)) {
                if (!inter) {
                  var tmp$16;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$16 = this.path()) != null ? tmp$16 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_interface(), null, attVal2.toString(), null));
                }
              }
               else {
                if (inter) {
                  var tmp$17;
                  traces.add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$17 = this.path()) != null ? tmp$17 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Att_interface(), null, attVal2.toString(), null));
                }
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$18 = this.getDeployUnits().iterator();
                while (tmp$18.hasNext()) {
                  var elem = tmp$18.next();
                  var elemPath = elem.path();
                  if (elemPath != null) {
                    var tmp$19;
                    ((tmp$19 = hashLoop) != null ? tmp$19 : Kotlin.throwNPE()).add(elemPath);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$20;
                {
                  var tmp$21 = ((tmp$20 = similarObjCasted) != null ? tmp$20 : Kotlin.throwNPE()).getDeployUnits().iterator();
                  while (tmp$21.hasNext()) {
                    var elem_0 = tmp$21.next();
                    var elemPath_0 = elem_0.path();
                    if (elemPath_0 != null) {
                      var tmp$22;
                      if (((tmp$22 = hashLoop) != null ? tmp$22 : Kotlin.throwNPE()).contains(elemPath_0)) {
                        if (inter) {
                          var tmp$23;
                          ((tmp$23 = hashResult) != null ? tmp$23 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$24;
                          ((tmp$24 = hashResult) != null ? tmp$24 : Kotlin.throwNPE()).add(elemPath_0);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$25 = hashResult) != null ? tmp$25 : Kotlin.throwNPE()) !== 0) {
                var tmp$26, tmp$27;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$26 = this.path()) != null ? tmp$26 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_deployUnits(), _.kotlin.toList_1((tmp$27 = hashResult) != null ? tmp$27 : Kotlin.throwNPE()), null));
              }
              hashLoop = new Kotlin.PrimitiveHashSet();
              hashResult = new Kotlin.PrimitiveHashSet();
              {
                var tmp$28 = this.getSuperTypes().iterator();
                while (tmp$28.hasNext()) {
                  var elem_1 = tmp$28.next();
                  var elemPath_1 = elem_1.path();
                  if (elemPath_1 != null) {
                    var tmp$29;
                    ((tmp$29 = hashLoop) != null ? tmp$29 : Kotlin.throwNPE()).add(elemPath_1);
                  }
                }
              }
              if (similarObjCasted != null) {
                var tmp$30;
                {
                  var tmp$31 = ((tmp$30 = similarObjCasted) != null ? tmp$30 : Kotlin.throwNPE()).getSuperTypes().iterator();
                  while (tmp$31.hasNext()) {
                    var elem_2 = tmp$31.next();
                    var elemPath_2 = elem_2.path();
                    if (elemPath_2 != null) {
                      var tmp$32;
                      if (((tmp$32 = hashLoop) != null ? tmp$32 : Kotlin.throwNPE()).contains(elemPath_2)) {
                        if (inter) {
                          var tmp$33;
                          ((tmp$33 = hashResult) != null ? tmp$33 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                       else {
                        if (!inter) {
                          var tmp$34;
                          ((tmp$34 = hashResult) != null ? tmp$34 : Kotlin.throwNPE()).add(elemPath_2);
                        }
                      }
                    }
                  }
                }
              }
              if (_.kotlin.get_size_0((tmp$35 = hashResult) != null ? tmp$35 : Kotlin.throwNPE()) !== 0) {
                var tmp$36, tmp$37;
                traces.add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$36 = this.path()) != null ? tmp$36 : Kotlin.throwNPE(), _.org.kevoree.util.Constants.get_Ref_superTypes(), _.kotlin.toList_1((tmp$37 = hashResult) != null ? tmp$37 : Kotlin.throwNPE()), null));
              }
              return traces;
            }
          })
        }),
        trace: Kotlin.definePackage({
          DefaultTraceSequence: Kotlin.createClass(classes.co, {
            initialize: function () {
              this.$traces = new Kotlin.ArrayList(0);
            },
            get_traces: function () {
              return this.$traces;
            },
            set_traces: function (tmp$0) {
              this.$traces = tmp$0;
            },
            getTraces: function () {
              return this.get_traces();
            },
            populate: function (addtraces) {
              this.get_traces().addAll(addtraces);
              return this;
            },
            populateFromString: function (addtracesTxt) {
              var bytes = Kotlin.numberArrayOfSize(addtracesTxt.length);
              var i = 0;
              while (i < addtracesTxt.length) {
                bytes[i] = addtracesTxt.charAt(i);
                i = i + 1;
              }
              return this.populateFromStream(new _.java.io.ByteArrayInputStream(bytes));
            },
            populateFromStream: function (inputStream) {
              var parser = new _.org.kevoree.loader.JsonReader(inputStream);
              parser.beginArray();
              var keys = new Kotlin.PrimitiveHashMap(0);
              while (parser.hasNext() && parser.peek() !== parser.get_PEEKED_END_ARRAY()) {
                parser.beginObject();
                keys.clear();
                parser.nextName();
                var value = parser.nextInt();
                while (parser.hasNext() && parser.peek() !== parser.get_PEEKED_END_OBJECT()) {
                  keys.put(parser.nextName(), parser.nextString());
                }
                parser.endObject();
                if (value === _.org.kevoree.modeling.api.util.ActionType.get_SET()) {
                  var tmp$0, tmp$1;
                  this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelSetTrace((tmp$0 = keys.get('src')) != null ? tmp$0 : Kotlin.throwNPE(), (tmp$1 = keys.get('refname')) != null ? tmp$1 : Kotlin.throwNPE(), keys.get('objpath'), keys.get('content'), keys.get('typename')));
                }
                 else if (value === _.org.kevoree.modeling.api.util.ActionType.get_ADD()) {
                  var tmp$2, tmp$3, tmp$4;
                  this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelAddTrace((tmp$2 = keys.get('src')) != null ? tmp$2 : Kotlin.throwNPE(), (tmp$3 = keys.get('refname')) != null ? tmp$3 : Kotlin.throwNPE(), (tmp$4 = keys.get('previouspath')) != null ? tmp$4 : Kotlin.throwNPE(), keys.get('typename')));
                }
                 else if (value === _.org.kevoree.modeling.api.util.ActionType.get_ADD_ALL()) {
                  var tmp$5, tmp$6, tmp$7, tmp$8, tmp$9, tmp$10;
                  this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelAddAllTrace((tmp$5 = keys.get('src')) != null ? tmp$5 : Kotlin.throwNPE(), (tmp$6 = keys.get('refname')) != null ? tmp$6 : Kotlin.throwNPE(), (tmp$8 = (tmp$7 = keys.get('content')) != null ? Kotlin.splitString(tmp$7, ';') : null) != null ? _.kotlin.toList_0(tmp$8) : null, (tmp$10 = (tmp$9 = keys.get('typename')) != null ? Kotlin.splitString(tmp$9, ';') : null) != null ? _.kotlin.toList_0(tmp$10) : null));
                }
                 else if (value === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE()) {
                  var tmp$11, tmp$12, tmp$13;
                  this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelRemoveTrace((tmp$11 = keys.get('src')) != null ? tmp$11 : Kotlin.throwNPE(), (tmp$12 = keys.get('refname')) != null ? tmp$12 : Kotlin.throwNPE(), (tmp$13 = keys.get('objpath')) != null ? tmp$13 : Kotlin.throwNPE()));
                }
                 else if (value === _.org.kevoree.modeling.api.util.ActionType.get_REMOVE_ALL()) {
                  var tmp$14, tmp$15;
                  this.get_traces().add(new _.org.kevoree.modeling.api.trace.ModelRemoveAllTrace((tmp$14 = keys.get('src')) != null ? tmp$14 : Kotlin.throwNPE(), (tmp$15 = keys.get('refname')) != null ? tmp$15 : Kotlin.throwNPE()));
                }
                 else if (value === _.org.kevoree.modeling.api.util.ActionType.get_RENEW_INDEX()) {
                }
                 else {
                }
              }
              return this;
            },
            exportToString: function () {
              var buffer = new _.java.lang.StringBuilder();
              buffer.append('[');
              var isFirst = true;
              {
                var tmp$0 = this.get_traces().iterator();
                while (tmp$0.hasNext()) {
                  var trace = tmp$0.next();
                  if (!isFirst) {
                    buffer.append(',');
                  }
                  buffer.append(trace.toString());
                  isFirst = false;
                }
              }
              buffer.append(']');
              return buffer.toString();
            },
            applyOn: function (target) {
              var traceApplicator = new _.org.kevoree.modeling.api.trace.ModelTraceApplicator(target, new _.org.kevoree.factory.MainFactory());
              traceApplicator.applyTraceOnModel(this);
              return true;
            }
          })
        })
      }),
      w3c: Kotlin.definePackage({
        dom: Kotlin.definePackage({
          events: Kotlin.definePackage({
            EventListener: classes.c1i
          })
        })
      })
    }),
    java: Kotlin.definePackage({
      lang: Kotlin.definePackage({
        StringBuilder: Kotlin.createClass({
          initialize: function () {
            this.$content = '';
          },
          get_content: function () {
            return this.$content;
          },
          set_content: function (tmp$0) {
            this.$content = tmp$0;
          },
          append: function (sub) {
            this.set_content(this.get_content() + sub);
          },
          append_0: function (sub) {
            this.set_content(this.get_content() + sub);
          },
          toString: function () {
            return this.get_content();
          }
        })
      }),
      io: Kotlin.definePackage({
        InputStream: classes.c1h,
        ByteArrayInputStream: Kotlin.createClass(classes.c1h, {
          initialize: function (inputBytes) {
            this.$inputBytes = inputBytes;
          },
          get_inputBytes: function () {
            return this.$inputBytes;
          },
          readBytes: function () {
            return this.get_inputBytes();
          }
        }),
        OutputStream: Kotlin.createClass({
          initialize: function () {
            this.$result = '';
          },
          flush: function () {
          },
          close: function () {
          },
          get_result: function () {
            return this.$result;
          },
          set_result: function (tmp$0) {
            this.$result = tmp$0;
          }
        }),
        PrintStream: Kotlin.createClass({
          initialize: function (oo) {
            this.$oo = oo;
            this.$result = '';
          },
          get_oo: function () {
            return this.$oo;
          },
          get_result: function () {
            return this.$result;
          },
          set_result: function (tmp$0) {
            this.$result = tmp$0;
          },
          println_1: function () {
            this.set_result(this.get_result() + '\n');
          },
          print: function (s) {
            this.set_result(this.get_result() + s);
          },
          println_0: function (s) {
            this.print(s);
            this.println_1();
          },
          print_0: function (s) {
            this.set_result(this.get_result() + s);
          },
          print_2: function (s) {
            this.set_result(this.get_result() + s);
          },
          print_1: function (s) {
            if (s) {
              this.set_result(this.get_result() + 'true');
            }
             else {
              this.set_result(this.get_result() + 'false');
            }
          },
          println: function (s) {
            this.print_0(s);
            this.println_1();
          },
          flush: function () {
            this.get_oo().set_result(this.get_result());
          },
          close: function () {
          }
        })
      }),
      util: Kotlin.definePackage({
        Collections: Kotlin.definePackage({
        })
      })
    }),
    js: Kotlin.definePackage({
      lastIndexOf: function (receiver, ch, fromIndex) {
        return receiver.lastIndexOf(ch.toString(), fromIndex);
      },
      lastIndexOf_0: function (receiver, ch) {
        return receiver.lastIndexOf(ch.toString());
      },
      indexOf: function (receiver, ch) {
        return receiver.indexOf(ch.toString());
      },
      indexOf_0: function (receiver, ch, fromIndex) {
        return receiver.indexOf(ch.toString(), fromIndex);
      },
      matches: function (receiver, regex) {
        var result = receiver.match(regex);
        return result != null && result.length > 0;
      },
      length: function (receiver) {
        return receiver.length;
      },
      get_size: function (receiver) {
        return receiver.length;
      },
      startsWith_0: function (receiver, ch) {
        return _.js.get_size(receiver) > 0 ? receiver.charAt(0) === ch : false;
      },
      endsWith: function (receiver, ch) {
        var s = _.js.get_size(receiver);
        return s > 0 ? receiver.charAt(s - 1) === ch : false;
      },
      startsWith: function (receiver, text) {
        var size = text.length;
        var tmp$0;
        if (size <= receiver.length) {
          tmp$0 = Kotlin.equals(receiver.substring(0, size), text);
        }
         else
          tmp$0 = false;
        return tmp$0;
      },
      endsWith_0: function (receiver, text) {
        var matchSize = text.length;
        var thisSize = receiver.length;
        var tmp$0;
        if (matchSize <= thisSize) {
          tmp$0 = Kotlin.equals(receiver.substring(thisSize - matchSize, thisSize), text);
        }
         else
          tmp$0 = false;
        return tmp$0;
      },
      capitalize: function (receiver) {
        return _.kotlin.notEmpty(receiver) ? receiver.substring(0, 1).toUpperCase() + receiver.substring(1) : receiver;
      },
      decapitalize: function (receiver) {
        return _.kotlin.notEmpty(receiver) ? receiver.substring(0, 1).toLowerCase() + receiver.substring(1) : receiver;
      }
    }),
    kotlin: Kotlin.definePackage({
      set: function (receiver, key, value) {
        receiver.put(key, value);
      },
      hashMap: function (values) {
        var answer = new Kotlin.ComplexHashMap(0);
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = values, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var v = tmp$0[tmp$2];
            {
              answer.put(v.get_first(), v.get_second());
            }
          }
        }
        return answer;
      },
      Pair: Kotlin.createClass({
        initialize: function (first, second) {
          this.$first = first;
          this.$second = second;
        },
        get_first: function () {
          return this.$first;
        },
        get_second: function () {
          return this.$second;
        },
        component1: function () {
          return this.get_first();
        },
        component2: function () {
          return this.get_second();
        },
        toString: function () {
          return '(' + this.get_first().toString() + ', ' + this.get_second().toString() + ')';
        }
      }),
      Triple: Kotlin.createClass({
        initialize: function (first, second, third) {
          this.$first = first;
          this.$second = second;
          this.$third = third;
        },
        get_first: function () {
          return this.$first;
        },
        get_second: function () {
          return this.$second;
        },
        get_third: function () {
          return this.$third;
        },
        component1: function () {
          return this.get_first();
        },
        component2: function () {
          return this.get_second();
        },
        component3: function () {
          return this.get_third();
        },
        toString: function () {
          return '(' + this.get_first().toString() + ', ' + this.get_second().toString() + ', ' + this.get_third().toString() + ')';
        }
      }),
      toString: function (receiver) {
        return _.kotlin.makeString(receiver, ', ', '[', ']', -1, '...');
      },
      equals: function (receiver, that) {
        var s1 = receiver.size();
        var s2 = that.size();
        if (s1 === s2) {
          var tmp$0, tmp$1, tmp$2, tmp$3;
          {
            tmp$0 = new Kotlin.NumberRange(0, s1), tmp$1 = tmp$0.get_start(), tmp$2 = tmp$0.get_end(), tmp$3 = tmp$0.get_increment();
            for (var i = tmp$1; i <= tmp$2; i += tmp$3) {
              var elem1 = receiver.get(i);
              var elem2 = that.get(i);
              if (!Kotlin.equals(elem1, elem2)) {
                return false;
              }
            }
          }
          return true;
        }
        return false;
      },
      arrayList: function (values) {
        var list = new Kotlin.ArrayList(0);
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = values, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var value = tmp$0[tmp$2];
            {
              list.add(value);
            }
          }
        }
        return list;
      },
      hashSet: function (values) {
        var list = new Kotlin.ComplexHashSet();
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = values, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var value = tmp$0[tmp$2];
            {
              list.add(value);
            }
          }
        }
        return list;
      },
      map: function (receiver, transform) {
        return _.kotlin.mapTo(receiver, new Kotlin.ArrayList(0), transform);
      },
      mapValues: function (receiver, transform) {
        return _.kotlin.mapValuesTo(receiver, new Kotlin.ComplexHashMap(0), transform);
      },
      all: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              return false;
          }
        }
        return true;
      },
      any: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return true;
          }
        }
        return false;
      },
      count: function (receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              count++;
          }
        }
        return count;
      },
      find: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return element;
          }
        }
        return null;
      },
      filter: function (receiver, predicate) {
        return _.kotlin.filterTo(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot: function (receiver, predicate) {
        return _.kotlin.filterNotTo(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      partition: function (receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_0: function (receiver, transform) {
        return _.kotlin.mapTo_0(receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_0: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform.call(this, item));
          }
        }
        return result;
      },
      flatMap: function (receiver, transform) {
        return _.kotlin.flatMapTo(receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform.call(this, element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach: function (receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation.call(this, element);
          }
        }
      },
      fold: function (receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation.call(this, answer, element);
          }
        }
        return answer;
      },
      foldRight: function (receiver, initial, operation) {
        var r = initial;
        var index = receiver.length - 1;
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      reduce: function (receiver, operation) {
        var iterator = Kotlin.arrayIterator(receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation.call(this, result, iterator.next());
        }
        return result;
      },
      reduceRight: function (receiver, operation) {
        var index = receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = receiver[index--];
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      groupBy: function (receiver, toKey) {
        return _.kotlin.groupByTo(receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      groupByTo: function (receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey.call(this, element);
            var list = _.kotlin.getOrPut(result, key, _f.f0);
            list.add(element);
          }
        }
        return result;
      },
      drop: function (receiver, n) {
        return _.kotlin.dropWhile(receiver, _.kotlin.countTo(n));
      },
      dropWhile: function (receiver, predicate) {
        return _.kotlin.dropWhileTo(receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo: function (receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate.call(this, element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take: function (receiver, n) {
        return _.kotlin.takeWhile(receiver, _.kotlin.countTo(n));
      },
      takeWhile: function (receiver, predicate) {
        return _.kotlin.takeWhileTo(receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection: function (receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse: function (receiver) {
        var list = _.kotlin.toCollection(receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList: function (receiver) {
        return _.kotlin.toCollection(receiver, new Kotlin.LinkedList());
      },
      toList: function (receiver) {
        return _.kotlin.toCollection(receiver, new Kotlin.ArrayList(0));
      },
      toSet: function (receiver) {
        return _.kotlin.toCollection(receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet: function (receiver) {
        return _.kotlin.toCollection(receiver, new Kotlin.TreeSet());
      },
      plus: function (receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection(receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_0: function (receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection(receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_1: function (receiver, collection) {
        return _.kotlin.plus_0(receiver, collection.iterator());
      },
      withIndices: function (receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
      },
      sortBy: function (receiver, f) {
        var sortedList = _.kotlin.toCollection(receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(Kotlin.b2(_f.f1, this, [f]));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : element.toString();
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_0: function (receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString(receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      downTo: function (receiver, to) {
        return new _.jet.ByteProgression(receiver, to, -1);
      },
      downTo_0: function (receiver, to) {
        return new _.jet.CharProgression(receiver.toChar(), to, -1);
      },
      downTo_1: function (receiver, to) {
        return new _.jet.ShortProgression(receiver, to, -1);
      },
      downTo_2: function (receiver, to) {
        return new Kotlin.NumberProgression(receiver, to, -1);
      },
      downTo_3: function (receiver, to) {
        return new _.jet.LongProgression(receiver.toLong(), to, -(1).toLong());
      },
      downTo_4: function (receiver, to) {
        return new _.jet.FloatProgression(receiver, to, -1);
      },
      downTo_5: function (receiver, to) {
        return new _.jet.DoubleProgression(receiver, to, -1.0);
      },
      downTo_6: function (receiver, to) {
        return new _.jet.CharProgression(receiver, to.toChar(), -1);
      },
      downTo_7: function (receiver, to) {
        return new _.jet.CharProgression(receiver, to, -1);
      },
      downTo_8: function (receiver, to) {
        return new _.jet.ShortProgression(receiver.toShort(), to, -1);
      },
      downTo_9: function (receiver, to) {
        return new Kotlin.NumberProgression(receiver.toInt(), to, -1);
      },
      downTo_10: function (receiver, to) {
        return new _.jet.LongProgression(receiver.toLong(), to, -(1).toLong());
      },
      downTo_11: function (receiver, to) {
        return new _.jet.FloatProgression(receiver.toFloat(), to, -1);
      },
      downTo_12: function (receiver, to) {
        return new _.jet.DoubleProgression(receiver.toDouble(), to, -1.0);
      },
      downTo_13: function (receiver, to) {
        return new _.jet.ShortProgression(receiver, to, -1);
      },
      downTo_14: function (receiver, to) {
        return new _.jet.ShortProgression(receiver, to.toShort(), -1);
      },
      downTo_15: function (receiver, to) {
        return new _.jet.ShortProgression(receiver, to, -1);
      },
      downTo_16: function (receiver, to) {
        return new Kotlin.NumberProgression(receiver, to, -1);
      },
      downTo_17: function (receiver, to) {
        return new _.jet.LongProgression(receiver.toLong(), to, -(1).toLong());
      },
      downTo_18: function (receiver, to) {
        return new _.jet.FloatProgression(receiver, to, -1);
      },
      downTo_19: function (receiver, to) {
        return new _.jet.DoubleProgression(receiver, to, -1.0);
      },
      downTo_20: function (receiver, to) {
        return new Kotlin.NumberProgression(receiver, to, -1);
      },
      downTo_21: function (receiver, to) {
        return new Kotlin.NumberProgression(receiver, to.toInt(), -1);
      },
      downTo_22: function (receiver, to) {
        return new Kotlin.NumberProgression(receiver, to, -1);
      },
      downTo_23: function (receiver, to) {
        return new Kotlin.NumberProgression(receiver, to, -1);
      },
      downTo_24: function (receiver, to) {
        return new _.jet.LongProgression(receiver.toLong(), to, -(1).toLong());
      },
      downTo_25: function (receiver, to) {
        return new _.jet.FloatProgression(receiver, to, -1);
      },
      downTo_26: function (receiver, to) {
        return new _.jet.DoubleProgression(receiver, to, -1.0);
      },
      downTo_27: function (receiver, to) {
        return new _.jet.LongProgression(receiver, to.toLong(), -(1).toLong());
      },
      downTo_28: function (receiver, to) {
        return new _.jet.LongProgression(receiver, to.toLong(), -(1).toLong());
      },
      downTo_29: function (receiver, to) {
        return new _.jet.LongProgression(receiver, to.toLong(), -(1).toLong());
      },
      downTo_30: function (receiver, to) {
        return new _.jet.LongProgression(receiver, to.toLong(), -(1).toLong());
      },
      downTo_31: function (receiver, to) {
        return new _.jet.LongProgression(receiver, to, -(1).toLong());
      },
      downTo_32: function (receiver, to) {
        return new _.jet.FloatProgression(receiver.toFloat(), to, -1);
      },
      downTo_33: function (receiver, to) {
        return new _.jet.DoubleProgression(receiver.toDouble(), to, -1.0);
      },
      downTo_34: function (receiver, to) {
        return new _.jet.FloatProgression(receiver, to, -1);
      },
      downTo_35: function (receiver, to) {
        return new _.jet.FloatProgression(receiver, to.toFloat(), -1);
      },
      downTo_36: function (receiver, to) {
        return new _.jet.FloatProgression(receiver, to, -1);
      },
      downTo_37: function (receiver, to) {
        return new _.jet.FloatProgression(receiver, to, -1);
      },
      downTo_38: function (receiver, to) {
        return new _.jet.FloatProgression(receiver, to.toFloat(), -1);
      },
      downTo_39: function (receiver, to) {
        return new _.jet.FloatProgression(receiver, to, -1);
      },
      downTo_40: function (receiver, to) {
        return new _.jet.DoubleProgression(receiver, to, -1.0);
      },
      downTo_41: function (receiver, to) {
        return new _.jet.DoubleProgression(receiver, to, -1.0);
      },
      downTo_42: function (receiver, to) {
        return new _.jet.DoubleProgression(receiver, to.toDouble(), -1.0);
      },
      downTo_43: function (receiver, to) {
        return new _.jet.DoubleProgression(receiver, to, -1.0);
      },
      downTo_44: function (receiver, to) {
        return new _.jet.DoubleProgression(receiver, to, -1.0);
      },
      downTo_45: function (receiver, to) {
        return new _.jet.DoubleProgression(receiver, to.toDouble(), -1.0);
      },
      downTo_46: function (receiver, to) {
        return new _.jet.DoubleProgression(receiver, to, -1.0);
      },
      downTo_47: function (receiver, to) {
        return new _.jet.DoubleProgression(receiver, to, -1.0);
      },
      all_0: function (receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (!predicate.call(this, element))
              return false;
          }
        }
        return true;
      },
      any_0: function (receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate.call(this, element))
              return true;
          }
        }
        return false;
      },
      count_0: function (receiver, predicate) {
        var count = 0;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate.call(this, element))
              count++;
          }
        }
        return count;
      },
      find_0: function (receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate.call(this, element))
              return element;
          }
        }
        return null;
      },
      filter_0: function (receiver, predicate) {
        return _.kotlin.filterTo_0(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_0: function (receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_0: function (receiver, predicate) {
        return _.kotlin.filterNotTo_0(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_0: function (receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (!predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotNull: function (receiver) {
        return _.kotlin.filterNotNullTo(receiver, new Kotlin.ArrayList(0));
      },
      filterNotNullTo: function (receiver, result) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (element != null)
              result.add(element);
          }
        }
        return result;
      },
      partition_0: function (receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (predicate.call(this, element)) {
                first.add(element);
              }
               else {
                second.add(element);
              }
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_1: function (receiver, transform) {
        return _.kotlin.mapTo_1(receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_1: function (receiver, result, transform) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var item = tmp$0[tmp$2];
            result.add(transform.call(this, item));
          }
        }
        return result;
      },
      flatMap_0: function (receiver, transform) {
        return _.kotlin.flatMapTo_0(receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_0: function (receiver, result, transform) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              var list = transform.call(this, element);
              {
                var tmp$3 = list.iterator();
                while (tmp$3.hasNext()) {
                  var r = tmp$3.next();
                  result.add(r);
                }
              }
            }
          }
        }
        return result;
      },
      forEach_0: function (receiver, operation) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            operation.call(this, element);
          }
        }
      },
      fold_0: function (receiver, initial, operation) {
        var answer = initial;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            answer = operation.call(this, answer, element);
          }
        }
        return answer;
      },
      foldRight_0: function (receiver, initial, operation) {
        var r = initial;
        var index = receiver.length - 1;
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      reduce_0: function (receiver, operation) {
        var iterator = Kotlin.arrayIterator(receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation.call(this, result, iterator.next());
        }
        return result;
      },
      reduceRight_0: function (receiver, operation) {
        var index = receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = receiver[index--];
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      groupBy_0: function (receiver, toKey) {
        return _.kotlin.groupByTo_0(receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      groupByTo_0: function (receiver, result, toKey) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              var key = toKey.call(this, element);
              var list = _.kotlin.getOrPut(result, key, _f.f2);
              list.add(element);
            }
          }
        }
        return result;
      },
      drop_0: function (receiver, n) {
        return _.kotlin.dropWhile_0(receiver, _.kotlin.countTo(n));
      },
      dropWhile_0: function (receiver, predicate) {
        return _.kotlin.dropWhileTo_0(receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_0: function (receiver, result, predicate) {
        var start = true;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (start && predicate.call(this, element)) {
              }
               else {
                start = false;
                result.add(element);
              }
            }
          }
        }
        return result;
      },
      take_0: function (receiver, n) {
        return _.kotlin.takeWhile_0(receiver, _.kotlin.countTo(n));
      },
      takeWhile_0: function (receiver, predicate) {
        return _.kotlin.takeWhileTo_0(receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_0: function (receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate.call(this, element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_0: function (receiver, result) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            result.add(element);
          }
        }
        return result;
      },
      reverse_0: function (receiver) {
        var list = _.kotlin.toCollection_0(receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_0: function (receiver) {
        return _.kotlin.toCollection_0(receiver, new Kotlin.LinkedList());
      },
      toList_0: function (receiver) {
        return _.kotlin.toCollection_0(receiver, new Kotlin.ArrayList(0));
      },
      toSet_0: function (receiver) {
        return _.kotlin.toCollection_0(receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_0: function (receiver) {
        return _.kotlin.toCollection_0(receiver, new Kotlin.TreeSet());
      },
      requireNoNulls: function (receiver) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (element == null) {
                throw new Kotlin.IllegalArgumentException('null element found in ' + receiver.toString());
              }
            }
          }
        }
        return receiver;
      },
      plus_2: function (receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_0(receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_3: function (receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_0(receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_4: function (receiver, collection) {
        return _.kotlin.plus_3(receiver, collection.iterator());
      },
      withIndices_0: function (receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
      },
      sortBy_0: function (receiver, f) {
        var sortedList = _.kotlin.toCollection_0(receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(Kotlin.b2(_f.f3, this, [f]));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_0: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (++count > 1)
                buffer.append(separator);
              if (limit < 0 || count <= limit) {
                var text = element == null ? 'null' : element.toString();
                buffer.append(text);
              }
               else
                break;
            }
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_1: function (receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_0(receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      get_size: function (receiver) {
        return receiver.size();
      },
      get_empty: function (receiver) {
        return receiver.isEmpty();
      },
      set_0: function (receiver, key, value) {
        return receiver.put(key, value);
      },
      orEmpty: function (receiver) {
        return receiver != null ? receiver : Kotlin.emptyMap();
      },
      get_key: function (receiver) {
        return receiver.getKey();
      },
      get_value: function (receiver) {
        return receiver.getValue();
      },
      component1: function (receiver) {
        return receiver.getKey();
      },
      component2: function (receiver) {
        return receiver.getValue();
      },
      getOrElse: function (receiver, key, defaultValue) {
        if (receiver.containsKey(key)) {
          return receiver.get(key);
        }
         else {
          return defaultValue.call(this);
        }
      },
      getOrPut: function (receiver, key, defaultValue) {
        if (receiver.containsKey(key)) {
          return receiver.get(key);
        }
         else {
          var answer = defaultValue.call(this);
          receiver.put(key, answer);
          return answer;
        }
      },
      iterator: function (receiver) {
        var entrySet = receiver.entrySet();
        return entrySet.iterator();
      },
      mapTo: function (receiver, result, transform) {
        {
          var tmp$0 = _.kotlin.iterator(receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform.call(this, item));
          }
        }
        return result;
      },
      mapValuesTo: function (receiver, result, transform) {
        {
          var tmp$0 = _.kotlin.iterator(receiver);
          while (tmp$0.hasNext()) {
            var e = tmp$0.next();
            var newValue = transform.call(this, e);
            result.put(_.kotlin.get_key(e), newValue);
          }
        }
        return result;
      },
      putAll: function (receiver, values) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = values, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var v = tmp$0[tmp$2];
            {
              receiver.put(v.get_first(), v.get_second());
            }
          }
        }
      },
      toMap: function (receiver, map) {
        map.putAll(receiver);
        return map;
      },
      map_2: function (receiver, transform) {
        return _.kotlin.mapTo(receiver, new Kotlin.ArrayList(_.kotlin.get_size(receiver)), transform);
      },
      mapValues_0: function (receiver, transform) {
        return _.kotlin.mapValuesTo(receiver, new Kotlin.ComplexHashMap(_.kotlin.get_size(receiver)), transform);
      },
      get_size_0: function (receiver) {
        return receiver.size();
      },
      get_empty_0: function (receiver) {
        return receiver.isEmpty();
      },
      get_indices: function (receiver) {
        return new Kotlin.NumberRange(0, _.kotlin.get_size_0(receiver) - 1);
      },
      get_indices_0: function (receiver) {
        return new Kotlin.NumberRange(0, receiver - 1);
      },
      notEmpty_0: function (receiver) {
        return !receiver.isEmpty();
      },
      orEmpty_0: function (receiver) {
        return receiver != null ? receiver : Kotlin.emptyList();
      },
      toSortedList: function (receiver) {
        return _.kotlin.sort(_.kotlin.toCollection_1(receiver, new Kotlin.ArrayList(0)));
      },
      toSortedList_0: function (receiver, comparator) {
        return _.kotlin.sort_0(_.kotlin.toList_1(receiver), comparator);
      },
      orEmpty_1: function (receiver) {
        return receiver != null ? receiver : Kotlin.emptyList();
      },
      get_first: function (receiver) {
        return _.kotlin.get_head(receiver);
      },
      get_last: function (receiver) {
        var s = _.kotlin.get_size_0(receiver);
        return s > 0 ? receiver.get(s - 1) : null;
      },
      get_lastIndex: function (receiver) {
        return _.kotlin.get_size_0(receiver) - 1;
      },
      get_head: function (receiver) {
        return receiver.get(0);
      },
      get_tail: function (receiver) {
        return _.kotlin.drop_1(receiver, 1);
      },
      all_1: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              return false;
          }
        }
        return true;
      },
      any_1: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return true;
          }
        }
        return false;
      },
      count_1: function (receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              count++;
          }
        }
        return count;
      },
      find_1: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return element;
          }
        }
        return null;
      },
      filter_1: function (receiver, predicate) {
        return _.kotlin.filterTo_1(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_1: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_1: function (receiver, predicate) {
        return _.kotlin.filterNotTo_1(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_1: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      partition_1: function (receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_3: function (receiver, transform) {
        return _.kotlin.mapTo_2(receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_2: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform.call(this, item));
          }
        }
        return result;
      },
      flatMap_1: function (receiver, transform) {
        return _.kotlin.flatMapTo_1(receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_1: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform.call(this, element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_1: function (receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation.call(this, element);
          }
        }
      },
      fold_1: function (receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation.call(this, answer, element);
          }
        }
        return answer;
      },
      foldRight_1: function (receiver, initial, operation) {
        var r = initial;
        var index = receiver.length - 1;
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      reduce_1: function (receiver, operation) {
        var iterator = Kotlin.arrayIterator(receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation.call(this, result, iterator.next());
        }
        return result;
      },
      reduceRight_1: function (receiver, operation) {
        var index = receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = receiver[index--];
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      groupBy_1: function (receiver, toKey) {
        return _.kotlin.groupByTo_1(receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      groupByTo_1: function (receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey.call(this, element);
            var list = _.kotlin.getOrPut(result, key, _f.f4);
            list.add(element);
          }
        }
        return result;
      },
      drop_2: function (receiver, n) {
        return _.kotlin.dropWhile_1(receiver, _.kotlin.countTo(n));
      },
      dropWhile_1: function (receiver, predicate) {
        return _.kotlin.dropWhileTo_1(receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_1: function (receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate.call(this, element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_1: function (receiver, n) {
        return _.kotlin.takeWhile_1(receiver, _.kotlin.countTo(n));
      },
      takeWhile_1: function (receiver, predicate) {
        return _.kotlin.takeWhileTo_1(receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_1: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_2: function (receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_1: function (receiver) {
        var list = _.kotlin.toCollection_2(receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_1: function (receiver) {
        return _.kotlin.toCollection_2(receiver, new Kotlin.LinkedList());
      },
      toList_2: function (receiver) {
        return _.kotlin.toCollection_2(receiver, new Kotlin.ArrayList(0));
      },
      toSet_1: function (receiver) {
        return _.kotlin.toCollection_2(receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_1: function (receiver) {
        return _.kotlin.toCollection_2(receiver, new Kotlin.TreeSet());
      },
      plus_5: function (receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_2(receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_6: function (receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_2(receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_7: function (receiver, collection) {
        return _.kotlin.plus_6(receiver, collection.iterator());
      },
      withIndices_1: function (receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
      },
      sortBy_1: function (receiver, f) {
        var sortedList = _.kotlin.toCollection_2(receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(Kotlin.b2(_f.f5, this, [f]));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_1: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : element.toString();
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_2: function (receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_1(receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      count_2: function (receiver) {
        if (Kotlin.isType(receiver, _.jet.Collection)) {
          return receiver.size();
        }
        var number = 0;
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var elem = tmp$0.next();
            ++number;
          }
        }
        return number;
      },
      countTo: function (n) {
        var count = 0;
        return function (it) {
          ++count;
          return count <= n;
        };
      },
      first: function (receiver) {
        if (Kotlin.isType(receiver, _.jet.List)) {
          return _.kotlin.first(receiver);
        }
        return receiver.iterator().next();
      },
      containsItem: function (receiver, item) {
        if (Kotlin.isType(receiver, Kotlin.AbstractCollection)) {
          return receiver.contains(item);
        }
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var elem = tmp$0.next();
            if (Kotlin.equals(elem, item)) {
              return true;
            }
          }
        }
        return false;
      },
      sort: function (receiver) {
        var list = _.kotlin.toCollection_1(receiver, new Kotlin.ArrayList(0));
        Kotlin.collectionsSort(list);
        return list;
      },
      sort_0: function (receiver, comparator) {
        var list = _.kotlin.toCollection_1(receiver, new Kotlin.ArrayList(0));
        Kotlin.collectionsSort(list, comparator);
        return list;
      },
      filter_2: function (receiver, predicate) {
        return new _.kotlin.FilterIterator(receiver, predicate);
      },
      filterNot_2: function (receiver, predicate) {
        return _.kotlin.filter_2(receiver, Kotlin.b2(_f.f7, null, [predicate]));
      },
      filterNotNull_0: function (receiver) {
        return new _.kotlin.FilterNotNullIterator(receiver);
      },
      map_4: function (receiver, transform) {
        return new _.kotlin.MapIterator(receiver, transform);
      },
      flatMap_2: function (receiver, transform) {
        return new _.kotlin.FlatMapIterator(receiver, transform);
      },
      requireNoNulls_0: function (receiver) {
        return _.kotlin.map_4(receiver, _f.f8);
      },
      take_2: function (receiver, n) {
        var count = n;
        return _.kotlin.takeWhile_2(receiver, function (it) {
          return --count >= 0;
        });
      },
      takeWhile_2: function (receiver, predicate) {
        return new _.kotlin.TakeWhileIterator(receiver, predicate);
      },
      plus_8: function (receiver, element) {
        return new _.kotlin.CompositeIterator([receiver, new _.kotlin.SingleIterator(element)]);
      },
      plus_9: function (receiver, iterator) {
        return new _.kotlin.CompositeIterator([receiver, iterator]);
      },
      plus_10: function (receiver, collection) {
        return _.kotlin.plus_9(receiver, collection.iterator());
      },
      all_2: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              return false;
          }
        }
        return true;
      },
      any_2: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return true;
          }
        }
        return false;
      },
      count_3: function (receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              count++;
          }
        }
        return count;
      },
      find_2: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return element;
          }
        }
        return null;
      },
      filter_3: function (receiver, predicate) {
        return _.kotlin.filterTo_2(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_2: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_3: function (receiver, predicate) {
        return _.kotlin.filterNotTo_2(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_2: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      partition_2: function (receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_5: function (receiver, transform) {
        return _.kotlin.mapTo_3(receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_3: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform.call(this, item));
          }
        }
        return result;
      },
      flatMap_3: function (receiver, transform) {
        return _.kotlin.flatMapTo_2(receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_2: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform.call(this, element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_2: function (receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation.call(this, element);
          }
        }
      },
      fold_2: function (receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation.call(this, answer, element);
          }
        }
        return answer;
      },
      foldRight_2: function (receiver, initial, operation) {
        var r = initial;
        var index = receiver.length - 1;
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      reduce_2: function (receiver, operation) {
        var iterator = Kotlin.arrayIterator(receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation.call(this, result, iterator.next());
        }
        return result;
      },
      reduceRight_2: function (receiver, operation) {
        var index = receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = receiver[index--];
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      groupBy_2: function (receiver, toKey) {
        return _.kotlin.groupByTo_2(receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      groupByTo_2: function (receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey.call(this, element);
            var list = _.kotlin.getOrPut(result, key, _f.f9);
            list.add(element);
          }
        }
        return result;
      },
      drop_3: function (receiver, n) {
        return _.kotlin.dropWhile_2(receiver, _.kotlin.countTo(n));
      },
      dropWhile_2: function (receiver, predicate) {
        return _.kotlin.dropWhileTo_2(receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_2: function (receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate.call(this, element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_3: function (receiver, n) {
        return _.kotlin.takeWhile_3(receiver, _.kotlin.countTo(n));
      },
      takeWhile_3: function (receiver, predicate) {
        return _.kotlin.takeWhileTo_2(receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_2: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_3: function (receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_2: function (receiver) {
        var list = _.kotlin.toCollection_3(receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_2: function (receiver) {
        return _.kotlin.toCollection_3(receiver, new Kotlin.LinkedList());
      },
      toList_3: function (receiver) {
        return _.kotlin.toCollection_3(receiver, new Kotlin.ArrayList(0));
      },
      toSet_2: function (receiver) {
        return _.kotlin.toCollection_3(receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_2: function (receiver) {
        return _.kotlin.toCollection_3(receiver, new Kotlin.TreeSet());
      },
      plus_11: function (receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_3(receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_12: function (receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_3(receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_13: function (receiver, collection) {
        return _.kotlin.plus_12(receiver, collection.iterator());
      },
      withIndices_2: function (receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
      },
      sortBy_2: function (receiver, f) {
        var sortedList = _.kotlin.toCollection_3(receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(Kotlin.b2(_f.fa, this, [f]));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_2: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : element.toString();
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_3: function (receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_2(receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      require: function (value, message) {
        if (!value) {
          throw new Kotlin.IllegalArgumentException(message.toString());
        }
      },
      require_0: function (value, lazyMessage) {
        if (!value) {
          var message = lazyMessage();
          throw new Kotlin.IllegalArgumentException(message.toString());
        }
      },
      requireNotNull: function (value, message) {
        if (value == null) {
          throw new Kotlin.IllegalArgumentException(message.toString());
        }
         else {
          return value;
        }
      },
      check: function (value, message) {
        if (!value) {
          throw new Kotlin.IllegalStateException(message.toString());
        }
      },
      check_0: function (value, lazyMessage) {
        if (!value) {
          var message = lazyMessage();
          throw new Kotlin.IllegalStateException(message.toString());
        }
      },
      checkNotNull: function (value, message) {
        if (value == null) {
          throw new Kotlin.IllegalStateException(message);
        }
         else {
          return value;
        }
      },
      iterator_0: function (receiver) {
        return Kotlin.createObject(Kotlin.Iterator, {
          initialize: function () {
          },
          hasNext: function () {
            return receiver.hasMoreElements();
          },
          next: function () {
            return receiver.nextElement();
          }
        });
      },
      toArrayList: function (receiver) {
        return _.kotlin.toCollection_4(receiver, new Kotlin.ArrayList(0));
      },
      toHashSet: function (receiver) {
        return _.kotlin.toCollection_4(receiver, new Kotlin.ComplexHashSet());
      },
      to: function (receiver, that) {
        return new _.kotlin.Pair(receiver, that);
      },
      run: function (f) {
        return f();
      },
      with: function (receiver, f) {
        return f.call(receiver);
      },
      let: function (receiver, f) {
        return f.call(this, receiver);
      },
      all_3: function (receiver, predicate) {
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              return false;
          }
        }
        return true;
      },
      any_3: function (receiver, predicate) {
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return true;
          }
        }
        return false;
      },
      count_4: function (receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              count++;
          }
        }
        return count;
      },
      find_3: function (receiver, predicate) {
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return element;
          }
        }
        return null;
      },
      filterTo_3: function (receiver, result, predicate) {
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotTo_3: function (receiver, result, predicate) {
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotNullTo_0: function (receiver, result) {
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (element != null)
              result.add(element);
          }
        }
        return result;
      },
      partition_3: function (receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      mapTo_4: function (receiver, result, transform) {
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform.call(this, item));
          }
        }
        return result;
      },
      flatMapTo_3: function (receiver, result, transform) {
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform.call(this, element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_3: function (receiver, operation) {
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation.call(this, element);
          }
        }
      },
      fold_3: function (receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation.call(this, answer, element);
          }
        }
        return answer;
      },
      reduce_3: function (receiver, operation) {
        var iterator = receiver.iterator();
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation.call(this, result, iterator.next());
        }
        return result;
      },
      groupBy_3: function (receiver, toKey) {
        return _.kotlin.groupByTo_3(receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      groupByTo_3: function (receiver, result, toKey) {
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey.call(this, element);
            var list = _.kotlin.getOrPut(result, key, _f.fb);
            list.add(element);
          }
        }
        return result;
      },
      drop_1: function (receiver, n) {
        return _.kotlin.dropWhile_3(receiver, _.kotlin.countTo(n));
      },
      dropWhile_3: function (receiver, predicate) {
        return _.kotlin.dropWhileTo_3(receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_3: function (receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate.call(this, element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      takeWhileTo_3: function (receiver, result, predicate) {
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_1: function (receiver, result) {
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_3: function (receiver) {
        var list = _.kotlin.toCollection_1(receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_3: function (receiver) {
        return _.kotlin.toCollection_1(receiver, new Kotlin.LinkedList());
      },
      toList_1: function (receiver) {
        return _.kotlin.toCollection_1(receiver, new Kotlin.ArrayList(0));
      },
      toSet_3: function (receiver) {
        return _.kotlin.toCollection_1(receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_3: function (receiver) {
        return _.kotlin.toCollection_1(receiver, new Kotlin.TreeSet());
      },
      withIndices_3: function (receiver) {
        return new _.kotlin.IndexIterator(receiver.iterator());
      },
      sortBy_3: function (receiver, f) {
        var sortedList = _.kotlin.toCollection_1(receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(Kotlin.b2(_f.fc, this, [f]));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_3: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : element.toString();
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString: function (receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_3(receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      all_4: function (receiver, predicate) {
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              return false;
          }
        }
        return true;
      },
      any_4: function (receiver, predicate) {
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return true;
          }
        }
        return false;
      },
      count_5: function (receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              count++;
          }
        }
        return count;
      },
      find_4: function (receiver, predicate) {
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return element;
          }
        }
        return null;
      },
      filterTo_4: function (receiver, result, predicate) {
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotTo_4: function (receiver, result, predicate) {
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNotNullTo_1: function (receiver, result) {
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (element != null)
              result.add(element);
          }
        }
        return result;
      },
      partition_4: function (receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      mapTo_5: function (receiver, result, transform) {
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform.call(this, item));
          }
        }
        return result;
      },
      flatMapTo_4: function (receiver, result, transform) {
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform.call(this, element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_4: function (receiver, operation) {
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation.call(this, element);
          }
        }
      },
      fold_4: function (receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation.call(this, answer, element);
          }
        }
        return answer;
      },
      reduce_4: function (receiver, operation) {
        var iterator = receiver;
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation.call(this, result, iterator.next());
        }
        return result;
      },
      groupBy_4: function (receiver, toKey) {
        return _.kotlin.groupByTo_4(receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      groupByTo_4: function (receiver, result, toKey) {
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey.call(this, element);
            var list = _.kotlin.getOrPut(result, key, _f.fd);
            list.add(element);
          }
        }
        return result;
      },
      drop_4: function (receiver, n) {
        return _.kotlin.dropWhile_4(receiver, _.kotlin.countTo(n));
      },
      dropWhile_4: function (receiver, predicate) {
        return _.kotlin.dropWhileTo_4(receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_4: function (receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate.call(this, element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      takeWhileTo_4: function (receiver, result, predicate) {
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_4: function (receiver, result) {
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_4: function (receiver) {
        var list = _.kotlin.toCollection_4(receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_4: function (receiver) {
        return _.kotlin.toCollection_4(receiver, new Kotlin.LinkedList());
      },
      toList_4: function (receiver) {
        return _.kotlin.toCollection_4(receiver, new Kotlin.ArrayList(0));
      },
      toSet_4: function (receiver) {
        return _.kotlin.toCollection_4(receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_4: function (receiver) {
        return _.kotlin.toCollection_4(receiver, new Kotlin.TreeSet());
      },
      withIndices_4: function (receiver) {
        return new _.kotlin.IndexIterator(receiver);
      },
      sortBy_4: function (receiver, f) {
        var sortedList = _.kotlin.toCollection_4(receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(Kotlin.b2(_f.fe, this, [f]));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_4: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = receiver;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : element.toString();
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_4: function (receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_4(receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      all_5: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              return false;
          }
        }
        return true;
      },
      any_5: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return true;
          }
        }
        return false;
      },
      count_6: function (receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              count++;
          }
        }
        return count;
      },
      find_5: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return element;
          }
        }
        return null;
      },
      filter_4: function (receiver, predicate) {
        return _.kotlin.filterTo_5(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_5: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_4: function (receiver, predicate) {
        return _.kotlin.filterNotTo_5(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_5: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      partition_5: function (receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_6: function (receiver, transform) {
        return _.kotlin.mapTo_6(receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_6: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform.call(this, item));
          }
        }
        return result;
      },
      flatMap_4: function (receiver, transform) {
        return _.kotlin.flatMapTo_5(receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_5: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform.call(this, element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_5: function (receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation.call(this, element);
          }
        }
      },
      fold_5: function (receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation.call(this, answer, element);
          }
        }
        return answer;
      },
      foldRight_3: function (receiver, initial, operation) {
        var r = initial;
        var index = receiver.length - 1;
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      reduce_5: function (receiver, operation) {
        var iterator = Kotlin.arrayIterator(receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation.call(this, result, iterator.next());
        }
        return result;
      },
      reduceRight_3: function (receiver, operation) {
        var index = receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = receiver[index--];
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      groupBy_5: function (receiver, toKey) {
        return _.kotlin.groupByTo_5(receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      groupByTo_5: function (receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey.call(this, element);
            var list = _.kotlin.getOrPut(result, key, _f.ff);
            list.add(element);
          }
        }
        return result;
      },
      drop_5: function (receiver, n) {
        return _.kotlin.dropWhile_5(receiver, _.kotlin.countTo(n));
      },
      dropWhile_5: function (receiver, predicate) {
        return _.kotlin.dropWhileTo_5(receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_5: function (receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate.call(this, element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_4: function (receiver, n) {
        return _.kotlin.takeWhile_4(receiver, _.kotlin.countTo(n));
      },
      takeWhile_4: function (receiver, predicate) {
        return _.kotlin.takeWhileTo_5(receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_5: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_5: function (receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_5: function (receiver) {
        var list = _.kotlin.toCollection_5(receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_5: function (receiver) {
        return _.kotlin.toCollection_5(receiver, new Kotlin.LinkedList());
      },
      toList_5: function (receiver) {
        return _.kotlin.toCollection_5(receiver, new Kotlin.ArrayList(0));
      },
      toSet_5: function (receiver) {
        return _.kotlin.toCollection_5(receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_5: function (receiver) {
        return _.kotlin.toCollection_5(receiver, new Kotlin.TreeSet());
      },
      plus_14: function (receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_5(receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_15: function (receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_5(receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_16: function (receiver, collection) {
        return _.kotlin.plus_15(receiver, collection.iterator());
      },
      withIndices_5: function (receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
      },
      sortBy_5: function (receiver, f) {
        var sortedList = _.kotlin.toCollection_5(receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(Kotlin.b2(_f.fg, this, [f]));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_5: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : element.toString();
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_5: function (receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_5(receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      all_6: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              return false;
          }
        }
        return true;
      },
      any_6: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return true;
          }
        }
        return false;
      },
      count_7: function (receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              count++;
          }
        }
        return count;
      },
      find_6: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return element;
          }
        }
        return null;
      },
      filter_5: function (receiver, predicate) {
        return _.kotlin.filterTo_6(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_6: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_5: function (receiver, predicate) {
        return _.kotlin.filterNotTo_6(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_6: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      partition_6: function (receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_7: function (receiver, transform) {
        return _.kotlin.mapTo_7(receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_7: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform.call(this, item));
          }
        }
        return result;
      },
      flatMap_5: function (receiver, transform) {
        return _.kotlin.flatMapTo_6(receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_6: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform.call(this, element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_6: function (receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation.call(this, element);
          }
        }
      },
      fold_6: function (receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation.call(this, answer, element);
          }
        }
        return answer;
      },
      foldRight_4: function (receiver, initial, operation) {
        var r = initial;
        var index = receiver.length - 1;
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      reduce_6: function (receiver, operation) {
        var iterator = Kotlin.arrayIterator(receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation.call(this, result, iterator.next());
        }
        return result;
      },
      reduceRight_4: function (receiver, operation) {
        var index = receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = receiver[index--];
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      groupBy_6: function (receiver, toKey) {
        return _.kotlin.groupByTo_6(receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      groupByTo_6: function (receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey.call(this, element);
            var list = _.kotlin.getOrPut(result, key, _f.fh);
            list.add(element);
          }
        }
        return result;
      },
      drop_6: function (receiver, n) {
        return _.kotlin.dropWhile_6(receiver, _.kotlin.countTo(n));
      },
      dropWhile_6: function (receiver, predicate) {
        return _.kotlin.dropWhileTo_6(receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_6: function (receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate.call(this, element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_5: function (receiver, n) {
        return _.kotlin.takeWhile_5(receiver, _.kotlin.countTo(n));
      },
      takeWhile_5: function (receiver, predicate) {
        return _.kotlin.takeWhileTo_6(receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_6: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_6: function (receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_6: function (receiver) {
        var list = _.kotlin.toCollection_6(receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_6: function (receiver) {
        return _.kotlin.toCollection_6(receiver, new Kotlin.LinkedList());
      },
      toList_6: function (receiver) {
        return _.kotlin.toCollection_6(receiver, new Kotlin.ArrayList(0));
      },
      toSet_6: function (receiver) {
        return _.kotlin.toCollection_6(receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_6: function (receiver) {
        return _.kotlin.toCollection_6(receiver, new Kotlin.TreeSet());
      },
      plus_17: function (receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_6(receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_18: function (receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_6(receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_19: function (receiver, collection) {
        return _.kotlin.plus_18(receiver, collection.iterator());
      },
      withIndices_6: function (receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
      },
      sortBy_6: function (receiver, f) {
        var sortedList = _.kotlin.toCollection_6(receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(Kotlin.b2(_f.fi, this, [f]));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_6: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : element.toString();
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_6: function (receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_6(receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      iterate: function (nextFunction) {
        return new _.kotlin.FunctionIterator(nextFunction);
      },
      FilterIterator: Kotlin.createClass(classes.c1j, {
        initialize: function (iterator, predicate) {
          this.$iterator = iterator;
          this.$predicate = predicate;
          this.super_init();
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_predicate: function () {
          return this.$predicate;
        },
        computeNext: function () {
          while (this.get_iterator().hasNext()) {
            var next = this.get_iterator().next();
            if (this.get_predicate()(next)) {
              this.setNext(next);
              return;
            }
          }
          this.done();
        }
      }),
      FilterNotNullIterator: Kotlin.createClass(classes.c1j, {
        initialize: function (iterator) {
          this.$iterator = iterator;
          this.super_init();
        },
        get_iterator: function () {
          return this.$iterator;
        },
        computeNext: function () {
          if (this.get_iterator() != null) {
            while (this.get_iterator().hasNext()) {
              var next = this.get_iterator().next();
              if (next != null) {
                this.setNext(next);
                return;
              }
            }
          }
          this.done();
        }
      }),
      MapIterator: Kotlin.createClass(classes.c1j, {
        initialize: function (iterator, transform) {
          this.$iterator = iterator;
          this.$transform = transform;
          this.super_init();
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_transform: function () {
          return this.$transform;
        },
        computeNext: function () {
          if (this.get_iterator().hasNext()) {
            this.setNext(this.get_transform()(this.get_iterator().next()));
          }
           else {
            this.done();
          }
        }
      }),
      FlatMapIterator: Kotlin.createClass(classes.c1j, {
        initialize: function (iterator, transform) {
          this.$iterator = iterator;
          this.$transform = transform;
          this.super_init();
          this.$transformed = _.kotlin.iterate(function () {
            return null;
          });
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_transform: function () {
          return this.$transform;
        },
        get_transformed: function () {
          return this.$transformed;
        },
        set_transformed: function (tmp$0) {
          this.$transformed = tmp$0;
        },
        computeNext: function () {
          while (true) {
            if (this.get_transformed().hasNext()) {
              this.setNext(this.get_transformed().next());
              return;
            }
            if (this.get_iterator().hasNext()) {
              this.set_transformed(this.get_transform()(this.get_iterator().next()));
            }
             else {
              this.done();
              return;
            }
          }
        }
      }),
      TakeWhileIterator: Kotlin.createClass(classes.c1j, {
        initialize: function (iterator, predicate) {
          this.$iterator = iterator;
          this.$predicate = predicate;
          this.super_init();
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_predicate: function () {
          return this.$predicate;
        },
        computeNext: function () {
          if (this.get_iterator().hasNext()) {
            var item = this.get_iterator().next();
            if (this.get_predicate()(item)) {
              this.setNext(item);
              return;
            }
          }
          this.done();
        }
      }),
      FunctionIterator: Kotlin.createClass(classes.c1j, {
        initialize: function (nextFunction) {
          this.$nextFunction = nextFunction;
          this.super_init();
        },
        get_nextFunction: function () {
          return this.$nextFunction;
        },
        computeNext: function () {
          var next = this.get_nextFunction()();
          if (next == null) {
            this.done();
          }
           else {
            this.setNext(next);
          }
        }
      }),
      CompositeIterator: Kotlin.createClass(classes.c1j, {
        initialize: function (iterators) {
          this.super_init();
          this.$iteratorsIter = Kotlin.arrayIterator(iterators);
          this.$currentIter = null;
        },
        get_iteratorsIter: function () {
          return this.$iteratorsIter;
        },
        get_currentIter: function () {
          return this.$currentIter;
        },
        set_currentIter: function (tmp$0) {
          this.$currentIter = tmp$0;
        },
        computeNext: function () {
          while (true) {
            if (this.get_currentIter() == null) {
              if (this.get_iteratorsIter().hasNext()) {
                this.set_currentIter(this.get_iteratorsIter().next());
              }
               else {
                this.done();
                return;
              }
            }
            var iter = this.get_currentIter();
            if (iter != null) {
              if (iter.hasNext()) {
                this.setNext(iter.next());
                return;
              }
               else {
                this.set_currentIter(null);
              }
            }
          }
        }
      }),
      SingleIterator: Kotlin.createClass(classes.c1j, {
        initialize: function (value) {
          this.$value = value;
          this.super_init();
          this.$first = true;
        },
        get_value: function () {
          return this.$value;
        },
        get_first: function () {
          return this.$first;
        },
        set_first: function (tmp$0) {
          this.$first = tmp$0;
        },
        computeNext: function () {
          if (this.get_first()) {
            this.set_first(false);
            this.setNext(this.get_value());
          }
           else {
            this.done();
          }
        }
      }),
      IndexIterator: Kotlin.createClass(Kotlin.Iterator, {
        initialize: function (iterator) {
          this.$iterator = iterator;
          this.$index = 0;
        },
        get_iterator: function () {
          return this.$iterator;
        },
        get_index: function () {
          return this.$index;
        },
        set_index: function (tmp$0) {
          this.$index = tmp$0;
        },
        next: function () {
          var tmp$0, tmp$1;
          return new _.kotlin.Pair((tmp$0 = this.get_index(), tmp$1 = tmp$0, this.set_index(tmp$0 + 1), tmp$1), this.get_iterator().next());
        },
        hasNext: function () {
          return this.get_iterator().hasNext();
        }
      }),
      filter_6: function (receiver, predicate) {
        return _.kotlin.filterTo_3(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNot_6: function (receiver, predicate) {
        return _.kotlin.filterNotTo_3(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotNull_1: function (receiver) {
        return _.kotlin.filterNotNullTo_0(receiver, new Kotlin.ArrayList(0));
      },
      map_8: function (receiver, transform) {
        return _.kotlin.mapTo_4(receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMap_6: function (receiver, transform) {
        return _.kotlin.flatMapTo_3(receiver, new Kotlin.ArrayList(0), transform);
      },
      take_6: function (receiver, n) {
        return _.kotlin.takeWhile_6(receiver, _.kotlin.countTo(n));
      },
      takeWhile_6: function (receiver, predicate) {
        return _.kotlin.takeWhileTo_3(receiver, new Kotlin.ArrayList(0), predicate);
      },
      requireNoNulls_1: function (receiver) {
        {
          var tmp$0 = receiver.iterator();
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (element == null) {
              throw new Kotlin.IllegalArgumentException('null element found in ' + receiver.toString());
            }
          }
        }
        return receiver;
      },
      plus_20: function (receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_1(receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_21: function (receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_1(receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_22: function (receiver, collection) {
        return _.kotlin.plus_21(receiver, collection.iterator());
      },
      notEmpty_1: function (receiver) {
        return !_.kotlin.isEmpty(receiver);
      },
      isEmpty: function (receiver) {
        return receiver.length === 0;
      },
      orEmpty_2: function (receiver) {
        return receiver != null ? receiver : Kotlin.array([]);
      },
      get_lastIndex_0: function (receiver) {
        return receiver.length - 1;
      },
      get_lastIndex_1: function (receiver) {
        return receiver.length - 1;
      },
      get_lastIndex_2: function (receiver) {
        return receiver.length - 1;
      },
      get_lastIndex_3: function (receiver) {
        return receiver.length - 1;
      },
      get_lastIndex_4: function (receiver) {
        return receiver.length - 1;
      },
      get_lastIndex_5: function (receiver) {
        return receiver.length - 1;
      },
      get_lastIndex_6: function (receiver) {
        return receiver.length - 1;
      },
      get_lastIndex_7: function (receiver) {
        return receiver.length - 1;
      },
      get_lastIndex_8: function (receiver) {
        return receiver.length - 1;
      },
      all_7: function (receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (!predicate.call(this, element))
              return false;
          }
        }
        return true;
      },
      any_7: function (receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate.call(this, element))
              return true;
          }
        }
        return false;
      },
      count_8: function (receiver, predicate) {
        var count = 0;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate.call(this, element))
              count++;
          }
        }
        return count;
      },
      find_7: function (receiver, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate.call(this, element))
              return element;
          }
        }
        return null;
      },
      filter_7: function (receiver, predicate) {
        return _.kotlin.filterTo_7(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_7: function (receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_7: function (receiver, predicate) {
        return _.kotlin.filterNotTo_7(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_7: function (receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (!predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      partition_7: function (receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (predicate.call(this, element)) {
                first.add(element);
              }
               else {
                second.add(element);
              }
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_9: function (receiver, transform) {
        return _.kotlin.mapTo_8(receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_8: function (receiver, result, transform) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var item = tmp$0[tmp$2];
            result.add(transform.call(this, item));
          }
        }
        return result;
      },
      flatMap_7: function (receiver, transform) {
        return _.kotlin.flatMapTo_7(receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_7: function (receiver, result, transform) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              var list = transform.call(this, element);
              {
                var tmp$3 = list.iterator();
                while (tmp$3.hasNext()) {
                  var r = tmp$3.next();
                  result.add(r);
                }
              }
            }
          }
        }
        return result;
      },
      forEach_7: function (receiver, operation) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            operation.call(this, element);
          }
        }
      },
      fold_7: function (receiver, initial, operation) {
        var answer = initial;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            answer = operation.call(this, answer, element);
          }
        }
        return answer;
      },
      foldRight_5: function (receiver, initial, operation) {
        var r = initial;
        var index = receiver.length - 1;
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      reduce_7: function (receiver, operation) {
        var iterator = Kotlin.arrayIterator(receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation.call(this, result, iterator.next());
        }
        return result;
      },
      reduceRight_5: function (receiver, operation) {
        var index = receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = receiver[index--];
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      groupBy_7: function (receiver, toKey) {
        return _.kotlin.groupByTo_7(receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      groupByTo_7: function (receiver, result, toKey) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              var key = toKey.call(this, element);
              var list = _.kotlin.getOrPut(result, key, _f.fj);
              list.add(element);
            }
          }
        }
        return result;
      },
      drop_7: function (receiver, n) {
        return _.kotlin.dropWhile_7(receiver, _.kotlin.countTo(n));
      },
      dropWhile_7: function (receiver, predicate) {
        return _.kotlin.dropWhileTo_7(receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_7: function (receiver, result, predicate) {
        var start = true;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (start && predicate.call(this, element)) {
              }
               else {
                start = false;
                result.add(element);
              }
            }
          }
        }
        return result;
      },
      take_7: function (receiver, n) {
        return _.kotlin.takeWhile_7(receiver, _.kotlin.countTo(n));
      },
      takeWhile_7: function (receiver, predicate) {
        return _.kotlin.takeWhileTo_7(receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_7: function (receiver, result, predicate) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            if (predicate.call(this, element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_7: function (receiver, result) {
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            result.add(element);
          }
        }
        return result;
      },
      reverse_7: function (receiver) {
        var list = _.kotlin.toCollection_7(receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_7: function (receiver) {
        return _.kotlin.toCollection_7(receiver, new Kotlin.LinkedList());
      },
      toList_7: function (receiver) {
        return _.kotlin.toCollection_7(receiver, new Kotlin.ArrayList(0));
      },
      toSet_7: function (receiver) {
        return _.kotlin.toCollection_7(receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_7: function (receiver) {
        return _.kotlin.toCollection_7(receiver, new Kotlin.TreeSet());
      },
      plus_23: function (receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_7(receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_24: function (receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_7(receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_25: function (receiver, collection) {
        return _.kotlin.plus_24(receiver, collection.iterator());
      },
      withIndices_7: function (receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
      },
      sortBy_7: function (receiver, f) {
        var sortedList = _.kotlin.toCollection_7(receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(Kotlin.b2(_f.fk, this, [f]));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_7: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        var tmp$0, tmp$1, tmp$2;
        {
          tmp$0 = receiver, tmp$1 = tmp$0.length;
          for (var tmp$2 = 0; tmp$2 !== tmp$1; ++tmp$2) {
            var element = tmp$0[tmp$2];
            {
              if (++count > 1)
                buffer.append(separator);
              if (limit < 0 || count <= limit) {
                var text = element == null ? 'null' : element.toString();
                buffer.append(text);
              }
               else
                break;
            }
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_7: function (receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_7(receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      trim: function (receiver, text) {
        return _.kotlin.trimTrailing(_.kotlin.trimLeading(receiver, text), text);
      },
      trim_0: function (receiver, prefix, postfix) {
        return _.kotlin.trimTrailing(_.kotlin.trimLeading(receiver, prefix), postfix);
      },
      trimLeading: function (receiver, prefix) {
        var answer = receiver;
        if (_.js.startsWith(answer, prefix)) {
          answer = answer.substring(_.js.length(prefix));
        }
        return answer;
      },
      trimTrailing: function (receiver, postfix) {
        var answer = receiver;
        if (_.js.endsWith_0(answer, postfix)) {
          answer = answer.substring(0, _.js.length(receiver) - _.js.length(postfix));
        }
        return answer;
      },
      notEmpty: function (receiver) {
        return receiver != null && _.js.length(receiver) > 0;
      },
      iterator_1: function (receiver) {
        return Kotlin.createObject(_.jet.CharIterator, {
          initialize: function () {
            this.super_init();
            this.$index = 0;
          },
          get_index: function () {
            return this.$index;
          },
          set_index: function (tmp$0) {
            this.$index = tmp$0;
          },
          nextChar: function () {
            var tmp$0, tmp$1;
            return receiver.get((tmp$0 = this.get_index(), tmp$1 = tmp$0, this.set_index(tmp$0 + 1), tmp$1));
          },
          hasNext: function () {
            return this.get_index() < receiver.length;
          }
        });
      },
      orEmpty_3: function (receiver) {
        return receiver !== null ? receiver : '';
      },
      get_size_1: function (receiver) {
        return receiver.length;
      },
      count_9: function (receiver, predicate) {
        var answer = 0;
        {
          var tmp$0 = _.kotlin.iterator_1(receiver);
          while (tmp$0.hasNext()) {
            var c = tmp$0.next();
            if (predicate.call(this, c)) {
              answer++;
            }
          }
        }
        return answer;
      },
      all_8: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              return false;
          }
        }
        return true;
      },
      any_8: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return true;
          }
        }
        return false;
      },
      count_10: function (receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              count++;
          }
        }
        return count;
      },
      find_8: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return element;
          }
        }
        return null;
      },
      filter_8: function (receiver, predicate) {
        return _.kotlin.filterTo_8(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_8: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_8: function (receiver, predicate) {
        return _.kotlin.filterNotTo_8(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_8: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      partition_8: function (receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_10: function (receiver, transform) {
        return _.kotlin.mapTo_9(receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_9: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform.call(this, item));
          }
        }
        return result;
      },
      flatMap_8: function (receiver, transform) {
        return _.kotlin.flatMapTo_8(receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_8: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform.call(this, element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_8: function (receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation.call(this, element);
          }
        }
      },
      fold_8: function (receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation.call(this, answer, element);
          }
        }
        return answer;
      },
      foldRight_6: function (receiver, initial, operation) {
        var r = initial;
        var index = receiver.length - 1;
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      reduce_8: function (receiver, operation) {
        var iterator = Kotlin.arrayIterator(receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation.call(this, result, iterator.next());
        }
        return result;
      },
      reduceRight_6: function (receiver, operation) {
        var index = receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = receiver[index--];
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      groupBy_8: function (receiver, toKey) {
        return _.kotlin.groupByTo_8(receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      groupByTo_8: function (receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey.call(this, element);
            var list = _.kotlin.getOrPut(result, key, _f.fs);
            list.add(element);
          }
        }
        return result;
      },
      drop_8: function (receiver, n) {
        return _.kotlin.dropWhile_8(receiver, _.kotlin.countTo(n));
      },
      dropWhile_8: function (receiver, predicate) {
        return _.kotlin.dropWhileTo_8(receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_8: function (receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate.call(this, element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_8: function (receiver, n) {
        return _.kotlin.takeWhile_8(receiver, _.kotlin.countTo(n));
      },
      takeWhile_8: function (receiver, predicate) {
        return _.kotlin.takeWhileTo_8(receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_8: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_8: function (receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_8: function (receiver) {
        var list = _.kotlin.toCollection_8(receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_8: function (receiver) {
        return _.kotlin.toCollection_8(receiver, new Kotlin.LinkedList());
      },
      toList_8: function (receiver) {
        return _.kotlin.toCollection_8(receiver, new Kotlin.ArrayList(0));
      },
      toSet_8: function (receiver) {
        return _.kotlin.toCollection_8(receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_8: function (receiver) {
        return _.kotlin.toCollection_8(receiver, new Kotlin.TreeSet());
      },
      plus_26: function (receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_8(receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_27: function (receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_8(receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_28: function (receiver, collection) {
        return _.kotlin.plus_27(receiver, collection.iterator());
      },
      withIndices_8: function (receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
      },
      sortBy_8: function (receiver, f) {
        var sortedList = _.kotlin.toCollection_8(receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(Kotlin.b2(_f.ft, this, [f]));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_8: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : element.toString();
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_8: function (receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_8(receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      all_9: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              return false;
          }
        }
        return true;
      },
      any_9: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return true;
          }
        }
        return false;
      },
      count_11: function (receiver, predicate) {
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              count++;
          }
        }
        return count;
      },
      find_9: function (receiver, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              return element;
          }
        }
        return null;
      },
      filter_9: function (receiver, predicate) {
        return _.kotlin.filterTo_9(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterTo_9: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      filterNot_9: function (receiver, predicate) {
        return _.kotlin.filterNotTo_9(receiver, new Kotlin.ArrayList(0), predicate);
      },
      filterNotTo_9: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (!predicate.call(this, element))
              result.add(element);
          }
        }
        return result;
      },
      partition_9: function (receiver, predicate) {
        var first = new Kotlin.ArrayList(0);
        var second = new Kotlin.ArrayList(0);
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element)) {
              first.add(element);
            }
             else {
              second.add(element);
            }
          }
        }
        return new _.kotlin.Pair(first, second);
      },
      map_11: function (receiver, transform) {
        return _.kotlin.mapTo_10(receiver, new Kotlin.ArrayList(0), transform);
      },
      mapTo_10: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var item = tmp$0.next();
            result.add(transform.call(this, item));
          }
        }
        return result;
      },
      flatMap_9: function (receiver, transform) {
        return _.kotlin.flatMapTo_9(receiver, new Kotlin.ArrayList(0), transform);
      },
      flatMapTo_9: function (receiver, result, transform) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var list = transform.call(this, element);
            {
              var tmp$1 = list.iterator();
              while (tmp$1.hasNext()) {
                var r = tmp$1.next();
                result.add(r);
              }
            }
          }
        }
        return result;
      },
      forEach_9: function (receiver, operation) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            operation.call(this, element);
          }
        }
      },
      fold_9: function (receiver, initial, operation) {
        var answer = initial;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer = operation.call(this, answer, element);
          }
        }
        return answer;
      },
      foldRight_7: function (receiver, initial, operation) {
        var r = initial;
        var index = receiver.length - 1;
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      reduce_9: function (receiver, operation) {
        var iterator = Kotlin.arrayIterator(receiver);
        if (!iterator.hasNext()) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var result = iterator.next();
        while (iterator.hasNext()) {
          result = operation.call(this, result, iterator.next());
        }
        return result;
      },
      reduceRight_7: function (receiver, operation) {
        var index = receiver.length - 1;
        if (index < 0) {
          throw new Kotlin.UnsupportedOperationException("Empty iterable can't be reduced");
        }
        var r = receiver[index--];
        while (index >= 0) {
          r = operation.call(this, receiver[index--], r);
        }
        return r;
      },
      groupBy_9: function (receiver, toKey) {
        return _.kotlin.groupByTo_9(receiver, new Kotlin.ComplexHashMap(0), toKey);
      },
      groupByTo_9: function (receiver, result, toKey) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            var key = toKey.call(this, element);
            var list = _.kotlin.getOrPut(result, key, _f.fu);
            list.add(element);
          }
        }
        return result;
      },
      drop_9: function (receiver, n) {
        return _.kotlin.dropWhile_9(receiver, _.kotlin.countTo(n));
      },
      dropWhile_9: function (receiver, predicate) {
        return _.kotlin.dropWhileTo_9(receiver, new Kotlin.ArrayList(0), predicate);
      },
      dropWhileTo_9: function (receiver, result, predicate) {
        var start = true;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (start && predicate.call(this, element)) {
            }
             else {
              start = false;
              result.add(element);
            }
          }
        }
        return result;
      },
      take_9: function (receiver, n) {
        return _.kotlin.takeWhile_9(receiver, _.kotlin.countTo(n));
      },
      takeWhile_9: function (receiver, predicate) {
        return _.kotlin.takeWhileTo_9(receiver, new Kotlin.ArrayList(0), predicate);
      },
      takeWhileTo_9: function (receiver, result, predicate) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (predicate.call(this, element))
              result.add(element);
            else
              break;
          }
        }
        return result;
      },
      toCollection_9: function (receiver, result) {
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            result.add(element);
          }
        }
        return result;
      },
      reverse_9: function (receiver) {
        var list = _.kotlin.toCollection_9(receiver, new Kotlin.ArrayList(0));
        Kotlin.reverse(list);
        return list;
      },
      toLinkedList_9: function (receiver) {
        return _.kotlin.toCollection_9(receiver, new Kotlin.LinkedList());
      },
      toList_9: function (receiver) {
        return _.kotlin.toCollection_9(receiver, new Kotlin.ArrayList(0));
      },
      toSet_9: function (receiver) {
        return _.kotlin.toCollection_9(receiver, new Kotlin.LinkedHashSet());
      },
      toSortedSet_9: function (receiver) {
        return _.kotlin.toCollection_9(receiver, new Kotlin.TreeSet());
      },
      plus_29: function (receiver, element) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_9(receiver, answer);
        answer.add(element);
        return answer;
      },
      plus_30: function (receiver, iterator) {
        var answer = new Kotlin.ArrayList(0);
        _.kotlin.toCollection_9(receiver, answer);
        {
          var tmp$0 = iterator;
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            answer.add(element);
          }
        }
        return answer;
      },
      plus_31: function (receiver, collection) {
        return _.kotlin.plus_30(receiver, collection.iterator());
      },
      withIndices_9: function (receiver) {
        return new _.kotlin.IndexIterator(Kotlin.arrayIterator(receiver));
      },
      sortBy_9: function (receiver, f) {
        var sortedList = _.kotlin.toCollection_9(receiver, new Kotlin.ArrayList(0));
        var sortBy = Kotlin.comparator(Kotlin.b2(_f.fv, this, [f]));
        Kotlin.collectionsSort(sortedList, sortBy);
        return sortedList;
      },
      appendString_9: function (receiver, buffer, separator, prefix, postfix, limit, truncated) {
        buffer.append(prefix);
        var count = 0;
        {
          var tmp$0 = Kotlin.arrayIterator(receiver);
          while (tmp$0.hasNext()) {
            var element = tmp$0.next();
            if (++count > 1)
              buffer.append(separator);
            if (limit < 0 || count <= limit) {
              var text = element == null ? 'null' : element.toString();
              buffer.append(text);
            }
             else
              break;
          }
        }
        if (limit >= 0 && count > limit)
          buffer.append(truncated);
        buffer.append(postfix);
      },
      makeString_9: function (receiver, separator, prefix, postfix, limit, truncated) {
        var buffer = new Kotlin.StringBuilder();
        _.kotlin.appendString_9(receiver, buffer, separator, prefix, postfix, limit, truncated);
        return buffer.toString();
      },
      test: Kotlin.definePackage({
        todo: function (block) {
          Kotlin.println('TODO at ' + block);
        },
        get_asserter: function () {
          return this.$asserter;
        },
        set_asserter: function (tmp$0) {
          this.$asserter = tmp$0;
        },
        QUnitAsserter: Kotlin.createClass(classes.c1k, {
          initialize: function () {
          },
          assertTrue: function (message, actual) {
            ok(actual, message);
          },
          assertEquals: function (message, expected, actual) {
            ok(Kotlin.equals(expected, actual), message + '. Expected <' + expected.toString() + '> actual <' + actual.toString() + '>');
          },
          assertNotNull: function (message, actual) {
            ok(actual != null, message);
          },
          assertNull: function (message, actual) {
            ok(actual == null, message);
          },
          fail: function (message) {
            ok(false, message);
          }
        }),
        assertTrue: function (message, block) {
          var actual = block();
          _.kotlin.test.get_asserter().assertTrue(message, actual);
        },
        assertTrue_0: function (block) {
          _.kotlin.test.assertTrue(block.toString(), block);
        },
        assertNot: function (message, block) {
          _.kotlin.test.assertTrue(message, Kotlin.b0(_f.fl, null, block));
        },
        assertNot_0: function (block) {
          _.kotlin.test.assertNot(block.toString(), block);
        },
        assertTrue_1: function (actual, message) {
          return _.kotlin.test.assertEquals(true, actual, message);
        },
        assertFalse: function (actual, message) {
          return _.kotlin.test.assertEquals(false, actual, message);
        },
        assertEquals: function (expected, actual, message) {
          _.kotlin.test.get_asserter().assertEquals(message, expected, actual);
        },
        assertNotNull: function (actual, message) {
          _.kotlin.test.get_asserter().assertNotNull(message, actual);
          var tmp$0;
          return (tmp$0 = actual) != null ? tmp$0 : Kotlin.throwNPE();
        },
        assertNotNull_0: function (actual, message, block) {
          _.kotlin.test.get_asserter().assertNotNull(message, actual);
          if (actual != null) {
            block(actual);
          }
        },
        assertNull: function (actual, message) {
          _.kotlin.test.get_asserter().assertNull(message, actual);
        },
        fail: function (message) {
          _.kotlin.test.get_asserter().fail(message);
        },
        expect: function (expected, block) {
          _.kotlin.test.expect_0(expected, block.toString(), block);
        },
        expect_0: function (expected, message, block) {
          var actual = block();
          _.kotlin.test.assertEquals(expected, actual, message);
        },
        fails: function (block) {
          try {
            block();
            _.kotlin.test.get_asserter().fail('Expected an exception to be thrown');
            return null;
          }
           catch (e) {
            return e;
          }
        },
        Asserter: classes.c1k
      }),
      dom: Kotlin.definePackage({
        createDocument: function () {
          return document.implementation.createDocument(null, null, null);
        },
        toXmlString: function (receiver) {
          return receiver.outerHTML;
        },
        toXmlString_0: function (receiver, xmlDeclaration) {
          return receiver.outerHTML;
        },
        eventHandler: function (handler) {
          return new _.kotlin.dom.EventListenerHandler(handler);
        },
        EventListenerHandler: Kotlin.createClass(classes.c1i, {
          initialize: function (handler) {
            this.$handler = handler;
          },
          get_handler: function () {
            return this.$handler;
          },
          handleEvent: function (e) {
            if (e != null) {
              this.get_handler()(e);
            }
          }
        }),
        mouseEventHandler: function (handler) {
          return _.kotlin.dom.eventHandler(Kotlin.b2(_f.f6, null, [handler]));
        },
        on: function (receiver, name, capture, handler) {
          return _.kotlin.dom.on_0(receiver, name, capture, _.kotlin.dom.eventHandler(handler));
        },
        on_0: function (receiver, name, capture, listener) {
          var tmp$0;
          if (Kotlin.isType(receiver, EventTarget)) {
            this.addEventListener(name, listener, capture);
            tmp$0 = new _.kotlin.dom.CloseableEventListener(receiver, listener, name, capture);
          }
           else {
            tmp$0 = null;
          }
          return tmp$0;
        },
        CloseableEventListener: Kotlin.createClass(Kotlin.Closeable, {
          initialize: function (target, listener, name, capture) {
            this.$target = target;
            this.$listener = listener;
            this.$name = name;
            this.$capture = capture;
          },
          get_target: function () {
            return this.$target;
          },
          get_listener: function () {
            return this.$listener;
          },
          get_name: function () {
            return this.$name;
          },
          get_capture: function () {
            return this.$capture;
          },
          close: function () {
            this.get_target().removeEventListener(this.get_name(), this.get_listener(), this.get_capture());
          }
        }),
        onClick: function (receiver, capture, handler) {
          return _.kotlin.dom.on_0(receiver, 'click', capture, _.kotlin.dom.mouseEventHandler(handler));
        },
        onDoubleClick: function (receiver, capture, handler) {
          return _.kotlin.dom.on_0(receiver, 'dblclick', capture, _.kotlin.dom.mouseEventHandler(handler));
        },
        emptyElementList: function () {
          return Kotlin.emptyList();
        },
        emptyNodeList: function () {
          return Kotlin.emptyList();
        },
        get_text: function (receiver) {
          return receiver.textContent;
        },
        set_text: function (receiver, value) {
          receiver.textContent = value;
        },
        get_childrenText: function (receiver) {
          var buffer = new Kotlin.StringBuilder();
          var nodeList = receiver.childNodes;
          var i = 0;
          var size = nodeList.length;
          while (i < size) {
            var node = nodeList.item(i);
            if (node != null) {
              if (_.kotlin.dom.isText(node)) {
                buffer.append(node.nodeValue);
              }
            }
            i++;
          }
          return buffer.toString();
        },
        set_childrenText: function (receiver, value) {
          var element = receiver;
          {
            var tmp$0 = _.kotlin.dom.children(element).iterator();
            while (tmp$0.hasNext()) {
              var node = tmp$0.next();
              if (_.kotlin.dom.isText(node)) {
                receiver.removeChild(node);
              }
            }
          }
          _.kotlin.dom.addText(element, value, null);
        },
        get_id: function (receiver) {
          return receiver.getAttribute('id') !== null ? receiver.getAttribute('id') : '';
        },
        set_id: function (receiver, value) {
          receiver.setAttribute('id', value);
          receiver.setIdAttribute('id', true);
        },
        get_style: function (receiver) {
          return receiver.getAttribute('style') !== null ? receiver.getAttribute('style') : '';
        },
        set_style: function (receiver, value) {
          receiver.setAttribute('style', value);
        },
        get_classes: function (receiver) {
          return receiver.getAttribute('class') !== null ? receiver.getAttribute('class') : '';
        },
        set_classes: function (receiver, value) {
          receiver.setAttribute('class', value);
        },
        hasClass: function (receiver, cssClass) {
          var c = _.kotlin.dom.get_classes(receiver);
          return _.js.matches(c, '(^|.*' + '\\' + 's+)' + cssClass + '(' + '$' + '|' + '\\' + 's+.*)');
        },
        children: function (receiver) {
          var tmp$0;
          return _.kotlin.dom.toList((tmp$0 = receiver) != null ? tmp$0.childNodes : null);
        },
        childElements: function (receiver) {
          return _.kotlin.map_8(_.kotlin.filter_6(_.kotlin.dom.children(receiver), Kotlin.b4(_f.fm, this)), _f.fn);
        },
        childElements_0: function (receiver, name) {
          return _.kotlin.map_8(_.kotlin.filter_6(_.kotlin.dom.children(receiver), Kotlin.b2(_f.fo, this, [name])), _f.fp);
        },
        get_elements: function (receiver) {
          var tmp$0;
          return _.kotlin.dom.toElementList((tmp$0 = receiver) != null ? tmp$0.getElementsByTagName('*') : null);
        },
        get_elements_0: function (receiver) {
          var tmp$0;
          return _.kotlin.dom.toElementList((tmp$0 = receiver) != null ? tmp$0.getElementsByTagName('*') : null);
        },
        elements: function (receiver, localName) {
          var tmp$0;
          return _.kotlin.dom.toElementList((tmp$0 = receiver) != null ? tmp$0.getElementsByTagName(localName) : null);
        },
        elements_0: function (receiver, localName) {
          var tmp$0;
          return _.kotlin.dom.toElementList((tmp$0 = receiver) != null ? tmp$0.getElementsByTagName(localName) : null);
        },
        elements_1: function (receiver, namespaceUri, localName) {
          var tmp$0;
          return _.kotlin.dom.toElementList((tmp$0 = receiver) != null ? tmp$0.getElementsByTagNameNS(namespaceUri, localName) : null);
        },
        elements_2: function (receiver, namespaceUri, localName) {
          var tmp$0;
          return _.kotlin.dom.toElementList((tmp$0 = receiver) != null ? tmp$0.getElementsByTagNameNS(namespaceUri, localName) : null);
        },
        toList: function (receiver) {
          var tmp$0;
          if (receiver == null) {
            tmp$0 = _.kotlin.dom.emptyNodeList();
          }
           else {
            tmp$0 = new _.kotlin.dom.NodeListAsList(receiver);
          }
          return tmp$0;
        },
        toElementList: function (receiver) {
          var tmp$0;
          if (receiver == null) {
            tmp$0 = new Kotlin.ArrayList(0);
          }
           else {
            tmp$0 = new _.kotlin.dom.ElementListAsList(receiver);
          }
          return tmp$0;
        },
        get: function (receiver, selector) {
          var tmp$0, tmp$2;
          var root = (tmp$0 = receiver) != null ? tmp$0.documentElement : null;
          if (root != null) {
            if (Kotlin.equals(selector, '*')) {
              tmp$2 = _.kotlin.dom.get_elements(receiver);
            }
             else if (_.js.startsWith(selector, '.')) {
              tmp$2 = _.kotlin.toList_1(_.kotlin.filter_6(_.kotlin.dom.get_elements(receiver), Kotlin.b2(_f.fq, null, [selector])));
            }
             else if (_.js.startsWith(selector, '#')) {
              var id = selector.substring(1);
              var tmp$1;
              var element = (tmp$1 = receiver) != null ? tmp$1.getElementById(id) : null;
              return element != null ? _.kotlin.arrayList([element]) : _.kotlin.dom.emptyElementList();
            }
             else {
              tmp$2 = _.kotlin.dom.elements_0(receiver, selector);
            }
          }
           else {
            tmp$2 = _.kotlin.dom.emptyElementList();
          }
          return tmp$2;
        },
        get_0: function (receiver, selector) {
          var tmp$1;
          if (Kotlin.equals(selector, '*')) {
            tmp$1 = _.kotlin.dom.get_elements_0(receiver);
          }
           else if (_.js.startsWith(selector, '.')) {
            tmp$1 = _.kotlin.toList_1(_.kotlin.filter_6(_.kotlin.dom.get_elements_0(receiver), Kotlin.b2(_f.fr, null, [selector])));
          }
           else if (_.js.startsWith(selector, '#')) {
            var tmp$0;
            var element = (tmp$0 = receiver.ownerDocument) != null ? tmp$0.getElementById(selector.substring(1)) : null;
            return element != null ? _.kotlin.arrayList([element]) : _.kotlin.dom.emptyElementList();
          }
           else {
            tmp$1 = _.kotlin.dom.elements(receiver, selector);
          }
          return tmp$1;
        },
        NodeListAsList: Kotlin.createClass(Kotlin.AbstractList, {
          initialize: function (nodeList) {
            this.$nodeList = nodeList;
            this.super_init();
          },
          get_nodeList: function () {
            return this.$nodeList;
          },
          get: function (index) {
            var node = this.get_nodeList().item(index);
            if (node == null) {
              throw new Kotlin.IndexOutOfBoundsException('NodeList does not contain a node at index: ' + index);
            }
             else {
              return node;
            }
          },
          size: function () {
            return this.get_nodeList().length;
          }
        }),
        ElementListAsList: Kotlin.createClass(Kotlin.AbstractList, {
          initialize: function (nodeList) {
            this.$nodeList = nodeList;
            this.super_init();
          },
          get_nodeList: function () {
            return this.$nodeList;
          },
          get: function (index) {
            var node = this.get_nodeList().item(index);
            if (node == null) {
              throw new Kotlin.IndexOutOfBoundsException('NodeList does not contain a node at index: ' + index);
            }
             else if (node.nodeType === Node.ELEMENT_NODE) {
              return node;
            }
             else {
              throw new Kotlin.IllegalArgumentException('Node is not an Element as expected but is ' + node.toString());
            }
          },
          size: function () {
            return this.get_nodeList().length;
          }
        }),
        clear: function (receiver) {
          while (true) {
            var child = receiver.firstChild;
            if (child == null) {
              return;
            }
             else {
              receiver.removeChild(child);
            }
          }
        },
        nextSiblings: function (receiver) {
          return new _.kotlin.dom.NextSiblingIterator(receiver);
        },
        NextSiblingIterator: Kotlin.createClass(classes.c1j, {
          initialize: function (node) {
            this.$node = node;
            this.super_init();
          },
          get_node: function () {
            return this.$node;
          },
          set_node: function (tmp$0) {
            this.$node = tmp$0;
          },
          computeNext: function () {
            var nextValue = this.get_node().nextSibling;
            if (nextValue != null) {
              this.setNext(nextValue);
              this.set_node(nextValue);
            }
             else {
              this.done();
            }
          }
        }),
        previousSiblings: function (receiver) {
          return new _.kotlin.dom.PreviousSiblingIterator(receiver);
        },
        PreviousSiblingIterator: Kotlin.createClass(classes.c1j, {
          initialize: function (node) {
            this.$node = node;
            this.super_init();
          },
          get_node: function () {
            return this.$node;
          },
          set_node: function (tmp$0) {
            this.$node = tmp$0;
          },
          computeNext: function () {
            var nextValue = this.get_node().previousSibling;
            if (nextValue != null) {
              this.setNext(nextValue);
              this.set_node(nextValue);
            }
             else {
              this.done();
            }
          }
        }),
        isText: function (receiver) {
          var nt = receiver.nodeType;
          return nt === Node.TEXT_NODE || nt === Node.CDATA_SECTION_NODE;
        },
        attribute: function (receiver, name) {
          return receiver.getAttribute(name) !== null ? receiver.getAttribute(name) : '';
        },
        get_head: function (receiver) {
          return receiver != null && receiver.length > 0 ? receiver.item(0) : null;
        },
        get_first: function (receiver) {
          return _.kotlin.dom.get_head(receiver);
        },
        get_tail: function (receiver) {
          if (receiver == null) {
            return null;
          }
           else {
            var s = receiver.length;
            return s > 0 ? receiver.item(s - 1) : null;
          }
        },
        get_last: function (receiver) {
          return _.kotlin.dom.get_tail(receiver);
        },
        toXmlString_1: function (receiver, xmlDeclaration) {
          var tmp$0;
          if (receiver == null)
            tmp$0 = '';
          else {
            tmp$0 = _.kotlin.dom.nodesToXmlString(_.kotlin.dom.toList(receiver), xmlDeclaration);
          }
          return tmp$0;
        },
        nodesToXmlString: function (nodes, xmlDeclaration) {
          var builder = new Kotlin.StringBuilder();
          {
            var tmp$0 = nodes.iterator();
            while (tmp$0.hasNext()) {
              var n = tmp$0.next();
              builder.append(_.kotlin.dom.toXmlString_0(n, xmlDeclaration));
            }
          }
          return builder.toString();
        },
        plus: function (receiver, child) {
          if (child != null) {
            receiver.appendChild(child);
          }
          return receiver;
        },
        plus_0: function (receiver, text) {
          return _.kotlin.dom.addText(receiver, text, null);
        },
        plusAssign: function (receiver, text) {
          return _.kotlin.dom.addText(receiver, text, null);
        },
        createElement: function (receiver, name, init) {
          var tmp$0;
          var elem = (tmp$0 = receiver.createElement(name)) != null ? tmp$0 : Kotlin.throwNPE();
          init.call(elem);
          return elem;
        },
        createElement_0: function (receiver, name, doc, init) {
          var tmp$0;
          var elem = (tmp$0 = _.kotlin.dom.ownerDocument(receiver, doc).createElement(name)) != null ? tmp$0 : Kotlin.throwNPE();
          init.call(elem);
          return elem;
        },
        ownerDocument: function (receiver, doc) {
          var tmp$0;
          if (receiver.nodeType === Node.DOCUMENT_NODE)
            tmp$0 = receiver;
          else if (doc == null)
            tmp$0 = receiver.ownerDocument;
          else
            tmp$0 = doc;
          var answer = tmp$0;
          if (answer == null) {
            throw new Kotlin.IllegalArgumentException('Element does not have an ownerDocument and none was provided for: ' + receiver.toString());
          }
           else {
            return answer;
          }
        },
        addElement: function (receiver, name, init) {
          var child = _.kotlin.dom.createElement(receiver, name, init);
          receiver.appendChild(child);
          return child;
        },
        addElement_0: function (receiver, name, doc, init) {
          var child = _.kotlin.dom.createElement_0(receiver, name, doc, init);
          receiver.appendChild(child);
          return child;
        },
        addText: function (receiver, text, doc) {
          if (text != null) {
            var tmp$0;
            var child = (tmp$0 = _.kotlin.dom.ownerDocument(receiver, doc).createTextNode(text)) != null ? tmp$0 : Kotlin.throwNPE();
            receiver.appendChild(child);
          }
          return receiver;
        }
      }),
      support: Kotlin.definePackage({
        AbstractIterator: classes.c1j
      })
    })
  };
  (function () {
    this.ElementAttributeType = Kotlin.createObject({
      initialize: function () {
        this.$ATTRIBUTE = 0;
        this.$REFERENCE = 1;
        this.$CONTAINMENT = 2;
      },
      get_ATTRIBUTE: function () {
        return this.$ATTRIBUTE;
      },
      get_REFERENCE: function () {
        return this.$REFERENCE;
      },
      get_CONTAINMENT: function () {
        return this.$CONTAINMENT;
      }
    });
    this.ActionType = Kotlin.createObject({
      initialize: function () {
        this.$SET = 0;
        this.$ADD = 1;
        this.$REMOVE = 2;
        this.$ADD_ALL = 3;
        this.$REMOVE_ALL = 4;
        this.$RENEW_INDEX = 5;
      },
      get_SET: function () {
        return this.$SET;
      },
      get_ADD: function () {
        return this.$ADD;
      },
      get_REMOVE: function () {
        return this.$REMOVE;
      },
      get_ADD_ALL: function () {
        return this.$ADD_ALL;
      },
      get_REMOVE_ALL: function () {
        return this.$REMOVE_ALL;
      },
      get_RENEW_INDEX: function () {
        return this.$RENEW_INDEX;
      }
    });
  }.call(_.org.kevoree.modeling.api.util));
  (function () {
    this.Constants = Kotlin.createObject({
      initialize: function () {
        this.$UNKNOWN_MUTATION_TYPE_EXCEPTION = 'Unknown mutation type: ';
        this.$READ_ONLY_EXCEPTION = 'This model is ReadOnly. Elements are not modifiable.';
        this.$LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION = 'The list in parameter of the setter cannot be null. Use removeAll to empty a collection.';
        this.$LOADER_XMI_LOCAL_NAME = 'type';
        this.$LOADER_XMI_XSI = 'xsi';
        this.$KMFQL_CONTAINED = 'contained';
        this.$org_kevoree_Instance = 'org.kevoree.Instance';
        this.$Ref_superTypes = 'superTypes';
        this.$Ref_ports = 'ports';
        this.$Att_started = 'started';
        this.$org_kevoree_NodeNetwork = 'org.kevoree.NodeNetwork';
        this.$org_kevoree_TypedElement = 'org.kevoree.TypedElement';
        this.$Ref_hub = 'hub';
        this.$Ref_defaultValues = 'defaultValues';
        this.$Ref_dataTypes = 'dataTypes';
        this.$Att_factoryBean = 'factoryBean';
        this.$Ref_port = 'port';
        this.$Ref_returnType = 'returnType';
        this.$CN_AdaptationPrimitiveType = 'AdaptationPrimitiveType';
        this.$CN_Dictionary = 'Dictionary';
        this.$Ref_portTypeRef = 'portTypeRef';
        this.$CN_ContainerRoot = 'ContainerRoot';
        this.$CN_Operation = 'Operation';
        this.$CN_PortType = 'PortType';
        this.$Att_networkType = 'networkType';
        this.$Ref_values = 'values';
        this.$Ref_initBy = 'initBy';
        this.$Ref_link = 'link';
        this.$org_kevoree_ContainerRoot = 'org.kevoree.ContainerRoot';
        this.$CN_Group = 'Group';
        this.$Ref_hosts = 'hosts';
        this.$Att_interface = 'interface';
        this.$org_kevoree_MBinding = 'org.kevoree.MBinding';
        this.$Ref_subTypes = 'subTypes';
        this.$Ref_groups = 'groups';
        this.$org_kevoree_Group = 'org.kevoree.Group';
        this.$Att_type = 'type';
        this.$CN_TypedElement = 'TypedElement';
        this.$Ref_dictionary = 'dictionary';
        this.$Att_updateMethod = 'updateMethod';
        this.$Ref_integrationPatterns = 'integrationPatterns';
        this.$org_kevoree_DeployUnit = 'org.kevoree.DeployUnit';
        this.$Att_unitName = 'unitName';
        this.$Ref_hubs = 'hubs';
        this.$Ref_parent = 'parent';
        this.$Ref_mappings = 'mappings';
        this.$Ref_attributes = 'attributes';
        this.$Att_hashcode = 'hashcode';
        this.$Att_lowerFragments = 'lowerFragments';
        this.$Ref_targetNodeType = 'targetNodeType';
        this.$Att_datatype = 'datatype';
        this.$Ref_type = 'type';
        this.$org_kevoree_LifeCycleTypeDefinition = 'org.kevoree.LifeCycleTypeDefinition';
        this.$Att_abstract = 'abstract';
        this.$org_kevoree_AdaptationPrimitiveType = 'org.kevoree.AdaptationPrimitiveType';
        this.$Att_version = 'version';
        this.$CN_Namespace = 'Namespace';
        this.$org_kevoree_ContainerNode = 'org.kevoree.ContainerNode';
        this.$Ref_components = 'components';
        this.$org_kevoree_AdaptationPrimitiveTypeRef = 'org.kevoree.AdaptationPrimitiveTypeRef';
        this.$Att_stopMethod = 'stopMethod';
        this.$CN_ExtraFonctionalProperty = 'ExtraFonctionalProperty';
        this.$Ref_childs = 'childs';
        this.$CN_ChannelType = 'ChannelType';
        this.$CN_GroupType = 'GroupType';
        this.$Ref_typeDefinitions = 'typeDefinitions';
        this.$Ref_genericTypes = 'genericTypes';
        this.$CN_CompositeType = 'CompositeType';
        this.$Ref_requiredLibs = 'requiredLibs';
        this.$CN_PortTypeRef = 'PortTypeRef';
        this.$Att_maxTime = 'maxTime';
        this.$org_kevoree_DictionaryValue = 'org.kevoree.DictionaryValue';
        this.$Ref_units = 'units';
        this.$CN_DeployUnit = 'DeployUnit';
        this.$org_kevoree_NodeLink = 'org.kevoree.NodeLink';
        this.$org_kevoree_Parameter = 'org.kevoree.Parameter';
        this.$org_kevoree_Repository = 'org.kevoree.Repository';
        this.$CN_NamedElement = 'NamedElement';
        this.$Att_serviceMethodName = 'serviceMethodName';
        this.$CN_Instance = 'Instance';
        this.$Ref_networkProperties = 'networkProperties';
        this.$CN_AdaptationPrimitiveTypeRef = 'AdaptationPrimitiveTypeRef';
        this.$Att_name = 'name';
        this.$CN_Repository = 'Repository';
        this.$CN_ComponentType = 'ComponentType';
        this.$Att_order = 'order';
        this.$Att_startMethod = 'startMethod';
        this.$Att_lowerBindings = 'lowerBindings';
        this.$org_kevoree_CompositeType = 'org.kevoree.CompositeType';
        this.$org_kevoree_GroupType = 'org.kevoree.GroupType';
        this.$org_kevoree_Operation = 'org.kevoree.Operation';
        this.$CN_Port = 'Port';
        this.$Att_optional = 'optional';
        this.$Ref_targetNode = 'targetNode';
        this.$Ref_attribute = 'attribute';
        this.$Att_metaData = 'metaData';
        this.$Att_beanMethodName = 'beanMethodName';
        this.$org_kevoree_TypeDefinition = 'org.kevoree.TypeDefinition';
        this.$Ref_target = 'target';
        this.$org_kevoree_TypeLibrary = 'org.kevoree.TypeLibrary';
        this.$Att_paramTypes = 'paramTypes';
        this.$CN_MBinding = 'MBinding';
        this.$Att_noDependency = 'noDependency';
        this.$CN_NodeLink = 'NodeLink';
        this.$CN_PortTypeMapping = 'PortTypeMapping';
        this.$Ref_provided = 'provided';
        this.$org_kevoree_PortTypeMapping = 'org.kevoree.PortTypeMapping';
        this.$Ref_dictionaryType = 'dictionaryType';
        this.$CN_ComponentInstance = 'ComponentInstance';
        this.$Att_zoneID = 'zoneID';
        this.$Att_upperBindings = 'upperBindings';
        this.$Ref_host = 'host';
        this.$CN_TypeLibrary = 'TypeLibrary';
        this.$Ref_adaptationPrimitiveTypes = 'adaptationPrimitiveTypes';
        this.$Att_url = 'url';
        this.$Ref_namespace = 'namespace';
        this.$org_kevoree_NodeType = 'org.kevoree.NodeType';
        this.$Ref_managedPrimitiveTypes = 'managedPrimitiveTypes';
        this.$CN_LifeCycleTypeDefinition = 'LifeCycleTypeDefinition';
        this.$CN_ServicePortType = 'ServicePortType';
        this.$CN_NodeNetwork = 'NodeNetwork';
        this.$Att_state = 'state';
        this.$Att_fragmentDependant = 'fragmentDependant';
        this.$org_kevoree_ServicePortType = 'org.kevoree.ServicePortType';
        this.$org_kevoree_PortType = 'org.kevoree.PortType';
        this.$CN_MessagePortType = 'MessagePortType';
        this.$Ref_operations = 'operations';
        this.$CN_DictionaryAttribute = 'DictionaryAttribute';
        this.$Att_generated_KMF_ID = 'generated_KMF_ID';
        this.$org_kevoree_NamedElement = 'org.kevoree.NamedElement';
        this.$CN_TypeDefinition = 'TypeDefinition';
        this.$org_kevoree_ComponentType = 'org.kevoree.ComponentType';
        this.$Ref_mBindings = 'mBindings';
        this.$Ref_subNodes = 'subNodes';
        this.$Ref_nodes = 'nodes';
        this.$org_kevoree_ChannelType = 'org.kevoree.ChannelType';
        this.$Ref_nodeNetworks = 'nodeNetworks';
        this.$Ref_parameters = 'parameters';
        this.$Ref_portTypes = 'portTypes';
        this.$Att_estimatedRate = 'estimatedRate';
        this.$Att_value = 'value';
        this.$org_kevoree_NetworkProperty = 'org.kevoree.NetworkProperty';
        this.$org_kevoree_Port = 'org.kevoree.Port';
        this.$Ref_managedPrimitiveTypeRefs = 'managedPrimitiveTypeRefs';
        this.$org_kevoree_ComponentInstance = 'org.kevoree.ComponentInstance';
        this.$org_kevoree_IntegrationPattern = 'org.kevoree.IntegrationPattern';
        this.$org_kevoree_DictionaryAttribute = 'org.kevoree.DictionaryAttribute';
        this.$Ref_wires = 'wires';
        this.$org_kevoree_Namespace = 'org.kevoree.Namespace';
        this.$Ref_typeDefinition = 'typeDefinition';
        this.$org_kevoree_Channel = 'org.kevoree.Channel';
        this.$Ref_deployUnits = 'deployUnits';
        this.$org_kevoree_Wire = 'org.kevoree.Wire';
        this.$org_kevoree_Dictionary = 'org.kevoree.Dictionary';
        this.$Att_synchrone = 'synchrone';
        this.$CN_Wire = 'Wire';
        this.$Ref_repositories = 'repositories';
        this.$Ref_required = 'required';
        this.$org_kevoree_ExtraFonctionalProperty = 'org.kevoree.ExtraFonctionalProperty';
        this.$Att_lastCheck = 'lastCheck';
        this.$Ref_libraries = 'libraries';
        this.$Att_upperFragments = 'upperFragments';
        this.$CN_IntegrationPattern = 'IntegrationPattern';
        this.$CN_ContainerNode = 'ContainerNode';
        this.$Att_groupName = 'groupName';
        this.$CN_Parameter = 'Parameter';
        this.$CN_DictionaryValue = 'DictionaryValue';
        this.$org_kevoree_PortTypeRef = 'org.kevoree.PortTypeRef';
        this.$Ref_filters = 'filters';
        this.$CN_NetworkProperty = 'NetworkProperty';
        this.$org_kevoree_DictionaryType = 'org.kevoree.DictionaryType';
        this.$CN_NodeType = 'NodeType';
        this.$Att_bean = 'bean';
        this.$CN_Channel = 'Channel';
        this.$Ref_bindings = 'bindings';
        this.$Ref_ref = 'ref';
        this.$CN_DictionaryType = 'DictionaryType';
        this.$Ref_extraFonctionalProperties = 'extraFonctionalProperties';
        this.$org_kevoree_MessagePortType = 'org.kevoree.MessagePortType';
      },
      get_UNKNOWN_MUTATION_TYPE_EXCEPTION: function () {
        return this.$UNKNOWN_MUTATION_TYPE_EXCEPTION;
      },
      get_READ_ONLY_EXCEPTION: function () {
        return this.$READ_ONLY_EXCEPTION;
      },
      get_LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION: function () {
        return this.$LIST_PARAMETER_OF_SET_IS_NULL_EXCEPTION;
      },
      get_LOADER_XMI_LOCAL_NAME: function () {
        return this.$LOADER_XMI_LOCAL_NAME;
      },
      get_LOADER_XMI_XSI: function () {
        return this.$LOADER_XMI_XSI;
      },
      get_KMFQL_CONTAINED: function () {
        return this.$KMFQL_CONTAINED;
      },
      get_org_kevoree_Instance: function () {
        return this.$org_kevoree_Instance;
      },
      get_Ref_superTypes: function () {
        return this.$Ref_superTypes;
      },
      get_Ref_ports: function () {
        return this.$Ref_ports;
      },
      get_Att_started: function () {
        return this.$Att_started;
      },
      get_org_kevoree_NodeNetwork: function () {
        return this.$org_kevoree_NodeNetwork;
      },
      get_org_kevoree_TypedElement: function () {
        return this.$org_kevoree_TypedElement;
      },
      get_Ref_hub: function () {
        return this.$Ref_hub;
      },
      get_Ref_defaultValues: function () {
        return this.$Ref_defaultValues;
      },
      get_Ref_dataTypes: function () {
        return this.$Ref_dataTypes;
      },
      get_Att_factoryBean: function () {
        return this.$Att_factoryBean;
      },
      get_Ref_port: function () {
        return this.$Ref_port;
      },
      get_Ref_returnType: function () {
        return this.$Ref_returnType;
      },
      get_CN_AdaptationPrimitiveType: function () {
        return this.$CN_AdaptationPrimitiveType;
      },
      get_CN_Dictionary: function () {
        return this.$CN_Dictionary;
      },
      get_Ref_portTypeRef: function () {
        return this.$Ref_portTypeRef;
      },
      get_CN_ContainerRoot: function () {
        return this.$CN_ContainerRoot;
      },
      get_CN_Operation: function () {
        return this.$CN_Operation;
      },
      get_CN_PortType: function () {
        return this.$CN_PortType;
      },
      get_Att_networkType: function () {
        return this.$Att_networkType;
      },
      get_Ref_values: function () {
        return this.$Ref_values;
      },
      get_Ref_initBy: function () {
        return this.$Ref_initBy;
      },
      get_Ref_link: function () {
        return this.$Ref_link;
      },
      get_org_kevoree_ContainerRoot: function () {
        return this.$org_kevoree_ContainerRoot;
      },
      get_CN_Group: function () {
        return this.$CN_Group;
      },
      get_Ref_hosts: function () {
        return this.$Ref_hosts;
      },
      get_Att_interface: function () {
        return this.$Att_interface;
      },
      get_org_kevoree_MBinding: function () {
        return this.$org_kevoree_MBinding;
      },
      get_Ref_subTypes: function () {
        return this.$Ref_subTypes;
      },
      get_Ref_groups: function () {
        return this.$Ref_groups;
      },
      get_org_kevoree_Group: function () {
        return this.$org_kevoree_Group;
      },
      get_Att_type: function () {
        return this.$Att_type;
      },
      get_CN_TypedElement: function () {
        return this.$CN_TypedElement;
      },
      get_Ref_dictionary: function () {
        return this.$Ref_dictionary;
      },
      get_Att_updateMethod: function () {
        return this.$Att_updateMethod;
      },
      get_Ref_integrationPatterns: function () {
        return this.$Ref_integrationPatterns;
      },
      get_org_kevoree_DeployUnit: function () {
        return this.$org_kevoree_DeployUnit;
      },
      get_Att_unitName: function () {
        return this.$Att_unitName;
      },
      get_Ref_hubs: function () {
        return this.$Ref_hubs;
      },
      get_Ref_parent: function () {
        return this.$Ref_parent;
      },
      get_Ref_mappings: function () {
        return this.$Ref_mappings;
      },
      get_Ref_attributes: function () {
        return this.$Ref_attributes;
      },
      get_Att_hashcode: function () {
        return this.$Att_hashcode;
      },
      get_Att_lowerFragments: function () {
        return this.$Att_lowerFragments;
      },
      get_Ref_targetNodeType: function () {
        return this.$Ref_targetNodeType;
      },
      get_Att_datatype: function () {
        return this.$Att_datatype;
      },
      get_Ref_type: function () {
        return this.$Ref_type;
      },
      get_org_kevoree_LifeCycleTypeDefinition: function () {
        return this.$org_kevoree_LifeCycleTypeDefinition;
      },
      get_Att_abstract: function () {
        return this.$Att_abstract;
      },
      get_org_kevoree_AdaptationPrimitiveType: function () {
        return this.$org_kevoree_AdaptationPrimitiveType;
      },
      get_Att_version: function () {
        return this.$Att_version;
      },
      get_CN_Namespace: function () {
        return this.$CN_Namespace;
      },
      get_org_kevoree_ContainerNode: function () {
        return this.$org_kevoree_ContainerNode;
      },
      get_Ref_components: function () {
        return this.$Ref_components;
      },
      get_org_kevoree_AdaptationPrimitiveTypeRef: function () {
        return this.$org_kevoree_AdaptationPrimitiveTypeRef;
      },
      get_Att_stopMethod: function () {
        return this.$Att_stopMethod;
      },
      get_CN_ExtraFonctionalProperty: function () {
        return this.$CN_ExtraFonctionalProperty;
      },
      get_Ref_childs: function () {
        return this.$Ref_childs;
      },
      get_CN_ChannelType: function () {
        return this.$CN_ChannelType;
      },
      get_CN_GroupType: function () {
        return this.$CN_GroupType;
      },
      get_Ref_typeDefinitions: function () {
        return this.$Ref_typeDefinitions;
      },
      get_Ref_genericTypes: function () {
        return this.$Ref_genericTypes;
      },
      get_CN_CompositeType: function () {
        return this.$CN_CompositeType;
      },
      get_Ref_requiredLibs: function () {
        return this.$Ref_requiredLibs;
      },
      get_CN_PortTypeRef: function () {
        return this.$CN_PortTypeRef;
      },
      get_Att_maxTime: function () {
        return this.$Att_maxTime;
      },
      get_org_kevoree_DictionaryValue: function () {
        return this.$org_kevoree_DictionaryValue;
      },
      get_Ref_units: function () {
        return this.$Ref_units;
      },
      get_CN_DeployUnit: function () {
        return this.$CN_DeployUnit;
      },
      get_org_kevoree_NodeLink: function () {
        return this.$org_kevoree_NodeLink;
      },
      get_org_kevoree_Parameter: function () {
        return this.$org_kevoree_Parameter;
      },
      get_org_kevoree_Repository: function () {
        return this.$org_kevoree_Repository;
      },
      get_CN_NamedElement: function () {
        return this.$CN_NamedElement;
      },
      get_Att_serviceMethodName: function () {
        return this.$Att_serviceMethodName;
      },
      get_CN_Instance: function () {
        return this.$CN_Instance;
      },
      get_Ref_networkProperties: function () {
        return this.$Ref_networkProperties;
      },
      get_CN_AdaptationPrimitiveTypeRef: function () {
        return this.$CN_AdaptationPrimitiveTypeRef;
      },
      get_Att_name: function () {
        return this.$Att_name;
      },
      get_CN_Repository: function () {
        return this.$CN_Repository;
      },
      get_CN_ComponentType: function () {
        return this.$CN_ComponentType;
      },
      get_Att_order: function () {
        return this.$Att_order;
      },
      get_Att_startMethod: function () {
        return this.$Att_startMethod;
      },
      get_Att_lowerBindings: function () {
        return this.$Att_lowerBindings;
      },
      get_org_kevoree_CompositeType: function () {
        return this.$org_kevoree_CompositeType;
      },
      get_org_kevoree_GroupType: function () {
        return this.$org_kevoree_GroupType;
      },
      get_org_kevoree_Operation: function () {
        return this.$org_kevoree_Operation;
      },
      get_CN_Port: function () {
        return this.$CN_Port;
      },
      get_Att_optional: function () {
        return this.$Att_optional;
      },
      get_Ref_targetNode: function () {
        return this.$Ref_targetNode;
      },
      get_Ref_attribute: function () {
        return this.$Ref_attribute;
      },
      get_Att_metaData: function () {
        return this.$Att_metaData;
      },
      get_Att_beanMethodName: function () {
        return this.$Att_beanMethodName;
      },
      get_org_kevoree_TypeDefinition: function () {
        return this.$org_kevoree_TypeDefinition;
      },
      get_Ref_target: function () {
        return this.$Ref_target;
      },
      get_org_kevoree_TypeLibrary: function () {
        return this.$org_kevoree_TypeLibrary;
      },
      get_Att_paramTypes: function () {
        return this.$Att_paramTypes;
      },
      get_CN_MBinding: function () {
        return this.$CN_MBinding;
      },
      get_Att_noDependency: function () {
        return this.$Att_noDependency;
      },
      get_CN_NodeLink: function () {
        return this.$CN_NodeLink;
      },
      get_CN_PortTypeMapping: function () {
        return this.$CN_PortTypeMapping;
      },
      get_Ref_provided: function () {
        return this.$Ref_provided;
      },
      get_org_kevoree_PortTypeMapping: function () {
        return this.$org_kevoree_PortTypeMapping;
      },
      get_Ref_dictionaryType: function () {
        return this.$Ref_dictionaryType;
      },
      get_CN_ComponentInstance: function () {
        return this.$CN_ComponentInstance;
      },
      get_Att_zoneID: function () {
        return this.$Att_zoneID;
      },
      get_Att_upperBindings: function () {
        return this.$Att_upperBindings;
      },
      get_Ref_host: function () {
        return this.$Ref_host;
      },
      get_CN_TypeLibrary: function () {
        return this.$CN_TypeLibrary;
      },
      get_Ref_adaptationPrimitiveTypes: function () {
        return this.$Ref_adaptationPrimitiveTypes;
      },
      get_Att_url: function () {
        return this.$Att_url;
      },
      get_Ref_namespace: function () {
        return this.$Ref_namespace;
      },
      get_org_kevoree_NodeType: function () {
        return this.$org_kevoree_NodeType;
      },
      get_Ref_managedPrimitiveTypes: function () {
        return this.$Ref_managedPrimitiveTypes;
      },
      get_CN_LifeCycleTypeDefinition: function () {
        return this.$CN_LifeCycleTypeDefinition;
      },
      get_CN_ServicePortType: function () {
        return this.$CN_ServicePortType;
      },
      get_CN_NodeNetwork: function () {
        return this.$CN_NodeNetwork;
      },
      get_Att_state: function () {
        return this.$Att_state;
      },
      get_Att_fragmentDependant: function () {
        return this.$Att_fragmentDependant;
      },
      get_org_kevoree_ServicePortType: function () {
        return this.$org_kevoree_ServicePortType;
      },
      get_org_kevoree_PortType: function () {
        return this.$org_kevoree_PortType;
      },
      get_CN_MessagePortType: function () {
        return this.$CN_MessagePortType;
      },
      get_Ref_operations: function () {
        return this.$Ref_operations;
      },
      get_CN_DictionaryAttribute: function () {
        return this.$CN_DictionaryAttribute;
      },
      get_Att_generated_KMF_ID: function () {
        return this.$Att_generated_KMF_ID;
      },
      get_org_kevoree_NamedElement: function () {
        return this.$org_kevoree_NamedElement;
      },
      get_CN_TypeDefinition: function () {
        return this.$CN_TypeDefinition;
      },
      get_org_kevoree_ComponentType: function () {
        return this.$org_kevoree_ComponentType;
      },
      get_Ref_mBindings: function () {
        return this.$Ref_mBindings;
      },
      get_Ref_subNodes: function () {
        return this.$Ref_subNodes;
      },
      get_Ref_nodes: function () {
        return this.$Ref_nodes;
      },
      get_org_kevoree_ChannelType: function () {
        return this.$org_kevoree_ChannelType;
      },
      get_Ref_nodeNetworks: function () {
        return this.$Ref_nodeNetworks;
      },
      get_Ref_parameters: function () {
        return this.$Ref_parameters;
      },
      get_Ref_portTypes: function () {
        return this.$Ref_portTypes;
      },
      get_Att_estimatedRate: function () {
        return this.$Att_estimatedRate;
      },
      get_Att_value: function () {
        return this.$Att_value;
      },
      get_org_kevoree_NetworkProperty: function () {
        return this.$org_kevoree_NetworkProperty;
      },
      get_org_kevoree_Port: function () {
        return this.$org_kevoree_Port;
      },
      get_Ref_managedPrimitiveTypeRefs: function () {
        return this.$Ref_managedPrimitiveTypeRefs;
      },
      get_org_kevoree_ComponentInstance: function () {
        return this.$org_kevoree_ComponentInstance;
      },
      get_org_kevoree_IntegrationPattern: function () {
        return this.$org_kevoree_IntegrationPattern;
      },
      get_org_kevoree_DictionaryAttribute: function () {
        return this.$org_kevoree_DictionaryAttribute;
      },
      get_Ref_wires: function () {
        return this.$Ref_wires;
      },
      get_org_kevoree_Namespace: function () {
        return this.$org_kevoree_Namespace;
      },
      get_Ref_typeDefinition: function () {
        return this.$Ref_typeDefinition;
      },
      get_org_kevoree_Channel: function () {
        return this.$org_kevoree_Channel;
      },
      get_Ref_deployUnits: function () {
        return this.$Ref_deployUnits;
      },
      get_org_kevoree_Wire: function () {
        return this.$org_kevoree_Wire;
      },
      get_org_kevoree_Dictionary: function () {
        return this.$org_kevoree_Dictionary;
      },
      get_Att_synchrone: function () {
        return this.$Att_synchrone;
      },
      get_CN_Wire: function () {
        return this.$CN_Wire;
      },
      get_Ref_repositories: function () {
        return this.$Ref_repositories;
      },
      get_Ref_required: function () {
        return this.$Ref_required;
      },
      get_org_kevoree_ExtraFonctionalProperty: function () {
        return this.$org_kevoree_ExtraFonctionalProperty;
      },
      get_Att_lastCheck: function () {
        return this.$Att_lastCheck;
      },
      get_Ref_libraries: function () {
        return this.$Ref_libraries;
      },
      get_Att_upperFragments: function () {
        return this.$Att_upperFragments;
      },
      get_CN_IntegrationPattern: function () {
        return this.$CN_IntegrationPattern;
      },
      get_CN_ContainerNode: function () {
        return this.$CN_ContainerNode;
      },
      get_Att_groupName: function () {
        return this.$Att_groupName;
      },
      get_CN_Parameter: function () {
        return this.$CN_Parameter;
      },
      get_CN_DictionaryValue: function () {
        return this.$CN_DictionaryValue;
      },
      get_org_kevoree_PortTypeRef: function () {
        return this.$org_kevoree_PortTypeRef;
      },
      get_Ref_filters: function () {
        return this.$Ref_filters;
      },
      get_CN_NetworkProperty: function () {
        return this.$CN_NetworkProperty;
      },
      get_org_kevoree_DictionaryType: function () {
        return this.$org_kevoree_DictionaryType;
      },
      get_CN_NodeType: function () {
        return this.$CN_NodeType;
      },
      get_Att_bean: function () {
        return this.$Att_bean;
      },
      get_CN_Channel: function () {
        return this.$CN_Channel;
      },
      get_Ref_bindings: function () {
        return this.$Ref_bindings;
      },
      get_Ref_ref: function () {
        return this.$Ref_ref;
      },
      get_CN_DictionaryType: function () {
        return this.$CN_DictionaryType;
      },
      get_Ref_extraFonctionalProperties: function () {
        return this.$Ref_extraFonctionalProperties;
      },
      get_org_kevoree_MessagePortType: function () {
        return this.$org_kevoree_MessagePortType;
      }
    });
  }.call(_.org.kevoree.util));
  (function () {
    this.Package = Kotlin.createObject({
      initialize: function () {
        this.$ORG_KEVOREE = 0;
      },
      get_ORG_KEVOREE: function () {
        return this.$ORG_KEVOREE;
      },
      getPackageForName: function (metaClassName) {
        if (_.js.startsWith(metaClassName, 'org.kevoree')) {
          return 0;
        }
        return -1;
      }
    });
  }.call(_.org.kevoree.factory));
  (function () {
    this.JsonToken = Kotlin.createObject({
      initialize: function () {
        this.$BEGIN_ARRAY = 0;
        this.$END_ARRAY = 1;
        this.$BEGIN_OBJECT = 2;
        this.$END_OBJECT = 3;
        this.$NAME = 4;
        this.$STRING = 5;
        this.$NUMBER = 6;
        this.$BOOLEAN = 7;
        this.$NULL = 8;
        this.$END_DOCUMENT = 9;
      },
      get_BEGIN_ARRAY: function () {
        return this.$BEGIN_ARRAY;
      },
      get_END_ARRAY: function () {
        return this.$END_ARRAY;
      },
      get_BEGIN_OBJECT: function () {
        return this.$BEGIN_OBJECT;
      },
      get_END_OBJECT: function () {
        return this.$END_OBJECT;
      },
      get_NAME: function () {
        return this.$NAME;
      },
      get_STRING: function () {
        return this.$STRING;
      },
      get_NUMBER: function () {
        return this.$NUMBER;
      },
      get_BOOLEAN: function () {
        return this.$BOOLEAN;
      },
      get_NULL: function () {
        return this.$NULL;
      },
      get_END_DOCUMENT: function () {
        return this.$END_DOCUMENT;
      }
    });
    this.Type = Kotlin.createObject({
      initialize: function () {
        this.$VALUE = 0;
        this.$LEFT_BRACE = 1;
        this.$RIGHT_BRACE = 2;
        this.$LEFT_BRACKET = 3;
        this.$RIGHT_BRACKET = 4;
        this.$COMMA = 5;
        this.$COLON = 6;
        this.$EOF = 42;
      },
      get_VALUE: function () {
        return this.$VALUE;
      },
      get_LEFT_BRACE: function () {
        return this.$LEFT_BRACE;
      },
      get_RIGHT_BRACE: function () {
        return this.$RIGHT_BRACE;
      },
      get_LEFT_BRACKET: function () {
        return this.$LEFT_BRACKET;
      },
      get_RIGHT_BRACKET: function () {
        return this.$RIGHT_BRACKET;
      },
      get_COMMA: function () {
        return this.$COMMA;
      },
      get_COLON: function () {
        return this.$COLON;
      },
      get_EOF: function () {
        return this.$EOF;
      }
    });
  }.call(_.org.kevoree.loader));
  (function () {
    this.IntegerParser = Kotlin.createObject({
      initialize: function () {
        this.$DIGIT = null;
      },
      get_DIGIT: function () {
        return this.$DIGIT;
      },
      set_DIGIT: function (tmp$0) {
        this.$DIGIT = tmp$0;
      },
      digit: function (c) {
        if (this.get_DIGIT() == null) {
          this.set_DIGIT(new Kotlin.PrimitiveHashMap(0));
          var tmp$0, tmp$1, tmp$2, tmp$3, tmp$4, tmp$5, tmp$6, tmp$7, tmp$8, tmp$9;
          ((tmp$0 = this.get_DIGIT()) != null ? tmp$0 : Kotlin.throwNPE()).put('0', 0);
          ((tmp$1 = this.get_DIGIT()) != null ? tmp$1 : Kotlin.throwNPE()).put('1', 1);
          ((tmp$2 = this.get_DIGIT()) != null ? tmp$2 : Kotlin.throwNPE()).put('2', 2);
          ((tmp$3 = this.get_DIGIT()) != null ? tmp$3 : Kotlin.throwNPE()).put('3', 3);
          ((tmp$4 = this.get_DIGIT()) != null ? tmp$4 : Kotlin.throwNPE()).put('4', 4);
          ((tmp$5 = this.get_DIGIT()) != null ? tmp$5 : Kotlin.throwNPE()).put('5', 5);
          ((tmp$6 = this.get_DIGIT()) != null ? tmp$6 : Kotlin.throwNPE()).put('6', 6);
          ((tmp$7 = this.get_DIGIT()) != null ? tmp$7 : Kotlin.throwNPE()).put('7', 7);
          ((tmp$8 = this.get_DIGIT()) != null ? tmp$8 : Kotlin.throwNPE()).put('8', 8);
          ((tmp$9 = this.get_DIGIT()) != null ? tmp$9 : Kotlin.throwNPE()).put('9', 9);
        }
        var tmp$10;
        if (((tmp$10 = this.get_DIGIT()) != null ? tmp$10 : Kotlin.throwNPE()).containsKey(c)) {
          var tmp$11, tmp$12;
          return (tmp$12 = ((tmp$11 = this.get_DIGIT()) != null ? tmp$11 : Kotlin.throwNPE()).get(c)) != null ? tmp$12 : Kotlin.throwNPE();
        }
         else {
          return -1;
        }
      },
      parseInt: function (s) {
        var radix = 10;
        var result = 0;
        var negative = false;
        var i = 0;
        var len = _.js.length(s);
        var digit = 0;
        if (len > 0) {
          var firstChar = s.charAt(0);
          if (firstChar < '0') {
            if (firstChar === '-') {
              negative = true;
            }
             else {
              return null;
            }
            if (len === 1) {
              return null;
            }
            i++;
          }
          while (i < len) {
            digit = this.digit(s.charAt(i++));
            if (digit < 0) {
              return null;
            }
            result *= radix;
            result -= digit;
          }
        }
         else {
          return null;
        }
        if (negative) {
          return result;
        }
         else {
          return -result;
        }
      }
    });
  }.call(_.java.lang));
  (function () {
    this.$asserter = new _.kotlin.test.QUnitAsserter();
  }.call(_.kotlin.test));
  (function () {
    this.State = Kotlin.createObject({
      initialize: function () {
        this.$Ready = 0;
        this.$NotReady = 1;
        this.$Done = 2;
        this.$Failed = 3;
      },
      get_Ready: function () {
        return this.$Ready;
      },
      get_NotReady: function () {
        return this.$NotReady;
      },
      get_Done: function () {
        return this.$Done;
      },
      get_Failed: function () {
        return this.$Failed;
      }
    });
  }.call(_.kotlin.support));
  Kotlin.defineModule('org.kevoree.modeling.sample.kevoree.js', _);
}());
